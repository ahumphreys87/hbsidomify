exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _morphRange = require("../morph-range");

var _morphRange2 = _interopRequireDefault(_morphRange);

var guid = 1;

function HTMLBarsMorph(domHelper, contextualElement) {
  this.super$constructor(domHelper, contextualElement);

  this._state = undefined;
  this.ownerNode = null;
  this.isDirty = false;
  this.isSubtreeDirty = false;
  this.lastYielded = null;
  this.lastResult = null;
  this.lastValue = null;
  this.buildChildEnv = null;
  this.morphList = null;
  this.morphMap = null;
  this.key = null;
  this.linkedParams = null;
  this.linkedResult = null;
  this.childNodes = null;
  this.rendered = false;
  this.guid = "range" + guid++;
  this.seen = false;
}

HTMLBarsMorph.empty = function (domHelper, contextualElement) {
  var morph = new HTMLBarsMorph(domHelper, contextualElement);
  morph.clear();
  return morph;
};

HTMLBarsMorph.create = function (domHelper, contextualElement, node) {
  var morph = new HTMLBarsMorph(domHelper, contextualElement);
  morph.setNode(node);
  return morph;
};

HTMLBarsMorph.attach = function (domHelper, contextualElement, firstNode, lastNode) {
  var morph = new HTMLBarsMorph(domHelper, contextualElement);
  morph.setRange(firstNode, lastNode);
  return morph;
};

var prototype = HTMLBarsMorph.prototype = Object.create(_morphRange2.default.prototype);
prototype.constructor = HTMLBarsMorph;
prototype.super$constructor = _morphRange2.default;

prototype.getState = function () {
  if (!this._state) {
    this._state = {};
  }

  return this._state;
};

prototype.setState = function (newState) {
  /*jshint -W093 */

  return this._state = newState;
};

exports.default = HTMLBarsMorph;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUvbW9ycGguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OzswQkFBc0IsZ0JBQWdCOzs7O0FBRXRDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQzs7QUFFYixTQUFTLGFBQWEsQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLEVBQUU7QUFDbkQsTUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDOztBQUVyRCxNQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztBQUN4QixNQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztBQUN0QixNQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUNyQixNQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztBQUM1QixNQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUN4QixNQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztBQUN2QixNQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztBQUN0QixNQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztBQUMxQixNQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztBQUN0QixNQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztBQUNyQixNQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztBQUNoQixNQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUN6QixNQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUN6QixNQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztBQUN2QixNQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztBQUN0QixNQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sR0FBRyxJQUFJLEVBQUUsQ0FBQztBQUM3QixNQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztDQUNuQjs7QUFFRCxhQUFhLENBQUMsS0FBSyxHQUFHLFVBQVMsU0FBUyxFQUFFLGlCQUFpQixFQUFFO0FBQzNELE1BQUksS0FBSyxHQUFHLElBQUksYUFBYSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQzVELE9BQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNkLFNBQU8sS0FBSyxDQUFDO0NBQ2QsQ0FBQzs7QUFFRixhQUFhLENBQUMsTUFBTSxHQUFHLFVBQVUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRTtBQUNuRSxNQUFJLEtBQUssR0FBRyxJQUFJLGFBQWEsQ0FBQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUM1RCxPQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BCLFNBQU8sS0FBSyxDQUFDO0NBQ2QsQ0FBQzs7QUFFRixhQUFhLENBQUMsTUFBTSxHQUFHLFVBQVUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUU7QUFDbEYsTUFBSSxLQUFLLEdBQUcsSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDNUQsT0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDcEMsU0FBTyxLQUFLLENBQUM7Q0FDZCxDQUFDOztBQUVGLElBQUksU0FBUyxHQUFHLGFBQWEsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxxQkFBVSxTQUFTLENBQUMsQ0FBQztBQUM3RSxTQUFTLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQztBQUN0QyxTQUFTLENBQUMsaUJBQWlCLHVCQUFZLENBQUM7O0FBRXhDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsWUFBVztBQUM5QixNQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNoQixRQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztHQUNsQjs7QUFFRCxTQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7Q0FDcEIsQ0FBQzs7QUFFRixTQUFTLENBQUMsUUFBUSxHQUFHLFVBQVMsUUFBUSxFQUFFOzs7QUFHdEMsU0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztDQUMvQixDQUFDOztrQkFHYSxhQUFhIiwiZmlsZSI6Imh0bWxiYXJzLXJ1bnRpbWUvbW9ycGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTW9ycGhCYXNlIGZyb20gXCIuLi9tb3JwaC1yYW5nZVwiO1xuXG52YXIgZ3VpZCA9IDE7XG5cbmZ1bmN0aW9uIEhUTUxCYXJzTW9ycGgoZG9tSGVscGVyLCBjb250ZXh0dWFsRWxlbWVudCkge1xuICB0aGlzLnN1cGVyJGNvbnN0cnVjdG9yKGRvbUhlbHBlciwgY29udGV4dHVhbEVsZW1lbnQpO1xuXG4gIHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICB0aGlzLm93bmVyTm9kZSA9IG51bGw7XG4gIHRoaXMuaXNEaXJ0eSA9IGZhbHNlO1xuICB0aGlzLmlzU3VidHJlZURpcnR5ID0gZmFsc2U7XG4gIHRoaXMubGFzdFlpZWxkZWQgPSBudWxsO1xuICB0aGlzLmxhc3RSZXN1bHQgPSBudWxsO1xuICB0aGlzLmxhc3RWYWx1ZSA9IG51bGw7XG4gIHRoaXMuYnVpbGRDaGlsZEVudiA9IG51bGw7XG4gIHRoaXMubW9ycGhMaXN0ID0gbnVsbDtcbiAgdGhpcy5tb3JwaE1hcCA9IG51bGw7XG4gIHRoaXMua2V5ID0gbnVsbDtcbiAgdGhpcy5saW5rZWRQYXJhbXMgPSBudWxsO1xuICB0aGlzLmxpbmtlZFJlc3VsdCA9IG51bGw7XG4gIHRoaXMuY2hpbGROb2RlcyA9IG51bGw7XG4gIHRoaXMucmVuZGVyZWQgPSBmYWxzZTtcbiAgdGhpcy5ndWlkID0gXCJyYW5nZVwiICsgZ3VpZCsrO1xuICB0aGlzLnNlZW4gPSBmYWxzZTtcbn1cblxuSFRNTEJhcnNNb3JwaC5lbXB0eSA9IGZ1bmN0aW9uKGRvbUhlbHBlciwgY29udGV4dHVhbEVsZW1lbnQpIHtcbiAgdmFyIG1vcnBoID0gbmV3IEhUTUxCYXJzTW9ycGgoZG9tSGVscGVyLCBjb250ZXh0dWFsRWxlbWVudCk7XG4gIG1vcnBoLmNsZWFyKCk7XG4gIHJldHVybiBtb3JwaDtcbn07XG5cbkhUTUxCYXJzTW9ycGguY3JlYXRlID0gZnVuY3Rpb24gKGRvbUhlbHBlciwgY29udGV4dHVhbEVsZW1lbnQsIG5vZGUpIHtcbiAgdmFyIG1vcnBoID0gbmV3IEhUTUxCYXJzTW9ycGgoZG9tSGVscGVyLCBjb250ZXh0dWFsRWxlbWVudCk7XG4gIG1vcnBoLnNldE5vZGUobm9kZSk7XG4gIHJldHVybiBtb3JwaDtcbn07XG5cbkhUTUxCYXJzTW9ycGguYXR0YWNoID0gZnVuY3Rpb24gKGRvbUhlbHBlciwgY29udGV4dHVhbEVsZW1lbnQsIGZpcnN0Tm9kZSwgbGFzdE5vZGUpIHtcbiAgdmFyIG1vcnBoID0gbmV3IEhUTUxCYXJzTW9ycGgoZG9tSGVscGVyLCBjb250ZXh0dWFsRWxlbWVudCk7XG4gIG1vcnBoLnNldFJhbmdlKGZpcnN0Tm9kZSwgbGFzdE5vZGUpO1xuICByZXR1cm4gbW9ycGg7XG59O1xuXG52YXIgcHJvdG90eXBlID0gSFRNTEJhcnNNb3JwaC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vcnBoQmFzZS5wcm90b3R5cGUpO1xucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSFRNTEJhcnNNb3JwaDtcbnByb3RvdHlwZS5zdXBlciRjb25zdHJ1Y3RvciA9IE1vcnBoQmFzZTtcblxucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5fc3RhdGUpIHtcbiAgICB0aGlzLl9zdGF0ZSA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX3N0YXRlO1xufTtcblxucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24obmV3U3RhdGUpIHtcbiAgLypqc2hpbnQgLVcwOTMgKi9cblxuICByZXR1cm4gdGhpcy5fc3RhdGUgPSBuZXdTdGF0ZTtcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgSFRNTEJhcnNNb3JwaDtcbiJdfQ==