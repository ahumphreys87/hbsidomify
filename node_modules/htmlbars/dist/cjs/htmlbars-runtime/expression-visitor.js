exports.__esModule = true;
exports.acceptParams = acceptParams;
exports.acceptHash = acceptHash;
/**
  # Expression Nodes:

  These nodes are not directly responsible for any part of the DOM, but are
  eventually passed to a Statement Node.

  * get
  * subexpr
  * concat
*/

function acceptParams(nodes, env, scope) {
  var array = [];

  for (var i = 0, l = nodes.length; i < l; i++) {
    array.push(acceptExpression(nodes[i], env, scope).value);
  }

  return array;
}

function acceptHash(pairs, env, scope) {
  var object = {};

  for (var i = 0, l = pairs.length; i < l; i += 2) {
    var key = pairs[i];
    var value = pairs[i + 1];
    object[key] = acceptExpression(value, env, scope).value;
  }

  return object;
}

function acceptExpression(node, env, scope) {
  var ret = { value: null };

  // Primitive literals are unambiguously non-array representations of
  // themselves.
  if (typeof node !== 'object' || node === null) {
    ret.value = node;
  } else {
    ret.value = evaluateNode(node, env, scope);
  }

  return ret;
}

function evaluateNode(node, env, scope) {
  switch (node[0]) {
    // can be used by manualElement
    case 'value':
      return node[1];
    case 'get':
      return evaluateGet(node, env, scope);
    case 'subexpr':
      return evaluateSubexpr(node, env, scope);
    case 'concat':
      return evaluateConcat(node, env, scope);
  }
}

function evaluateGet(node, env, scope) {
  var path = node[1];

  return env.hooks.get(env, scope, path);
}

function evaluateSubexpr(node, env, scope) {
  var path = node[1];
  var rawParams = node[2];
  var rawHash = node[3];

  var params = acceptParams(rawParams, env, scope);
  var hash = acceptHash(rawHash, env, scope);

  return env.hooks.subexpr(env, scope, path, params, hash);
}

function evaluateConcat(node, env, scope) {
  var rawParts = node[1];

  var parts = acceptParams(rawParts, env, scope);

  return env.hooks.concat(env, parts);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXJ1bnRpbWUvZXhwcmVzc2lvbi12aXNpdG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBV08sU0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDOUMsTUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDOztBQUVmLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDNUMsU0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzFEOztBQUVELFNBQU8sS0FBSyxDQUFDO0NBQ2Q7O0FBRU0sU0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDNUMsTUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDOztBQUVoQixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDL0MsUUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25CLFFBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsVUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDO0dBQ3pEOztBQUVELFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUMxQyxNQUFJLEdBQUcsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQzs7OztBQUkxQixNQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO0FBQzdDLE9BQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0dBQ2xCLE1BQU07QUFDTCxPQUFHLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0dBQzVDOztBQUVELFNBQU8sR0FBRyxDQUFDO0NBQ1o7O0FBRUQsU0FBUyxZQUFZLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDdEMsVUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFDOztBQUViLFNBQUssT0FBTztBQUFJLGFBQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQUEsQUFDL0IsU0FBSyxLQUFLO0FBQU0sYUFBTyxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUFBLEFBQ3JELFNBQUssU0FBUztBQUFFLGFBQU8sZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFBQSxBQUN6RCxTQUFLLFFBQVE7QUFBRyxhQUFPLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQUEsR0FDekQ7Q0FDRjs7QUFFRCxTQUFTLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtNQUM5QixJQUFJLEdBQUksSUFBSTs7QUFFbkIsU0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3hDOztBQUVELFNBQVMsZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFO01BQ2xDLElBQUksR0FBd0IsSUFBSTtNQUExQixTQUFTLEdBQWEsSUFBSTtNQUFmLE9BQU8sR0FBSSxJQUFJOztBQUV2QyxNQUFJLE1BQU0sR0FBRyxZQUFZLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNqRCxNQUFJLElBQUksR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQzs7QUFFM0MsU0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDMUQ7O0FBRUQsU0FBUyxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7TUFDakMsUUFBUSxHQUFJLElBQUk7O0FBRXZCLE1BQUksS0FBSyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDOztBQUUvQyxTQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUNyQyIsImZpbGUiOiJodG1sYmFycy1ydW50aW1lL2V4cHJlc3Npb24tdmlzaXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICAjIEV4cHJlc3Npb24gTm9kZXM6XG5cbiAgVGhlc2Ugbm9kZXMgYXJlIG5vdCBkaXJlY3RseSByZXNwb25zaWJsZSBmb3IgYW55IHBhcnQgb2YgdGhlIERPTSwgYnV0IGFyZVxuICBldmVudHVhbGx5IHBhc3NlZCB0byBhIFN0YXRlbWVudCBOb2RlLlxuXG4gICogZ2V0XG4gICogc3ViZXhwclxuICAqIGNvbmNhdFxuKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFjY2VwdFBhcmFtcyhub2RlcywgZW52LCBzY29wZSkge1xuICBsZXQgYXJyYXkgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFycmF5LnB1c2goYWNjZXB0RXhwcmVzc2lvbihub2Rlc1tpXSwgZW52LCBzY29wZSkudmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWNjZXB0SGFzaChwYWlycywgZW52LCBzY29wZSkge1xuICBsZXQgb2JqZWN0ID0ge307XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpICs9IDIpIHtcbiAgICBsZXQga2V5ID0gcGFpcnNbaV07XG4gICAgbGV0IHZhbHVlID0gcGFpcnNbaSsxXTtcbiAgICBvYmplY3Rba2V5XSA9IGFjY2VwdEV4cHJlc3Npb24odmFsdWUsIGVudiwgc2NvcGUpLnZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gYWNjZXB0RXhwcmVzc2lvbihub2RlLCBlbnYsIHNjb3BlKSB7XG4gIGxldCByZXQgPSB7IHZhbHVlOiBudWxsIH07XG5cbiAgLy8gUHJpbWl0aXZlIGxpdGVyYWxzIGFyZSB1bmFtYmlndW91c2x5IG5vbi1hcnJheSByZXByZXNlbnRhdGlvbnMgb2ZcbiAgLy8gdGhlbXNlbHZlcy5cbiAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0JyB8fCBub2RlID09PSBudWxsKSB7XG4gICAgcmV0LnZhbHVlID0gbm9kZTtcbiAgfSBlbHNlIHtcbiAgICByZXQudmFsdWUgPSBldmFsdWF0ZU5vZGUobm9kZSwgZW52LCBzY29wZSk7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBldmFsdWF0ZU5vZGUobm9kZSwgZW52LCBzY29wZSkge1xuICBzd2l0Y2ggKG5vZGVbMF0pIHtcbiAgICAvLyBjYW4gYmUgdXNlZCBieSBtYW51YWxFbGVtZW50XG4gICAgY2FzZSAndmFsdWUnOiAgIHJldHVybiBub2RlWzFdO1xuICAgIGNhc2UgJ2dldCc6ICAgICByZXR1cm4gZXZhbHVhdGVHZXQobm9kZSwgZW52LCBzY29wZSk7XG4gICAgY2FzZSAnc3ViZXhwcic6IHJldHVybiBldmFsdWF0ZVN1YmV4cHIobm9kZSwgZW52LCBzY29wZSk7XG4gICAgY2FzZSAnY29uY2F0JzogIHJldHVybiBldmFsdWF0ZUNvbmNhdChub2RlLCBlbnYsIHNjb3BlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBldmFsdWF0ZUdldChub2RlLCBlbnYsIHNjb3BlKSB7XG4gIGxldCBbLCBwYXRoXSA9IG5vZGU7XG5cbiAgcmV0dXJuIGVudi5ob29rcy5nZXQoZW52LCBzY29wZSwgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGV2YWx1YXRlU3ViZXhwcihub2RlLCBlbnYsIHNjb3BlKSB7XG4gIGxldCBbLCBwYXRoLCByYXdQYXJhbXMsIHJhd0hhc2hdID0gbm9kZTtcblxuICBsZXQgcGFyYW1zID0gYWNjZXB0UGFyYW1zKHJhd1BhcmFtcywgZW52LCBzY29wZSk7XG4gIGxldCBoYXNoID0gYWNjZXB0SGFzaChyYXdIYXNoLCBlbnYsIHNjb3BlKTtcblxuICByZXR1cm4gZW52Lmhvb2tzLnN1YmV4cHIoZW52LCBzY29wZSwgcGF0aCwgcGFyYW1zLCBoYXNoKTtcbn1cblxuZnVuY3Rpb24gZXZhbHVhdGVDb25jYXQobm9kZSwgZW52LCBzY29wZSkge1xuICBsZXQgWywgcmF3UGFydHNdID0gbm9kZTtcblxuICBsZXQgcGFydHMgPSBhY2NlcHRQYXJhbXMocmF3UGFydHMsIGVudiwgc2NvcGUpO1xuXG4gIHJldHVybiBlbnYuaG9va3MuY29uY2F0KGVudiwgcGFydHMpO1xufVxuIl19