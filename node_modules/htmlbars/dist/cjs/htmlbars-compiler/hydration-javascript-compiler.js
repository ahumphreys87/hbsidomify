exports.__esModule = true;

var _utils = require("./utils");

var _htmlbarsUtilQuoting = require("../htmlbars-util/quoting");

function HydrationJavaScriptCompiler() {
  this.stack = [];
  this.source = [];
  this.mustaches = [];
  this.parents = [['fragment']];
  this.parentCount = 0;
  this.morphs = [];
  this.fragmentProcessing = [];
  this.hooks = undefined;
}

exports.default = HydrationJavaScriptCompiler;

var prototype = HydrationJavaScriptCompiler.prototype;

prototype.compile = function (opcodes, options) {
  this.stack.length = 0;
  this.mustaches.length = 0;
  this.source.length = 0;
  this.parents.length = 1;
  this.parents[0] = ['fragment'];
  this.morphs.length = 0;
  this.fragmentProcessing.length = 0;
  this.parentCount = 0;
  this.indent = options && options.indent || "";
  this.hooks = {};
  this.hasOpenBoundary = false;
  this.hasCloseBoundary = false;
  this.statements = [];
  this.expressionStack = [];
  this.locals = [];
  this.hasOpenBoundary = false;
  this.hasCloseBoundary = false;

  _utils.processOpcodes(this, opcodes);

  if (this.hasOpenBoundary) {
    this.source.unshift(this.indent + "  dom.insertBoundary(fragment, 0);\n");
  }

  if (this.hasCloseBoundary) {
    this.source.unshift(this.indent + "  dom.insertBoundary(fragment, null);\n");
  }

  var i, l;

  var indent = this.indent;

  var morphs;

  var result = {
    createMorphsProgram: '',
    hydrateMorphsProgram: '',
    fragmentProcessingProgram: '',
    statements: this.statements,
    locals: this.locals,
    hasMorphs: false
  };

  result.hydrateMorphsProgram = this.source.join('');

  if (this.morphs.length) {
    result.hasMorphs = true;
    morphs = indent + '  var morphs = new Array(' + this.morphs.length + ');\n';

    for (i = 0, l = this.morphs.length; i < l; ++i) {
      var morph = this.morphs[i];
      morphs += indent + '  morphs[' + i + '] = ' + morph + ';\n';
    }
  }

  if (this.fragmentProcessing.length) {
    var processing = "";
    for (i = 0, l = this.fragmentProcessing.length; i < l; ++i) {
      processing += this.indent + '  ' + this.fragmentProcessing[i] + '\n';
    }
    result.fragmentProcessingProgram = processing;
  }

  var createMorphsProgram;
  if (result.hasMorphs) {
    createMorphsProgram = 'function buildRenderNodes(dom, fragment, contextualElement) {\n' + result.fragmentProcessingProgram + morphs;

    if (this.hasOpenBoundary) {
      createMorphsProgram += indent + "  dom.insertBoundary(fragment, 0);\n";
    }

    if (this.hasCloseBoundary) {
      createMorphsProgram += indent + "  dom.insertBoundary(fragment, null);\n";
    }

    createMorphsProgram += indent + '  return morphs;\n' + indent + '}';
  } else {
    createMorphsProgram = 'function buildRenderNodes() { return []; }';
  }

  result.createMorphsProgram = createMorphsProgram;

  return result;
};

prototype.prepareArray = function (length) {
  var values = [];

  for (var i = 0; i < length; i++) {
    values.push(this.expressionStack.pop());
  }

  this.expressionStack.push(values);
};

prototype.prepareObject = function (size) {
  var pairs = [];

  for (var i = 0; i < size; i++) {
    pairs.push(this.expressionStack.pop(), this.expressionStack.pop());
  }

  this.expressionStack.push(pairs);
};

prototype.openBoundary = function () {
  this.hasOpenBoundary = true;
};

prototype.closeBoundary = function () {
  this.hasCloseBoundary = true;
};

prototype.pushLiteral = function (value) {
  this.expressionStack.push(value);
};

prototype.pushGetHook = function (path, meta) {
  this.expressionStack.push(['get', path, meta]);
};

prototype.pushSexprHook = function (meta) {
  this.expressionStack.push(['subexpr', this.expressionStack.pop(), this.expressionStack.pop(), this.expressionStack.pop(), meta]);
};

prototype.pushConcatHook = function () {
  this.expressionStack.push(['concat', this.expressionStack.pop()]);
};

prototype.printSetHook = function (name) {
  this.locals.push(name);
};

prototype.printBlockHook = function (templateId, inverseId, meta) {
  this.statements.push(['block', this.expressionStack.pop(), // path
  this.expressionStack.pop(), // params
  this.expressionStack.pop(), // hash
  templateId, inverseId, meta]);
};

prototype.printInlineHook = function (meta) {
  var path = this.expressionStack.pop();
  var params = this.expressionStack.pop();
  var hash = this.expressionStack.pop();

  this.statements.push(['inline', path, params, hash, meta]);
};

prototype.printContentHook = function (meta) {
  this.statements.push(['content', this.expressionStack.pop(), meta]);
};

prototype.printComponentHook = function (templateId) {
  this.statements.push(['component', this.expressionStack.pop(), // path
  this.expressionStack.pop(), // attrs
  templateId]);
};

prototype.printAttributeHook = function () {
  this.statements.push(['attribute', this.expressionStack.pop(), // name
  this.expressionStack.pop() // value;
  ]);
};

prototype.printElementHook = function (meta) {
  this.statements.push(['element', this.expressionStack.pop(), // path
  this.expressionStack.pop(), // params
  this.expressionStack.pop(), // hash
  meta]);
};

prototype.createMorph = function (morphNum, parentPath, startIndex, endIndex, escaped) {
  var isRoot = parentPath.length === 0;
  var parent = this.getParent();

  var morphMethod = escaped ? 'createMorphAt' : 'createUnsafeMorphAt';
  var morph = "dom." + morphMethod + "(" + parent + "," + (startIndex === null ? "-1" : startIndex) + "," + (endIndex === null ? "-1" : endIndex) + (isRoot ? ",contextualElement)" : ")");

  this.morphs[morphNum] = morph;
};

prototype.createAttrMorph = function (attrMorphNum, elementNum, name, escaped, namespace) {
  var morphMethod = escaped ? 'createAttrMorph' : 'createUnsafeAttrMorph';
  var morph = "dom." + morphMethod + "(element" + elementNum + ", '" + name + (namespace ? "', '" + namespace : '') + "')";
  this.morphs[attrMorphNum] = morph;
};

prototype.createElementMorph = function (morphNum, elementNum) {
  var morphMethod = 'createElementMorph';
  var morph = "dom." + morphMethod + "(element" + elementNum + ")";
  this.morphs[morphNum] = morph;
};

prototype.repairClonedNode = function (blankChildTextNodes, isElementChecked) {
  var parent = this.getParent(),
      processing = 'if (this.cachedFragment) { dom.repairClonedNode(' + parent + ',' + _htmlbarsUtilQuoting.array(blankChildTextNodes) + (isElementChecked ? ',true' : '') + '); }';
  this.fragmentProcessing.push(processing);
};

prototype.shareElement = function (elementNum) {
  var elementNodesName = "element" + elementNum;
  this.fragmentProcessing.push('var ' + elementNodesName + ' = ' + this.getParent() + ';');
  this.parents[this.parents.length - 1] = [elementNodesName];
};

prototype.consumeParent = function (i) {
  var newParent = this.lastParent().slice();
  newParent.push(i);

  this.parents.push(newParent);
};

prototype.popParent = function () {
  this.parents.pop();
};

prototype.getParent = function () {
  var last = this.lastParent().slice();
  var frag = last.shift();

  if (!last.length) {
    return frag;
  }

  return 'dom.childAt(' + frag + ', [' + last.join(', ') + '])';
};

prototype.lastParent = function () {
  return this.parents[this.parents.length - 1];
};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLWNvbXBpbGVyL2h5ZHJhdGlvbi1qYXZhc2NyaXB0LWNvbXBpbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O3FCQUErQixTQUFTOzttQ0FDbEIsMEJBQTBCOztBQUVoRCxTQUFTLDJCQUEyQixHQUFHO0FBQ3JDLE1BQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLE1BQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLE1BQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLE1BQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDOUIsTUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDckIsTUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDakIsTUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztBQUM3QixNQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztDQUN4Qjs7a0JBRWMsMkJBQTJCOztBQUUxQyxJQUFJLFNBQVMsR0FBRywyQkFBMkIsQ0FBQyxTQUFTLENBQUM7O0FBRXRELFNBQVMsQ0FBQyxPQUFPLEdBQUcsVUFBUyxPQUFPLEVBQUUsT0FBTyxFQUFFO0FBQzdDLE1BQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUN0QixNQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDMUIsTUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUN4QixNQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDL0IsTUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLE1BQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLE1BQUksQ0FBQyxNQUFNLEdBQUcsQUFBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSyxFQUFFLENBQUM7QUFDaEQsTUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDaEIsTUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7QUFDN0IsTUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztBQUM5QixNQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUNyQixNQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNqQixNQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztBQUM3QixNQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDOztBQUU5Qix3QkFBZSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7O0FBRTlCLE1BQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUN4QixRQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLHNDQUFzQyxDQUFDLENBQUM7R0FDekU7O0FBRUQsTUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDekIsUUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0dBQzVFOztBQUVELE1BQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzs7QUFFVCxNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDOztBQUV6QixNQUFJLE1BQU0sQ0FBQzs7QUFFWCxNQUFJLE1BQU0sR0FBRztBQUNYLHVCQUFtQixFQUFFLEVBQUU7QUFDdkIsd0JBQW9CLEVBQUUsRUFBRTtBQUN4Qiw2QkFBeUIsRUFBRSxFQUFFO0FBQzdCLGNBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtBQUMzQixVQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07QUFDbkIsYUFBUyxFQUFFLEtBQUs7R0FDakIsQ0FBQzs7QUFFRixRQUFNLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7O0FBRW5ELE1BQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDdEIsVUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFDeEIsVUFBTSxHQUNKLE1BQU0sR0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7O0FBRWpFLFNBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtBQUM5QyxVQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFlBQU0sSUFBSSxNQUFNLEdBQUMsV0FBVyxHQUFDLENBQUMsR0FBQyxNQUFNLEdBQUMsS0FBSyxHQUFDLEtBQUssQ0FBQztLQUNuRDtHQUNKOztBQUVELE1BQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRTtBQUNsQyxRQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDcEIsU0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDMUQsZ0JBQVUsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFDLElBQUksR0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDO0tBQ2hFO0FBQ0QsVUFBTSxDQUFDLHlCQUF5QixHQUFHLFVBQVUsQ0FBQztHQUMvQzs7QUFFRCxNQUFJLG1CQUFtQixDQUFDO0FBQ3hCLE1BQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtBQUNwQix1QkFBbUIsR0FDakIsaUVBQWlFLEdBQ2pFLE1BQU0sQ0FBQyx5QkFBeUIsR0FBRyxNQUFNLENBQUM7O0FBRTFDLFFBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUN4Qix5QkFBbUIsSUFBSSxNQUFNLEdBQUMsc0NBQXNDLENBQUM7S0FDdEU7O0FBRUQsUUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDekIseUJBQW1CLElBQUksTUFBTSxHQUFDLHlDQUF5QyxDQUFDO0tBQ3pFOztBQUVELHVCQUFtQixJQUNuQixNQUFNLEdBQUcsb0JBQW9CLEdBQzdCLE1BQU0sR0FBQyxHQUFHLENBQUM7R0FDZCxNQUFNO0FBQ0wsdUJBQW1CLEdBQ2pCLDRDQUE0QyxDQUFDO0dBQ2hEOztBQUVELFFBQU0sQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQzs7QUFFakQsU0FBTyxNQUFNLENBQUM7Q0FDZixDQUFDOztBQUVGLFNBQVMsQ0FBQyxZQUFZLEdBQUcsVUFBUyxNQUFNLEVBQUU7QUFDeEMsTUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDOztBQUVoQixPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQy9CLFVBQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0dBQ3pDOztBQUVELE1BQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ25DLENBQUM7O0FBRUYsU0FBUyxDQUFDLGFBQWEsR0FBRyxVQUFTLElBQUksRUFBRTtBQUN2QyxNQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7O0FBRWYsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUM3QixTQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0dBQ3BFOztBQUVELE1BQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2xDLENBQUM7O0FBRUYsU0FBUyxDQUFDLFlBQVksR0FBRyxZQUFXO0FBQ2xDLE1BQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0NBQzdCLENBQUM7O0FBRUYsU0FBUyxDQUFDLGFBQWEsR0FBRyxZQUFXO0FBQ25DLE1BQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7Q0FDOUIsQ0FBQzs7QUFFRixTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVMsS0FBSyxFQUFFO0FBQ3RDLE1BQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2xDLENBQUM7O0FBRUYsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFTLElBQUksRUFBRSxJQUFJLEVBQUU7QUFDM0MsTUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBRSxDQUFDLENBQUM7Q0FDbEQsQ0FBQzs7QUFFRixTQUFTLENBQUMsYUFBYSxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQ3ZDLE1BQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQ3hCLFNBQVMsRUFDVCxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxFQUMxQixJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxFQUMxQixJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxFQUMxQixJQUFJLENBQ0wsQ0FBQyxDQUFDO0NBQ0osQ0FBQzs7QUFFRixTQUFTLENBQUMsY0FBYyxHQUFHLFlBQVc7QUFDcEMsTUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBRSxDQUFDLENBQUM7Q0FDckUsQ0FBQzs7QUFFRixTQUFTLENBQUMsWUFBWSxHQUFHLFVBQVMsSUFBSSxFQUFFO0FBQ3RDLE1BQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3hCLENBQUM7O0FBRUYsU0FBUyxDQUFDLGNBQWMsR0FBRyxVQUFTLFVBQVUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO0FBQy9ELE1BQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQ25CLE9BQU8sRUFDUCxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRTtBQUMxQixNQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRTtBQUMxQixNQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRTtBQUMxQixZQUFVLEVBQ1YsU0FBUyxFQUNULElBQUksQ0FDTCxDQUFDLENBQUM7Q0FDSixDQUFDOztBQUVGLFNBQVMsQ0FBQyxlQUFlLEdBQUcsVUFBUyxJQUFJLEVBQUU7QUFDekMsTUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN0QyxNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3hDLE1BQUksSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLENBQUM7O0FBRXRDLE1BQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBRSxDQUFDLENBQUM7Q0FDOUQsQ0FBQzs7QUFFRixTQUFTLENBQUMsZ0JBQWdCLEdBQUcsVUFBUyxJQUFJLEVBQUU7QUFDMUMsTUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQ3RFLENBQUM7O0FBRUYsU0FBUyxDQUFDLGtCQUFrQixHQUFHLFVBQVMsVUFBVSxFQUFFO0FBQ2xELE1BQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQ25CLFdBQVcsRUFDWCxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRTtBQUMxQixNQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRTtBQUMxQixZQUFVLENBQ1gsQ0FBQyxDQUFDO0NBQ0osQ0FBQzs7QUFFRixTQUFTLENBQUMsa0JBQWtCLEdBQUcsWUFBVztBQUN4QyxNQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUNuQixXQUFXLEVBQ1gsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUU7QUFDMUIsTUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUU7R0FDM0IsQ0FBQyxDQUFDO0NBQ0osQ0FBQzs7QUFFRixTQUFTLENBQUMsZ0JBQWdCLEdBQUcsVUFBUyxJQUFJLEVBQUU7QUFDMUMsTUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FDbkIsU0FBUyxFQUNULElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFO0FBQzFCLE1BQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFO0FBQzFCLE1BQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFO0FBQzFCLE1BQUksQ0FDTCxDQUFDLENBQUM7Q0FDSixDQUFDOztBQUVGLFNBQVMsQ0FBQyxXQUFXLEdBQUcsVUFBUyxRQUFRLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFO0FBQ3BGLE1BQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLE1BQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzs7QUFFOUIsTUFBSSxXQUFXLEdBQUcsT0FBTyxHQUFHLGVBQWUsR0FBRyxxQkFBcUIsQ0FBQztBQUNwRSxNQUFJLEtBQUssR0FBRyxNQUFNLEdBQUMsV0FBVyxHQUFDLEdBQUcsR0FBQyxNQUFNLEdBQ3ZDLEdBQUcsSUFBRSxVQUFVLEtBQUssSUFBSSxHQUFHLElBQUksR0FBRyxVQUFVLENBQUEsQUFBQyxHQUM3QyxHQUFHLElBQUUsUUFBUSxLQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsUUFBUSxDQUFBLEFBQUMsSUFDeEMsTUFBTSxHQUFHLHFCQUFxQixHQUFHLEdBQUcsQ0FBQSxBQUFDLENBQUM7O0FBRXpDLE1BQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO0NBQy9CLENBQUM7O0FBRUYsU0FBUyxDQUFDLGVBQWUsR0FBRyxVQUFTLFlBQVksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUU7QUFDdkYsTUFBSSxXQUFXLEdBQUcsT0FBTyxHQUFHLGlCQUFpQixHQUFHLHVCQUF1QixDQUFDO0FBQ3hFLE1BQUksS0FBSyxHQUFHLE1BQU0sR0FBQyxXQUFXLEdBQUMsVUFBVSxHQUFDLFVBQVUsR0FBQyxLQUFLLEdBQUMsSUFBSSxJQUFFLFNBQVMsR0FBRyxNQUFNLEdBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQSxBQUFDLEdBQUMsSUFBSSxDQUFDO0FBQ3pHLE1BQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsS0FBSyxDQUFDO0NBQ25DLENBQUM7O0FBRUYsU0FBUyxDQUFDLGtCQUFrQixHQUFHLFVBQVMsUUFBUSxFQUFFLFVBQVUsRUFBRztBQUM3RCxNQUFJLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQztBQUN2QyxNQUFJLEtBQUssR0FBRyxNQUFNLEdBQUMsV0FBVyxHQUFDLFVBQVUsR0FBQyxVQUFVLEdBQUMsR0FBRyxDQUFDO0FBQ3pELE1BQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO0NBQy9CLENBQUM7O0FBRUYsU0FBUyxDQUFDLGdCQUFnQixHQUFHLFVBQVMsbUJBQW1CLEVBQUUsZ0JBQWdCLEVBQUU7QUFDM0UsTUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRTtNQUN6QixVQUFVLEdBQUcsa0RBQWtELEdBQUMsTUFBTSxHQUFDLEdBQUcsR0FDN0QsMkJBQU0sbUJBQW1CLENBQUMsSUFDeEIsZ0JBQWdCLEdBQUcsT0FBTyxHQUFHLEVBQUUsQ0FBQSxBQUFFLEdBQ25DLE1BQU0sQ0FBQztBQUN4QixNQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUMxQixVQUFVLENBQ1gsQ0FBQztDQUNILENBQUM7O0FBRUYsU0FBUyxDQUFDLFlBQVksR0FBRyxVQUFTLFVBQVUsRUFBQztBQUMzQyxNQUFJLGdCQUFnQixHQUFHLFNBQVMsR0FBRyxVQUFVLENBQUM7QUFDOUMsTUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsZ0JBQWdCLEdBQUMsS0FBSyxHQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqRixNQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUMxRCxDQUFDOztBQUVGLFNBQVMsQ0FBQyxhQUFhLEdBQUcsVUFBUyxDQUFDLEVBQUU7QUFDcEMsTUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzFDLFdBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRWxCLE1BQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQzlCLENBQUM7O0FBRUYsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFXO0FBQy9CLE1BQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7Q0FDcEIsQ0FBQzs7QUFFRixTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVc7QUFDL0IsTUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3JDLE1BQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7QUFFeEIsTUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDaEIsV0FBTyxJQUFJLENBQUM7R0FDYjs7QUFFRCxTQUFPLGNBQWMsR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0NBQy9ELENBQUM7O0FBRUYsU0FBUyxDQUFDLFVBQVUsR0FBRyxZQUFXO0FBQ2hDLFNBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQztDQUM1QyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLWNvbXBpbGVyL2h5ZHJhdGlvbi1qYXZhc2NyaXB0LWNvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvY2Vzc09wY29kZXMgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgYXJyYXkgfSBmcm9tIFwiLi4vaHRtbGJhcnMtdXRpbC9xdW90aW5nXCI7XG5cbmZ1bmN0aW9uIEh5ZHJhdGlvbkphdmFTY3JpcHRDb21waWxlcigpIHtcbiAgdGhpcy5zdGFjayA9IFtdO1xuICB0aGlzLnNvdXJjZSA9IFtdO1xuICB0aGlzLm11c3RhY2hlcyA9IFtdO1xuICB0aGlzLnBhcmVudHMgPSBbWydmcmFnbWVudCddXTtcbiAgdGhpcy5wYXJlbnRDb3VudCA9IDA7XG4gIHRoaXMubW9ycGhzID0gW107XG4gIHRoaXMuZnJhZ21lbnRQcm9jZXNzaW5nID0gW107XG4gIHRoaXMuaG9va3MgPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEh5ZHJhdGlvbkphdmFTY3JpcHRDb21waWxlcjtcblxudmFyIHByb3RvdHlwZSA9IEh5ZHJhdGlvbkphdmFTY3JpcHRDb21waWxlci5wcm90b3R5cGU7XG5cbnByb3RvdHlwZS5jb21waWxlID0gZnVuY3Rpb24ob3Bjb2Rlcywgb3B0aW9ucykge1xuICB0aGlzLnN0YWNrLmxlbmd0aCA9IDA7XG4gIHRoaXMubXVzdGFjaGVzLmxlbmd0aCA9IDA7XG4gIHRoaXMuc291cmNlLmxlbmd0aCA9IDA7XG4gIHRoaXMucGFyZW50cy5sZW5ndGggPSAxO1xuICB0aGlzLnBhcmVudHNbMF0gPSBbJ2ZyYWdtZW50J107XG4gIHRoaXMubW9ycGhzLmxlbmd0aCA9IDA7XG4gIHRoaXMuZnJhZ21lbnRQcm9jZXNzaW5nLmxlbmd0aCA9IDA7XG4gIHRoaXMucGFyZW50Q291bnQgPSAwO1xuICB0aGlzLmluZGVudCA9IChvcHRpb25zICYmIG9wdGlvbnMuaW5kZW50KSB8fCBcIlwiO1xuICB0aGlzLmhvb2tzID0ge307XG4gIHRoaXMuaGFzT3BlbkJvdW5kYXJ5ID0gZmFsc2U7XG4gIHRoaXMuaGFzQ2xvc2VCb3VuZGFyeSA9IGZhbHNlO1xuICB0aGlzLnN0YXRlbWVudHMgPSBbXTtcbiAgdGhpcy5leHByZXNzaW9uU3RhY2sgPSBbXTtcbiAgdGhpcy5sb2NhbHMgPSBbXTtcbiAgdGhpcy5oYXNPcGVuQm91bmRhcnkgPSBmYWxzZTtcbiAgdGhpcy5oYXNDbG9zZUJvdW5kYXJ5ID0gZmFsc2U7XG5cbiAgcHJvY2Vzc09wY29kZXModGhpcywgb3Bjb2Rlcyk7XG5cbiAgaWYgKHRoaXMuaGFzT3BlbkJvdW5kYXJ5KSB7XG4gICAgdGhpcy5zb3VyY2UudW5zaGlmdCh0aGlzLmluZGVudCtcIiAgZG9tLmluc2VydEJvdW5kYXJ5KGZyYWdtZW50LCAwKTtcXG5cIik7XG4gIH1cblxuICBpZiAodGhpcy5oYXNDbG9zZUJvdW5kYXJ5KSB7XG4gICAgdGhpcy5zb3VyY2UudW5zaGlmdCh0aGlzLmluZGVudCtcIiAgZG9tLmluc2VydEJvdW5kYXJ5KGZyYWdtZW50LCBudWxsKTtcXG5cIik7XG4gIH1cblxuICB2YXIgaSwgbDtcblxuICB2YXIgaW5kZW50ID0gdGhpcy5pbmRlbnQ7XG5cbiAgdmFyIG1vcnBocztcblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGNyZWF0ZU1vcnBoc1Byb2dyYW06ICcnLFxuICAgIGh5ZHJhdGVNb3JwaHNQcm9ncmFtOiAnJyxcbiAgICBmcmFnbWVudFByb2Nlc3NpbmdQcm9ncmFtOiAnJyxcbiAgICBzdGF0ZW1lbnRzOiB0aGlzLnN0YXRlbWVudHMsXG4gICAgbG9jYWxzOiB0aGlzLmxvY2FscyxcbiAgICBoYXNNb3JwaHM6IGZhbHNlXG4gIH07XG5cbiAgcmVzdWx0Lmh5ZHJhdGVNb3JwaHNQcm9ncmFtID0gdGhpcy5zb3VyY2Uuam9pbignJyk7XG5cbiAgaWYgKHRoaXMubW9ycGhzLmxlbmd0aCkge1xuICAgIHJlc3VsdC5oYXNNb3JwaHMgPSB0cnVlO1xuICAgIG1vcnBocyA9XG4gICAgICBpbmRlbnQrJyAgdmFyIG1vcnBocyA9IG5ldyBBcnJheSgnICsgdGhpcy5tb3JwaHMubGVuZ3RoICsgJyk7XFxuJztcblxuICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMubW9ycGhzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICB2YXIgbW9ycGggPSB0aGlzLm1vcnBoc1tpXTtcbiAgICAgICAgbW9ycGhzICs9IGluZGVudCsnICBtb3JwaHNbJytpKyddID0gJyttb3JwaCsnO1xcbic7XG4gICAgICB9XG4gIH1cblxuICBpZiAodGhpcy5mcmFnbWVudFByb2Nlc3NpbmcubGVuZ3RoKSB7XG4gICAgdmFyIHByb2Nlc3NpbmcgPSBcIlwiO1xuICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmZyYWdtZW50UHJvY2Vzc2luZy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIHByb2Nlc3NpbmcgKz0gdGhpcy5pbmRlbnQrJyAgJyt0aGlzLmZyYWdtZW50UHJvY2Vzc2luZ1tpXSsnXFxuJztcbiAgICB9XG4gICAgcmVzdWx0LmZyYWdtZW50UHJvY2Vzc2luZ1Byb2dyYW0gPSBwcm9jZXNzaW5nO1xuICB9XG5cbiAgdmFyIGNyZWF0ZU1vcnBoc1Byb2dyYW07XG4gIGlmIChyZXN1bHQuaGFzTW9ycGhzKSB7XG4gICAgY3JlYXRlTW9ycGhzUHJvZ3JhbSA9XG4gICAgICAnZnVuY3Rpb24gYnVpbGRSZW5kZXJOb2Rlcyhkb20sIGZyYWdtZW50LCBjb250ZXh0dWFsRWxlbWVudCkge1xcbicgK1xuICAgICAgcmVzdWx0LmZyYWdtZW50UHJvY2Vzc2luZ1Byb2dyYW0gKyBtb3JwaHM7XG5cbiAgICAgIGlmICh0aGlzLmhhc09wZW5Cb3VuZGFyeSkge1xuICAgICAgICBjcmVhdGVNb3JwaHNQcm9ncmFtICs9IGluZGVudCtcIiAgZG9tLmluc2VydEJvdW5kYXJ5KGZyYWdtZW50LCAwKTtcXG5cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaGFzQ2xvc2VCb3VuZGFyeSkge1xuICAgICAgICBjcmVhdGVNb3JwaHNQcm9ncmFtICs9IGluZGVudCtcIiAgZG9tLmluc2VydEJvdW5kYXJ5KGZyYWdtZW50LCBudWxsKTtcXG5cIjtcbiAgICAgIH1cblxuICAgICAgY3JlYXRlTW9ycGhzUHJvZ3JhbSArPVxuICAgICAgaW5kZW50ICsgJyAgcmV0dXJuIG1vcnBocztcXG4nICtcbiAgICAgIGluZGVudCsnfSc7XG4gIH0gZWxzZSB7XG4gICAgY3JlYXRlTW9ycGhzUHJvZ3JhbSA9XG4gICAgICAnZnVuY3Rpb24gYnVpbGRSZW5kZXJOb2RlcygpIHsgcmV0dXJuIFtdOyB9JztcbiAgfVxuXG4gIHJlc3VsdC5jcmVhdGVNb3JwaHNQcm9ncmFtID0gY3JlYXRlTW9ycGhzUHJvZ3JhbTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxucHJvdG90eXBlLnByZXBhcmVBcnJheSA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICB2YXIgdmFsdWVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhbHVlcy5wdXNoKHRoaXMuZXhwcmVzc2lvblN0YWNrLnBvcCgpKTtcbiAgfVxuXG4gIHRoaXMuZXhwcmVzc2lvblN0YWNrLnB1c2godmFsdWVzKTtcbn07XG5cbnByb3RvdHlwZS5wcmVwYXJlT2JqZWN0ID0gZnVuY3Rpb24oc2l6ZSkge1xuICB2YXIgcGFpcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgIHBhaXJzLnB1c2godGhpcy5leHByZXNzaW9uU3RhY2sucG9wKCksIHRoaXMuZXhwcmVzc2lvblN0YWNrLnBvcCgpKTtcbiAgfVxuXG4gIHRoaXMuZXhwcmVzc2lvblN0YWNrLnB1c2gocGFpcnMpO1xufTtcblxucHJvdG90eXBlLm9wZW5Cb3VuZGFyeSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmhhc09wZW5Cb3VuZGFyeSA9IHRydWU7XG59O1xuXG5wcm90b3R5cGUuY2xvc2VCb3VuZGFyeSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmhhc0Nsb3NlQm91bmRhcnkgPSB0cnVlO1xufTtcblxucHJvdG90eXBlLnB1c2hMaXRlcmFsID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgdGhpcy5leHByZXNzaW9uU3RhY2sucHVzaCh2YWx1ZSk7XG59O1xuXG5wcm90b3R5cGUucHVzaEdldEhvb2sgPSBmdW5jdGlvbihwYXRoLCBtZXRhKSB7XG4gIHRoaXMuZXhwcmVzc2lvblN0YWNrLnB1c2goWyAnZ2V0JywgcGF0aCwgbWV0YSBdKTtcbn07XG5cbnByb3RvdHlwZS5wdXNoU2V4cHJIb29rID0gZnVuY3Rpb24obWV0YSkge1xuICB0aGlzLmV4cHJlc3Npb25TdGFjay5wdXNoKFtcbiAgICAnc3ViZXhwcicsXG4gICAgdGhpcy5leHByZXNzaW9uU3RhY2sucG9wKCksXG4gICAgdGhpcy5leHByZXNzaW9uU3RhY2sucG9wKCksXG4gICAgdGhpcy5leHByZXNzaW9uU3RhY2sucG9wKCksXG4gICAgbWV0YVxuICBdKTtcbn07XG5cbnByb3RvdHlwZS5wdXNoQ29uY2F0SG9vayA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmV4cHJlc3Npb25TdGFjay5wdXNoKFsgJ2NvbmNhdCcsIHRoaXMuZXhwcmVzc2lvblN0YWNrLnBvcCgpIF0pO1xufTtcblxucHJvdG90eXBlLnByaW50U2V0SG9vayA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdGhpcy5sb2NhbHMucHVzaChuYW1lKTtcbn07XG5cbnByb3RvdHlwZS5wcmludEJsb2NrSG9vayA9IGZ1bmN0aW9uKHRlbXBsYXRlSWQsIGludmVyc2VJZCwgbWV0YSkge1xuICB0aGlzLnN0YXRlbWVudHMucHVzaChbXG4gICAgJ2Jsb2NrJyxcbiAgICB0aGlzLmV4cHJlc3Npb25TdGFjay5wb3AoKSwgLy8gcGF0aFxuICAgIHRoaXMuZXhwcmVzc2lvblN0YWNrLnBvcCgpLCAvLyBwYXJhbXNcbiAgICB0aGlzLmV4cHJlc3Npb25TdGFjay5wb3AoKSwgLy8gaGFzaFxuICAgIHRlbXBsYXRlSWQsXG4gICAgaW52ZXJzZUlkLFxuICAgIG1ldGFcbiAgXSk7XG59O1xuXG5wcm90b3R5cGUucHJpbnRJbmxpbmVIb29rID0gZnVuY3Rpb24obWV0YSkge1xuICB2YXIgcGF0aCA9IHRoaXMuZXhwcmVzc2lvblN0YWNrLnBvcCgpO1xuICB2YXIgcGFyYW1zID0gdGhpcy5leHByZXNzaW9uU3RhY2sucG9wKCk7XG4gIHZhciBoYXNoID0gdGhpcy5leHByZXNzaW9uU3RhY2sucG9wKCk7XG5cbiAgdGhpcy5zdGF0ZW1lbnRzLnB1c2goWyAnaW5saW5lJywgcGF0aCwgcGFyYW1zLCBoYXNoLCBtZXRhIF0pO1xufTtcblxucHJvdG90eXBlLnByaW50Q29udGVudEhvb2sgPSBmdW5jdGlvbihtZXRhKSB7XG4gIHRoaXMuc3RhdGVtZW50cy5wdXNoKFsgJ2NvbnRlbnQnLCB0aGlzLmV4cHJlc3Npb25TdGFjay5wb3AoKSwgbWV0YV0pO1xufTtcblxucHJvdG90eXBlLnByaW50Q29tcG9uZW50SG9vayA9IGZ1bmN0aW9uKHRlbXBsYXRlSWQpIHtcbiAgdGhpcy5zdGF0ZW1lbnRzLnB1c2goW1xuICAgICdjb21wb25lbnQnLFxuICAgIHRoaXMuZXhwcmVzc2lvblN0YWNrLnBvcCgpLCAvLyBwYXRoXG4gICAgdGhpcy5leHByZXNzaW9uU3RhY2sucG9wKCksIC8vIGF0dHJzXG4gICAgdGVtcGxhdGVJZFxuICBdKTtcbn07XG5cbnByb3RvdHlwZS5wcmludEF0dHJpYnV0ZUhvb2sgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdGF0ZW1lbnRzLnB1c2goW1xuICAgICdhdHRyaWJ1dGUnLFxuICAgIHRoaXMuZXhwcmVzc2lvblN0YWNrLnBvcCgpLCAvLyBuYW1lXG4gICAgdGhpcy5leHByZXNzaW9uU3RhY2sucG9wKCkgIC8vIHZhbHVlO1xuICBdKTtcbn07XG5cbnByb3RvdHlwZS5wcmludEVsZW1lbnRIb29rID0gZnVuY3Rpb24obWV0YSkge1xuICB0aGlzLnN0YXRlbWVudHMucHVzaChbXG4gICAgJ2VsZW1lbnQnLFxuICAgIHRoaXMuZXhwcmVzc2lvblN0YWNrLnBvcCgpLCAvLyBwYXRoXG4gICAgdGhpcy5leHByZXNzaW9uU3RhY2sucG9wKCksIC8vIHBhcmFtc1xuICAgIHRoaXMuZXhwcmVzc2lvblN0YWNrLnBvcCgpLCAvLyBoYXNoXG4gICAgbWV0YVxuICBdKTtcbn07XG5cbnByb3RvdHlwZS5jcmVhdGVNb3JwaCA9IGZ1bmN0aW9uKG1vcnBoTnVtLCBwYXJlbnRQYXRoLCBzdGFydEluZGV4LCBlbmRJbmRleCwgZXNjYXBlZCkge1xuICB2YXIgaXNSb290ID0gcGFyZW50UGF0aC5sZW5ndGggPT09IDA7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpO1xuXG4gIHZhciBtb3JwaE1ldGhvZCA9IGVzY2FwZWQgPyAnY3JlYXRlTW9ycGhBdCcgOiAnY3JlYXRlVW5zYWZlTW9ycGhBdCc7XG4gIHZhciBtb3JwaCA9IFwiZG9tLlwiK21vcnBoTWV0aG9kK1wiKFwiK3BhcmVudCtcbiAgICBcIixcIisoc3RhcnRJbmRleCA9PT0gbnVsbCA/IFwiLTFcIiA6IHN0YXJ0SW5kZXgpK1xuICAgIFwiLFwiKyhlbmRJbmRleCA9PT0gbnVsbCA/IFwiLTFcIiA6IGVuZEluZGV4KStcbiAgICAoaXNSb290ID8gXCIsY29udGV4dHVhbEVsZW1lbnQpXCIgOiBcIilcIik7XG5cbiAgdGhpcy5tb3JwaHNbbW9ycGhOdW1dID0gbW9ycGg7XG59O1xuXG5wcm90b3R5cGUuY3JlYXRlQXR0ck1vcnBoID0gZnVuY3Rpb24oYXR0ck1vcnBoTnVtLCBlbGVtZW50TnVtLCBuYW1lLCBlc2NhcGVkLCBuYW1lc3BhY2UpIHtcbiAgdmFyIG1vcnBoTWV0aG9kID0gZXNjYXBlZCA/ICdjcmVhdGVBdHRyTW9ycGgnIDogJ2NyZWF0ZVVuc2FmZUF0dHJNb3JwaCc7XG4gIHZhciBtb3JwaCA9IFwiZG9tLlwiK21vcnBoTWV0aG9kK1wiKGVsZW1lbnRcIitlbGVtZW50TnVtK1wiLCAnXCIrbmFtZSsobmFtZXNwYWNlID8gXCInLCAnXCIrbmFtZXNwYWNlIDogJycpK1wiJylcIjtcbiAgdGhpcy5tb3JwaHNbYXR0ck1vcnBoTnVtXSA9IG1vcnBoO1xufTtcblxucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnRNb3JwaCA9IGZ1bmN0aW9uKG1vcnBoTnVtLCBlbGVtZW50TnVtICkge1xuICB2YXIgbW9ycGhNZXRob2QgPSAnY3JlYXRlRWxlbWVudE1vcnBoJztcbiAgdmFyIG1vcnBoID0gXCJkb20uXCIrbW9ycGhNZXRob2QrXCIoZWxlbWVudFwiK2VsZW1lbnROdW0rXCIpXCI7XG4gIHRoaXMubW9ycGhzW21vcnBoTnVtXSA9IG1vcnBoO1xufTtcblxucHJvdG90eXBlLnJlcGFpckNsb25lZE5vZGUgPSBmdW5jdGlvbihibGFua0NoaWxkVGV4dE5vZGVzLCBpc0VsZW1lbnRDaGVja2VkKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpLFxuICAgICAgcHJvY2Vzc2luZyA9ICdpZiAodGhpcy5jYWNoZWRGcmFnbWVudCkgeyBkb20ucmVwYWlyQ2xvbmVkTm9kZSgnK3BhcmVudCsnLCcrXG4gICAgICAgICAgICAgICAgICAgYXJyYXkoYmxhbmtDaGlsZFRleHROb2RlcykrXG4gICAgICAgICAgICAgICAgICAgKCBpc0VsZW1lbnRDaGVja2VkID8gJyx0cnVlJyA6ICcnICkrXG4gICAgICAgICAgICAgICAgICAgJyk7IH0nO1xuICB0aGlzLmZyYWdtZW50UHJvY2Vzc2luZy5wdXNoKFxuICAgIHByb2Nlc3NpbmdcbiAgKTtcbn07XG5cbnByb3RvdHlwZS5zaGFyZUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50TnVtKXtcbiAgdmFyIGVsZW1lbnROb2Rlc05hbWUgPSBcImVsZW1lbnRcIiArIGVsZW1lbnROdW07XG4gIHRoaXMuZnJhZ21lbnRQcm9jZXNzaW5nLnB1c2goJ3ZhciAnK2VsZW1lbnROb2Rlc05hbWUrJyA9ICcrdGhpcy5nZXRQYXJlbnQoKSsnOycpO1xuICB0aGlzLnBhcmVudHNbdGhpcy5wYXJlbnRzLmxlbmd0aC0xXSA9IFtlbGVtZW50Tm9kZXNOYW1lXTtcbn07XG5cbnByb3RvdHlwZS5jb25zdW1lUGFyZW50ID0gZnVuY3Rpb24oaSkge1xuICB2YXIgbmV3UGFyZW50ID0gdGhpcy5sYXN0UGFyZW50KCkuc2xpY2UoKTtcbiAgbmV3UGFyZW50LnB1c2goaSk7XG5cbiAgdGhpcy5wYXJlbnRzLnB1c2gobmV3UGFyZW50KTtcbn07XG5cbnByb3RvdHlwZS5wb3BQYXJlbnQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYXJlbnRzLnBvcCgpO1xufTtcblxucHJvdG90eXBlLmdldFBhcmVudCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbGFzdCA9IHRoaXMubGFzdFBhcmVudCgpLnNsaWNlKCk7XG4gIHZhciBmcmFnID0gbGFzdC5zaGlmdCgpO1xuXG4gIGlmICghbGFzdC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZnJhZztcbiAgfVxuXG4gIHJldHVybiAnZG9tLmNoaWxkQXQoJyArIGZyYWcgKyAnLCBbJyArIGxhc3Quam9pbignLCAnKSArICddKSc7XG59O1xuXG5wcm90b3R5cGUubGFzdFBhcmVudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnRzW3RoaXMucGFyZW50cy5sZW5ndGgtMV07XG59O1xuIl19