exports.__esModule = true;
exports.equalInnerHTML = equalInnerHTML;
exports.equalHTML = equalHTML;
exports.equalTokens = equalTokens;
exports.normalizeInnerHTML = normalizeInnerHTML;
exports.isCheckedInputHTML = isCheckedInputHTML;
exports.getTextContent = getTextContent;

var _simpleHtmlTokenizer = require("../simple-html-tokenizer");

var _htmlbarsUtilArrayUtils = require("../htmlbars-util/array-utils");

function equalInnerHTML(fragment, html) {
  var actualHTML = normalizeInnerHTML(fragment.innerHTML);
  QUnit.push(actualHTML === html, actualHTML, html);
}

function equalHTML(node, html) {
  var fragment;
  if (!node.nodeType && node.length) {
    fragment = document.createDocumentFragment();
    while (node[0]) {
      fragment.appendChild(node[0]);
    }
  } else {
    fragment = node;
  }

  var div = document.createElement("div");
  div.appendChild(fragment.cloneNode(true));

  equalInnerHTML(div, html);
}

function generateTokens(fragmentOrHtml) {
  var div = document.createElement("div");
  if (typeof fragmentOrHtml === 'string') {
    div.innerHTML = fragmentOrHtml;
  } else {
    div.appendChild(fragmentOrHtml.cloneNode(true));
  }

  return { tokens: _simpleHtmlTokenizer.tokenize(div.innerHTML), html: div.innerHTML };
}

function equalTokens(fragment, html, message) {
  if (fragment.fragment) {
    fragment = fragment.fragment;
  }
  if (html.fragment) {
    html = html.fragment;
  }

  var fragTokens = generateTokens(fragment);
  var htmlTokens = generateTokens(html);

  function normalizeTokens(token) {
    if (token.type === 'StartTag') {
      token.attributes = token.attributes.sort(function (a, b) {
        if (a[0] > b[0]) {
          return 1;
        }
        if (a[0] < b[0]) {
          return -1;
        }
        return 0;
      });
    }
  }

  _htmlbarsUtilArrayUtils.forEach(fragTokens.tokens, normalizeTokens);
  _htmlbarsUtilArrayUtils.forEach(htmlTokens.tokens, normalizeTokens);

  var msg = "Expected: " + html + "; Actual: " + fragTokens.html;

  if (message) {
    msg += " (" + message + ")";
  }

  deepEqual(fragTokens.tokens, htmlTokens.tokens, msg);
}

// detect side-effects of cloning svg elements in IE9-11
var ieSVGInnerHTML = (function () {
  if (!document.createElementNS) {
    return false;
  }
  var div = document.createElement('div');
  var node = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  div.appendChild(node);
  var clone = div.cloneNode(true);
  return clone.innerHTML === '<svg xmlns="http://www.w3.org/2000/svg" />';
})();

function normalizeInnerHTML(actualHTML) {
  if (ieSVGInnerHTML) {
    // Replace `<svg xmlns="http://www.w3.org/2000/svg" height="50%" />` with `<svg height="50%"></svg>`, etc.
    // drop namespace attribute
    actualHTML = actualHTML.replace(/ xmlns="[^"]+"/, '');
    // replace self-closing elements
    actualHTML = actualHTML.replace(/<([^ >]+) [^\/>]*\/>/gi, function (tag, tagName) {
      return tag.slice(0, tag.length - 3) + '></' + tagName + '>';
    });
  }

  return actualHTML;
}

// detect weird IE8 checked element string
var checkedInput = document.createElement('input');
checkedInput.setAttribute('checked', 'checked');
var checkedInputString = checkedInput.outerHTML;

function isCheckedInputHTML(element) {
  equal(element.outerHTML, checkedInputString);
}

// check which property has the node's text content
var textProperty = document.createElement('div').textContent === undefined ? 'innerText' : 'textContent';

function getTextContent(el) {
  // textNode
  if (el.nodeType === 3) {
    return el.nodeValue;
  } else {
    return el[textProperty];
  }
}
//# sourceMappingURL=data:application/json;base64,