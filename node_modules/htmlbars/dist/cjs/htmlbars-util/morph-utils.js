exports.__esModule = true;
exports.visitChildren = visitChildren;
exports.validateChildMorphs = validateChildMorphs;
exports.linkParams = linkParams;
exports.dump = dump;
/*globals console*/

function visitChildren(nodes, callback) {
  if (!nodes || nodes.length === 0) {
    return;
  }

  nodes = nodes.slice();

  while (nodes.length) {
    var node = nodes.pop();
    callback(node);

    if (node.childNodes) {
      nodes.push.apply(nodes, node.childNodes);
    } else if (node.firstChildMorph) {
      var current = node.firstChildMorph;

      while (current) {
        nodes.push(current);
        current = current.nextMorph;
      }
    } else if (node.morphList) {
      var current = node.morphList.firstChildMorph;

      while (current) {
        nodes.push(current);
        current = current.nextMorph;
      }
    }
  }
}

function validateChildMorphs(env, morph, visitor) {
  var morphList = morph.morphList;
  if (morph.morphList) {
    var current = morphList.firstChildMorph;

    while (current) {
      var next = current.nextMorph;
      validateChildMorphs(env, current, visitor);
      current = next;
    }
  } else if (morph.lastResult) {
    morph.lastResult.revalidateWith(env, undefined, undefined, undefined, visitor);
  } else if (morph.childNodes) {
    // This means that the childNodes were wired up manually
    for (var i = 0, l = morph.childNodes.length; i < l; i++) {
      validateChildMorphs(env, morph.childNodes[i], visitor);
    }
  }
}

function linkParams(env, scope, morph, path, params, hash) {
  if (morph.linkedParams) {
    return;
  }

  if (env.hooks.linkRenderNode(morph, env, scope, path, params, hash)) {
    morph.linkedParams = { params: params, hash: hash };
  }
}

function dump(node) {
  console.group(node, node.isDirty);

  if (node.childNodes) {
    map(node.childNodes, dump);
  } else if (node.firstChildMorph) {
    var current = node.firstChildMorph;

    while (current) {
      dump(current);
      current = current.nextMorph;
    }
  } else if (node.morphList) {
    dump(node.morphList);
  }

  console.groupEnd();
}

function map(nodes, cb) {
  for (var i = 0, l = nodes.length; i < l; i++) {
    cb(nodes[i]);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvbW9ycGgtdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVPLFNBQVMsYUFBYSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7QUFDN0MsTUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUFFLFdBQU87R0FBRTs7QUFFN0MsT0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7QUFFdEIsU0FBTyxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQ25CLFFBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN2QixZQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRWYsUUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ25CLFdBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDMUMsTUFBTSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7QUFDL0IsVUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQzs7QUFFbkMsYUFBTyxPQUFPLEVBQUU7QUFDZCxhQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BCLGVBQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO09BQzdCO0tBQ0YsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDekIsVUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7O0FBRTdDLGFBQU8sT0FBTyxFQUFFO0FBQ2QsYUFBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNwQixlQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztPQUM3QjtLQUNGO0dBQ0Y7Q0FDRjs7QUFHTSxTQUFTLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFO0FBQ3ZELE1BQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDaEMsTUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO0FBQ25CLFFBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQyxlQUFlLENBQUM7O0FBRXhDLFdBQU8sT0FBTyxFQUFFO0FBQ2QsVUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUM3Qix5QkFBbUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLGFBQU8sR0FBRyxJQUFJLENBQUM7S0FDaEI7R0FDRixNQUFNLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtBQUMzQixTQUFLLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDaEYsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUU7O0FBRTNCLFNBQUssSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ2pELHlCQUFtQixDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3hEO0dBQ0Y7Q0FDRjs7QUFFTSxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtBQUNoRSxNQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUU7QUFDdEIsV0FBTztHQUNSOztBQUVELE1BQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRTtBQUNuRSxTQUFLLENBQUMsWUFBWSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7R0FDckQ7Q0FDRjs7QUFFTSxTQUFTLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDekIsU0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUVsQyxNQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFDbkIsT0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7R0FDNUIsTUFBTSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7QUFDL0IsUUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQzs7QUFFbkMsV0FBTyxPQUFPLEVBQUU7QUFDZCxVQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDZCxhQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztLQUM3QjtHQUNGLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ3pCLFFBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDdEI7O0FBRUQsU0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0NBQ3BCOztBQUVELFNBQVMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7QUFDdEIsT0FBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN0QyxNQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDZDtDQUNGIiwiZmlsZSI6Imh0bWxiYXJzLXV0aWwvbW9ycGgtdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbHMgY29uc29sZSovXG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNpdENoaWxkcmVuKG5vZGVzLCBjYWxsYmFjaykge1xuICBpZiAoIW5vZGVzIHx8IG5vZGVzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cblxuICBub2RlcyA9IG5vZGVzLnNsaWNlKCk7XG5cbiAgd2hpbGUgKG5vZGVzLmxlbmd0aCkge1xuICAgIHZhciBub2RlID0gbm9kZXMucG9wKCk7XG4gICAgY2FsbGJhY2sobm9kZSk7XG5cbiAgICBpZiAobm9kZS5jaGlsZE5vZGVzKSB7XG4gICAgICBub2Rlcy5wdXNoLmFwcGx5KG5vZGVzLCBub2RlLmNoaWxkTm9kZXMpO1xuICAgIH0gZWxzZSBpZiAobm9kZS5maXJzdENoaWxkTW9ycGgpIHtcbiAgICAgIGxldCBjdXJyZW50ID0gbm9kZS5maXJzdENoaWxkTW9ycGg7XG5cbiAgICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICAgIG5vZGVzLnB1c2goY3VycmVudCk7XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRNb3JwaDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGUubW9ycGhMaXN0KSB7XG4gICAgICBsZXQgY3VycmVudCA9IG5vZGUubW9ycGhMaXN0LmZpcnN0Q2hpbGRNb3JwaDtcblxuICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgbm9kZXMucHVzaChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dE1vcnBoO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNoaWxkTW9ycGhzKGVudiwgbW9ycGgsIHZpc2l0b3IpIHtcbiAgdmFyIG1vcnBoTGlzdCA9IG1vcnBoLm1vcnBoTGlzdDtcbiAgaWYgKG1vcnBoLm1vcnBoTGlzdCkge1xuICAgIHZhciBjdXJyZW50ID0gbW9ycGhMaXN0LmZpcnN0Q2hpbGRNb3JwaDtcblxuICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICB2YXIgbmV4dCA9IGN1cnJlbnQubmV4dE1vcnBoO1xuICAgICAgdmFsaWRhdGVDaGlsZE1vcnBocyhlbnYsIGN1cnJlbnQsIHZpc2l0b3IpO1xuICAgICAgY3VycmVudCA9IG5leHQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1vcnBoLmxhc3RSZXN1bHQpIHtcbiAgICBtb3JwaC5sYXN0UmVzdWx0LnJldmFsaWRhdGVXaXRoKGVudiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdmlzaXRvcik7XG4gIH0gZWxzZSBpZiAobW9ycGguY2hpbGROb2Rlcykge1xuICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB0aGUgY2hpbGROb2RlcyB3ZXJlIHdpcmVkIHVwIG1hbnVhbGx5XG4gICAgZm9yICh2YXIgaT0wLCBsPW1vcnBoLmNoaWxkTm9kZXMubGVuZ3RoOyBpPGw7IGkrKykge1xuICAgICAgdmFsaWRhdGVDaGlsZE1vcnBocyhlbnYsIG1vcnBoLmNoaWxkTm9kZXNbaV0sIHZpc2l0b3IpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua1BhcmFtcyhlbnYsIHNjb3BlLCBtb3JwaCwgcGF0aCwgcGFyYW1zLCBoYXNoKSB7XG4gIGlmIChtb3JwaC5saW5rZWRQYXJhbXMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZW52Lmhvb2tzLmxpbmtSZW5kZXJOb2RlKG1vcnBoLCBlbnYsIHNjb3BlLCBwYXRoLCBwYXJhbXMsIGhhc2gpKSB7XG4gICAgbW9ycGgubGlua2VkUGFyYW1zID0geyBwYXJhbXM6IHBhcmFtcywgaGFzaDogaGFzaCB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkdW1wKG5vZGUpIHtcbiAgY29uc29sZS5ncm91cChub2RlLCBub2RlLmlzRGlydHkpO1xuXG4gIGlmIChub2RlLmNoaWxkTm9kZXMpIHtcbiAgICBtYXAobm9kZS5jaGlsZE5vZGVzLCBkdW1wKTtcbiAgfSBlbHNlIGlmIChub2RlLmZpcnN0Q2hpbGRNb3JwaCkge1xuICAgIHZhciBjdXJyZW50ID0gbm9kZS5maXJzdENoaWxkTW9ycGg7XG5cbiAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgZHVtcChjdXJyZW50KTtcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRNb3JwaDtcbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZS5tb3JwaExpc3QpIHtcbiAgICBkdW1wKG5vZGUubW9ycGhMaXN0KTtcbiAgfVxuXG4gIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbn1cblxuZnVuY3Rpb24gbWFwKG5vZGVzLCBjYikge1xuICBmb3IgKHZhciBpPTAsIGw9bm9kZXMubGVuZ3RoOyBpPGw7IGkrKykge1xuICAgIGNiKG5vZGVzW2ldKTtcbiAgfVxufVxuIl19