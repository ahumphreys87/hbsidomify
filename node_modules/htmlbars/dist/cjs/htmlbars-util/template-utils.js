exports.__esModule = true;
exports.RenderState = RenderState;
exports.blockFor = blockFor;
exports.renderAndCleanup = renderAndCleanup;
exports.clearMorph = clearMorph;
exports.clearMorphList = clearMorphList;

var _htmlbarsUtilMorphUtils = require("../htmlbars-util/morph-utils");

var _htmlbarsRuntimeRender = require("../htmlbars-runtime/render");

function RenderState(renderNode, morphList) {
  // The morph list that is no longer needed and can be
  // destroyed.
  this.morphListToClear = morphList;

  // The morph list that needs to be pruned of any items
  // that were not yielded on a subsequent render.
  this.morphListToPrune = null;

  // A map of morphs for each item yielded in during this
  // rendering pass. Any morphs in the DOM but not in this map
  // will be pruned during cleanup.
  this.handledMorphs = {};
  this.collisions = undefined;

  // The morph to clear once rendering is complete. By
  // default, we set this to the previous morph (to catch
  // the case where nothing is yielded; in that case, we
  // should just clear the morph). Otherwise this gets set
  // to null if anything is rendered.
  this.morphToClear = renderNode;

  this.shadowOptions = null;
}

function Block(render, template, blockOptions) {
  this.render = render;
  this.template = template;
  this.blockOptions = blockOptions;
  this.arity = template.arity;
}

Block.prototype.invoke = function (env, blockArguments, _self, renderNode, parentScope, visitor) {
  if (renderNode.lastResult) {
    renderNode.lastResult.revalidateWith(env, undefined, _self, blockArguments, visitor);
  } else {
    this._firstRender(env, blockArguments, _self, renderNode, parentScope);
  }
};

Block.prototype._firstRender = function (env, blockArguments, _self, renderNode, parentScope) {
  var options = { renderState: new RenderState(renderNode) };
  var render = this.render;
  var template = this.template;
  var scope = this.blockOptions.scope;

  var shadowScope = scope ? env.hooks.createChildScope(scope) : env.hooks.createFreshScope();

  env.hooks.bindShadowScope(env, parentScope, shadowScope, this.blockOptions.options);

  if (_self !== undefined) {
    env.hooks.bindSelf(env, shadowScope, _self);
  } else if (this.blockOptions.self !== undefined) {
    env.hooks.bindSelf(env, shadowScope, this.blockOptions.self);
  }

  bindBlocks(env, shadowScope, this.blockOptions.yieldTo);

  renderAndCleanup(renderNode, env, options, null, function () {
    options.renderState.morphToClear = null;
    var renderOptions = new _htmlbarsRuntimeRender.RenderOptions(renderNode, undefined, blockArguments);
    render(template, env, shadowScope, renderOptions);
  });
};

function blockFor(render, template, blockOptions) {
  return new Block(render, template, blockOptions);
}

function bindBlocks(env, shadowScope, blocks) {
  if (!blocks) {
    return;
  }
  if (blocks instanceof Block) {
    env.hooks.bindBlock(env, shadowScope, blocks);
  } else {
    for (var name in blocks) {
      if (blocks.hasOwnProperty(name)) {
        env.hooks.bindBlock(env, shadowScope, blocks[name], name);
      }
    }
  }
}

function renderAndCleanup(morph, env, options, shadowOptions, callback) {
  // The RenderState object is used to collect information about what the
  // helper or hook being invoked has yielded. Once it has finished either
  // yielding multiple items (via yieldItem) or a single template (via
  // yieldTemplate), we detect what was rendered and how it differs from
  // the previous render, cleaning up old state in DOM as appropriate.
  var renderState = options.renderState;
  renderState.collisions = undefined;
  renderState.shadowOptions = shadowOptions;

  // Invoke the callback, instructing it to save information about what it
  // renders into RenderState.
  var result = callback(options);

  // The hook can opt-out of cleanup if it handled cleanup itself.
  if (result && result.handled) {
    return;
  }

  var morphMap = morph.morphMap;

  // Walk the morph list, clearing any items that were yielded in a previous
  // render but were not yielded during this render.
  var morphList = renderState.morphListToPrune;
  if (morphList) {
    var handledMorphs = renderState.handledMorphs;
    var item = morphList.firstChildMorph;

    while (item) {
      var next = item.nextMorph;

      // If we don't see the key in handledMorphs, it wasn't
      // yielded in and we can safely remove it from DOM.
      if (!(item.key in handledMorphs)) {
        morphMap[item.key] = undefined;
        clearMorph(item, env, true);
        item.destroy();
      }

      item = next;
    }
  }

  morphList = renderState.morphListToClear;
  if (morphList) {
    clearMorphList(morphList, morph, env);
  }

  var toClear = renderState.morphToClear;
  if (toClear) {
    clearMorph(toClear, env);
  }
}

function clearMorph(morph, env, destroySelf) {
  var cleanup = env.hooks.cleanupRenderNode;
  var destroy = env.hooks.destroyRenderNode;
  var willCleanup = env.hooks.willCleanupTree;
  var didCleanup = env.hooks.didCleanupTree;

  function destroyNode(node) {
    if (cleanup) {
      cleanup(node);
    }
    if (destroy) {
      destroy(node);
    }
  }

  if (willCleanup) {
    willCleanup(env, morph, destroySelf);
  }
  if (cleanup) {
    cleanup(morph);
  }
  if (destroySelf && destroy) {
    destroy(morph);
  }

  _htmlbarsUtilMorphUtils.visitChildren(morph.childNodes, destroyNode);

  // TODO: Deal with logical children that are not in the DOM tree
  morph.clear();
  if (didCleanup) {
    didCleanup(env, morph, destroySelf);
  }

  morph.lastResult = null;
  morph.lastYielded = null;
  morph.childNodes = null;
}

function clearMorphList(morphList, morph, env) {
  var item = morphList.firstChildMorph;

  while (item) {
    var next = item.nextMorph;
    morph.morphMap[item.key] = undefined;
    clearMorph(item, env, true);
    item.destroy();

    item = next;
  }

  // Remove the MorphList from the morph.
  morphList.clear();
  morph.morphList = null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvdGVtcGxhdGUtdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztzQ0FBOEIsOEJBQThCOztxQ0FDOUIsNEJBQTRCOztBQUVuRCxTQUFTLFdBQVcsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFOzs7QUFHakQsTUFBSSxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQzs7OztBQUlsQyxNQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDOzs7OztBQUs3QixNQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztBQUN4QixNQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQzs7Ozs7OztBQU81QixNQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQzs7QUFFL0IsTUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7Q0FDM0I7O0FBRUQsU0FBUyxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUU7QUFDN0MsTUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDckIsTUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDekIsTUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7QUFDakMsTUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO0NBQzdCOztBQUVELEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFVBQVMsR0FBRyxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUU7QUFDOUYsTUFBSSxVQUFVLENBQUMsVUFBVSxFQUFFO0FBQ3pCLGNBQVUsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztHQUN0RixNQUFNO0FBQ0wsUUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFB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RyxTQUFTLENBQUMsZUFBZSxDQUFDOztBQUVyQyxTQUFPLElBQUksRUFBRTtBQUNYLFFBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDMUIsU0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQ3JDLGNBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVCLFFBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7QUFFZixRQUFJLEdBQUcsSUFBSSxDQUFDO0dBQ2I7OztBQUdELFdBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNsQixPQUFLLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztDQUN4QiIsImZpbGUiOiJodG1sYmFycy11dGlsL3RlbXBsYXRlLXV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmlzaXRDaGlsZHJlbiB9IGZyb20gXCIuLi9odG1sYmFycy11dGlsL21vcnBoLXV0aWxzXCI7XG5pbXBvcnQgeyBSZW5kZXJPcHRpb25zIH0gZnJvbSBcIi4uL2h0bWxiYXJzLXJ1bnRpbWUvcmVuZGVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBSZW5kZXJTdGF0ZShyZW5kZXJOb2RlLCBtb3JwaExpc3QpIHtcbiAgLy8gVGhlIG1vcnBoIGxpc3QgdGhhdCBpcyBubyBsb25nZXIgbmVlZGVkIGFuZCBjYW4gYmVcbiAgLy8gZGVzdHJveWVkLlxuICB0aGlzLm1vcnBoTGlzdFRvQ2xlYXIgPSBtb3JwaExpc3Q7XG5cbiAgLy8gVGhlIG1vcnBoIGxpc3QgdGhhdCBuZWVkcyB0byBiZSBwcnVuZWQgb2YgYW55IGl0ZW1zXG4gIC8vIHRoYXQgd2VyZSBub3QgeWllbGRlZCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLlxuICB0aGlzLm1vcnBoTGlzdFRvUHJ1bmUgPSBudWxsO1xuXG4gIC8vIEEgbWFwIG9mIG1vcnBocyBmb3IgZWFjaCBpdGVtIHlpZWxkZWQgaW4gZHVyaW5nIHRoaXNcbiAgLy8gcmVuZGVyaW5nIHBhc3MuIEFueSBtb3JwaHMgaW4gdGhlIERPTSBidXQgbm90IGluIHRoaXMgbWFwXG4gIC8vIHdpbGwgYmUgcHJ1bmVkIGR1cmluZyBjbGVhbnVwLlxuICB0aGlzLmhhbmRsZWRNb3JwaHMgPSB7fTtcbiAgdGhpcy5jb2xsaXNpb25zID0gdW5kZWZpbmVkO1xuXG4gIC8vIFRoZSBtb3JwaCB0byBjbGVhciBvbmNlIHJlbmRlcmluZyBpcyBjb21wbGV0ZS4gQnlcbiAgLy8gZGVmYXVsdCwgd2Ugc2V0IHRoaXMgdG8gdGhlIHByZXZpb3VzIG1vcnBoICh0byBjYXRjaFxuICAvLyB0aGUgY2FzZSB3aGVyZSBub3RoaW5nIGlzIHlpZWxkZWQ7IGluIHRoYXQgY2FzZSwgd2VcbiAgLy8gc2hvdWxkIGp1c3QgY2xlYXIgdGhlIG1vcnBoKS4gT3RoZXJ3aXNlIHRoaXMgZ2V0cyBzZXRcbiAgLy8gdG8gbnVsbCBpZiBhbnl0aGluZyBpcyByZW5kZXJlZC5cbiAgdGhpcy5tb3JwaFRvQ2xlYXIgPSByZW5kZXJOb2RlO1xuXG4gIHRoaXMuc2hhZG93T3B0aW9ucyA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIEJsb2NrKHJlbmRlciwgdGVtcGxhdGUsIGJsb2NrT3B0aW9ucykge1xuICB0aGlzLnJlbmRlciA9IHJlbmRlcjtcbiAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICB0aGlzLmJsb2NrT3B0aW9ucyA9IGJsb2NrT3B0aW9ucztcbiAgdGhpcy5hcml0eSA9IHRlbXBsYXRlLmFyaXR5O1xufVxuXG5CbG9jay5wcm90b3R5cGUuaW52b2tlID0gZnVuY3Rpb24oZW52LCBibG9ja0FyZ3VtZW50cywgX3NlbGYsIHJlbmRlck5vZGUsIHBhcmVudFNjb3BlLCB2aXNpdG9yKSB7XG4gIGlmIChyZW5kZXJOb2RlLmxhc3RSZXN1bHQpIHtcbiAgICByZW5kZXJOb2RlLmxhc3RSZXN1bHQucmV2YWxpZGF0ZVdpdGgoZW52LCB1bmRlZmluZWQsIF9zZWxmLCBibG9ja0FyZ3VtZW50cywgdmlzaXRvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZmlyc3RSZW5kZXIoZW52LCBibG9ja0FyZ3VtZW50cywgX3NlbGYsIHJlbmRlck5vZGUsIHBhcmVudFNjb3BlKTtcbiAgfVxufTtcblxuQmxvY2sucHJvdG90eXBlLl9maXJzdFJlbmRlciA9IGZ1bmN0aW9uKGVudiwgYmxvY2tBcmd1bWVudHMsIF9zZWxmLCByZW5kZXJOb2RlLCBwYXJlbnRTY29wZSkge1xuICBsZXQgb3B0aW9ucyA9IHsgcmVuZGVyU3RhdGU6IG5ldyBSZW5kZXJTdGF0ZShyZW5kZXJOb2RlKSB9O1xuICBsZXQgeyByZW5kZXIsIHRlbXBsYXRlLCBibG9ja09wdGlvbnM6IHsgc2NvcGUgfSB9ID0gdGhpcztcbiAgbGV0IHNoYWRvd1Njb3BlID0gc2NvcGUgPyBlbnYuaG9va3MuY3JlYXRlQ2hpbGRTY29wZShzY29wZSkgOiBlbnYuaG9va3MuY3JlYXRlRnJlc2hTY29wZSgpO1xuXG4gIGVudi5ob29rcy5iaW5kU2hhZG93U2NvcGUoZW52LCBwYXJlbnRTY29wZSwgc2hhZG93U2NvcGUsIHRoaXMuYmxvY2tPcHRpb25zLm9wdGlvbnMpO1xuXG4gIGlmIChfc2VsZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW52Lmhvb2tzLmJpbmRTZWxmKGVudiwgc2hhZG93U2NvcGUsIF9zZWxmKTtcbiAgfSBlbHNlIGlmICh0aGlzLmJsb2NrT3B0aW9ucy5zZWxmICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbnYuaG9va3MuYmluZFNlbGYoZW52LCBzaGFkb3dTY29wZSwgdGhpcy5ibG9ja09wdGlvbnMuc2VsZik7XG4gIH1cblxuICBiaW5kQmxvY2tzKGVudiwgc2hhZG93U2NvcGUsIHRoaXMuYmxvY2tPcHRpb25zLnlpZWxkVG8pO1xuXG4gIHJlbmRlckFuZENsZWFudXAocmVuZGVyTm9kZSwgZW52LCBvcHRpb25zLCBudWxsLCBmdW5jdGlvbigpIHtcbiAgICBvcHRpb25zLnJlbmRlclN0YXRlLm1vcnBoVG9DbGVhciA9IG51bGw7XG4gICAgbGV0IHJlbmRlck9wdGlvbnMgPSBuZXcgUmVuZGVyT3B0aW9ucyhyZW5kZXJOb2RlLCB1bmRlZmluZWQsIGJsb2NrQXJndW1lbnRzKTtcbiAgICByZW5kZXIodGVtcGxhdGUsIGVudiwgc2hhZG93U2NvcGUsIHJlbmRlck9wdGlvbnMpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBibG9ja0ZvcihyZW5kZXIsIHRlbXBsYXRlLCBibG9ja09wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBCbG9jayhyZW5kZXIsIHRlbXBsYXRlLCBibG9ja09wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBiaW5kQmxvY2tzKGVudiwgc2hhZG93U2NvcGUsIGJsb2Nrcykge1xuICBpZiAoIWJsb2Nrcykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoYmxvY2tzIGluc3RhbmNlb2YgQmxvY2spIHtcbiAgICBlbnYuaG9va3MuYmluZEJsb2NrKGVudiwgc2hhZG93U2NvcGUsIGJsb2Nrcyk7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBibG9ja3MpIHtcbiAgICAgIGlmIChibG9ja3MuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZW52Lmhvb2tzLmJpbmRCbG9jayhlbnYsIHNoYWRvd1Njb3BlLCBibG9ja3NbbmFtZV0sIG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyQW5kQ2xlYW51cChtb3JwaCwgZW52LCBvcHRpb25zLCBzaGFkb3dPcHRpb25zLCBjYWxsYmFjaykge1xuICAvLyBUaGUgUmVuZGVyU3RhdGUgb2JqZWN0IGlzIHVzZWQgdG8gY29sbGVjdCBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IHRoZVxuICAvLyBoZWxwZXIgb3IgaG9vayBiZWluZyBpbnZva2VkIGhhcyB5aWVsZGVkLiBPbmNlIGl0IGhhcyBmaW5pc2hlZCBlaXRoZXJcbiAgLy8geWllbGRpbmcgbXVsdGlwbGUgaXRlbXMgKHZpYSB5aWVsZEl0ZW0pIG9yIGEgc2luZ2xlIHRlbXBsYXRlICh2aWFcbiAgLy8geWllbGRUZW1wbGF0ZSksIHdlIGRldGVjdCB3aGF0IHdhcyByZW5kZXJlZCBhbmQgaG93IGl0IGRpZmZlcnMgZnJvbVxuICAvLyB0aGUgcHJldmlvdXMgcmVuZGVyLCBjbGVhbmluZyB1cCBvbGQgc3RhdGUgaW4gRE9NIGFzIGFwcHJvcHJpYXRlLlxuICB2YXIgcmVuZGVyU3RhdGUgPSBvcHRpb25zLnJlbmRlclN0YXRlO1xuICByZW5kZXJTdGF0ZS5jb2xsaXNpb25zID0gdW5kZWZpbmVkO1xuICByZW5kZXJTdGF0ZS5zaGFkb3dPcHRpb25zID0gc2hhZG93T3B0aW9ucztcblxuICAvLyBJbnZva2UgdGhlIGNhbGxiYWNrLCBpbnN0cnVjdGluZyBpdCB0byBzYXZlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgaXRcbiAgLy8gcmVuZGVycyBpbnRvIFJlbmRlclN0YXRlLlxuICB2YXIgcmVzdWx0ID0gY2FsbGJhY2sob3B0aW9ucyk7XG5cbiAgLy8gVGhlIGhvb2sgY2FuIG9wdC1vdXQgb2YgY2xlYW51cCBpZiBpdCBoYW5kbGVkIGNsZWFudXAgaXRzZWxmLlxuICBpZiAocmVzdWx0ICYmIHJlc3VsdC5oYW5kbGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1vcnBoTWFwID0gbW9ycGgubW9ycGhNYXA7XG5cbiAgLy8gV2FsayB0aGUgbW9ycGggbGlzdCwgY2xlYXJpbmcgYW55IGl0ZW1zIHRoYXQgd2VyZSB5aWVsZGVkIGluIGEgcHJldmlvdXNcbiAgLy8gcmVuZGVyIGJ1dCB3ZXJlIG5vdCB5aWVsZGVkIGR1cmluZyB0aGlzIHJlbmRlci5cbiAgbGV0IG1vcnBoTGlzdCA9IHJlbmRlclN0YXRlLm1vcnBoTGlzdFRvUHJ1bmU7XG4gIGlmIChtb3JwaExpc3QpIHtcbiAgICBsZXQgaGFuZGxlZE1vcnBocyA9IHJlbmRlclN0YXRlLmhhbmRsZWRNb3JwaHM7XG4gICAgbGV0IGl0ZW0gPSBtb3JwaExpc3QuZmlyc3RDaGlsZE1vcnBoO1xuXG4gICAgd2hpbGUgKGl0ZW0pIHtcbiAgICAgIGxldCBuZXh0ID0gaXRlbS5uZXh0TW9ycGg7XG5cbiAgICAgIC8vIElmIHdlIGRvbid0IHNlZSB0aGUga2V5IGluIGhhbmRsZWRNb3JwaHMsIGl0IHdhc24ndFxuICAgICAgLy8geWllbGRlZCBpbiBhbmQgd2UgY2FuIHNhZmVseSByZW1vdmUgaXQgZnJvbSBET00uXG4gICAgICBpZiAoIShpdGVtLmtleSBpbiBoYW5kbGVkTW9ycGhzKSkge1xuICAgICAgICBtb3JwaE1hcFtpdGVtLmtleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIGNsZWFyTW9ycGgoaXRlbSwgZW52LCB0cnVlKTtcbiAgICAgICAgaXRlbS5kZXN0cm95KCk7XG4gICAgICB9XG5cbiAgICAgIGl0ZW0gPSBuZXh0O1xuICAgIH1cbiAgfVxuXG4gIG1vcnBoTGlzdCA9IHJlbmRlclN0YXRlLm1vcnBoTGlzdFRvQ2xlYXI7XG4gIGlmIChtb3JwaExpc3QpIHtcbiAgICBjbGVhck1vcnBoTGlzdChtb3JwaExpc3QsIG1vcnBoLCBlbnYpO1xuICB9XG5cbiAgbGV0IHRvQ2xlYXIgPSByZW5kZXJTdGF0ZS5tb3JwaFRvQ2xlYXI7XG4gIGlmICh0b0NsZWFyKSB7XG4gICAgY2xlYXJNb3JwaCh0b0NsZWFyLCBlbnYpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhck1vcnBoKG1vcnBoLCBlbnYsIGRlc3Ryb3lTZWxmKSB7XG4gIHZhciBjbGVhbnVwID0gZW52Lmhvb2tzLmNsZWFudXBSZW5kZXJOb2RlO1xuICB2YXIgZGVzdHJveSA9IGVudi5ob29rcy5kZXN0cm95UmVuZGVyTm9kZTtcbiAgdmFyIHdpbGxDbGVhbnVwID0gZW52Lmhvb2tzLndpbGxDbGVhbnVwVHJlZTtcbiAgdmFyIGRpZENsZWFudXAgPSBlbnYuaG9va3MuZGlkQ2xlYW51cFRyZWU7XG5cbiAgZnVuY3Rpb24gZGVzdHJveU5vZGUobm9kZSkge1xuICAgIGlmIChjbGVhbnVwKSB7IGNsZWFudXAobm9kZSk7IH1cbiAgICBpZiAoZGVzdHJveSkgeyBkZXN0cm95KG5vZGUpOyB9XG4gIH1cblxuICBpZiAod2lsbENsZWFudXApIHsgd2lsbENsZWFudXAoZW52LCBtb3JwaCwgZGVzdHJveVNlbGYpOyB9XG4gIGlmIChjbGVhbnVwKSB7IGNsZWFudXAobW9ycGgpOyB9XG4gIGlmIChkZXN0cm95U2VsZiAmJiBkZXN0cm95KSB7IGRlc3Ryb3kobW9ycGgpOyB9XG5cbiAgdmlzaXRDaGlsZHJlbihtb3JwaC5jaGlsZE5vZGVzLCBkZXN0cm95Tm9kZSk7XG5cbiAgLy8gVE9ETzogRGVhbCB3aXRoIGxvZ2ljYWwgY2hpbGRyZW4gdGhhdCBhcmUgbm90IGluIHRoZSBET00gdHJlZVxuICBtb3JwaC5jbGVhcigpO1xuICBpZiAoZGlkQ2xlYW51cCkgeyBkaWRDbGVhbnVwKGVudiwgbW9ycGgsIGRlc3Ryb3lTZWxmKTsgfVxuXG4gIG1vcnBoLmxhc3RSZXN1bHQgPSBudWxsO1xuICBtb3JwaC5sYXN0WWllbGRlZCA9IG51bGw7XG4gIG1vcnBoLmNoaWxkTm9kZXMgPSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJNb3JwaExpc3QobW9ycGhMaXN0LCBtb3JwaCwgZW52KSB7XG4gIGxldCBpdGVtID0gbW9ycGhMaXN0LmZpcnN0Q2hpbGRNb3JwaDtcblxuICB3aGlsZSAoaXRlbSkge1xuICAgIGxldCBuZXh0ID0gaXRlbS5uZXh0TW9ycGg7XG4gICAgbW9ycGgubW9ycGhNYXBbaXRlbS5rZXldID0gdW5kZWZpbmVkO1xuICAgIGNsZWFyTW9ycGgoaXRlbSwgZW52LCB0cnVlKTtcbiAgICBpdGVtLmRlc3Ryb3koKTtcblxuICAgIGl0ZW0gPSBuZXh0O1xuICB9XG5cbiAgLy8gUmVtb3ZlIHRoZSBNb3JwaExpc3QgZnJvbSB0aGUgbW9ycGguXG4gIG1vcnBoTGlzdC5jbGVhcigpO1xuICBtb3JwaC5tb3JwaExpc3QgPSBudWxsO1xufVxuIl19