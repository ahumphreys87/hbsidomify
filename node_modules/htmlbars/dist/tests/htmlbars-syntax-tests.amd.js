define('htmlbars-syntax-tests/generation/print-test', ['exports', '../../htmlbars-syntax'], function (exports, _htmlbarsSyntax) {

  var b = _htmlbarsSyntax.builders;

  function printEqual(template) {
    var ast = _htmlbarsSyntax.parse(template);
    equal(_htmlbarsSyntax.print(ast), template);
  }

  QUnit.module('[htmlbars-syntax] Code generation');

  test('ElementNode: tag', function () {
    printEqual('<h1></h1>');
  });

  test('ElementNode: nested tags with indent', function () {
    printEqual('<div>\n  <p>Test</p>\n</div>');
  });

  test('ElementNode: attributes', function () {
    printEqual('<h1 class="foo" id="title"></h1>');
  });

  test('TextNode: chars', function () {
    printEqual('<h1>Test</h1>');
  });

  test('MustacheStatement: slash in path', function () {
    printEqual('{{namespace/foo "bar" baz="qux"}}');
  });

  test('MustacheStatement: path', function () {
    printEqual('<h1>{{model.title}}</h1>');
  });

  test('MustacheStatement: StringLiteral param', function () {
    printEqual('<h1>{{link-to "Foo"}}</h1>');
  });

  test('MustacheStatement: hash', function () {
    printEqual('<h1>{{link-to "Foo" class="bar"}}</h1>');
  });

  test('MustacheStatement: as element attribute', function () {
    printEqual('<h1 class={{if foo "foo" "bar"}}>Test</h1>');
  });

  test('MustacheStatement: as element attribute with path', function () {
    printEqual('<h1 class={{color}}>Test</h1>');
  });

  test('ConcatStatement: in element attribute string', function () {
    printEqual('<h1 class="{{if active "active" "inactive"}} foo">Test</h1>');
  });

  test('ElementModifierStatement', function () {
    printEqual('<p {{action "activate"}} {{someting foo="bar"}}>Test</p>');
  });

  test('PartialStatement', function () {
    printEqual('<p>{{>something "param"}}</p>');
  });

  test('SubExpression', function () {
    printEqual('<p>{{my-component submit=(action (mut model.name) (full-name model.firstName "Smith"))}}</p>');
  });

  test('BlockStatement: multiline', function () {
    printEqual('<ul>{{#each foos as |foo|}}\n  {{foo}}\n{{/each}}</ul>');
  });

  test('BlockStatement: inline', function () {
    printEqual('{{#if foo}}<p>{{foo}}</p>{{/if}}');
  });

  test('UndefinedLiteral', function () {
    var ast = b.program([b.mustache(b.undefined())]);
    equal(_htmlbarsSyntax.print(ast), '{{undefined}}');
  });

  test('NumberLiteral', function () {
    var ast = b.program([b.mustache('foo', null, b.hash([b.pair('bar', b.number(5))]))]);
    equal(_htmlbarsSyntax.print(ast), '{{foo bar=5}}');
  });

  test('BooleanLiteral', function () {
    var ast = b.program([b.mustache('foo', null, b.hash([b.pair('bar', b.boolean(true))]))]);
    equal(_htmlbarsSyntax.print(ast), '{{foo bar=true}}');
  });

  test('HTML comment', function () {
    printEqual('<!-- foo -->');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9nZW5lcmF0aW9uL3ByaW50LXRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxNQUFNLENBQUMsbUJBRmdCLFFBQVEsQUFFYixDQUFDOztBQUVuQixXQUFTLFVBQVUsQ0FBQyxRQUFRLEVBQUU7QUFDNUIsUUFBTSxHQUFHLEdBQUcsZ0JBTEwsS0FBSyxDQUtNLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLFNBQUssQ0FBQyxnQkFOUSxLQUFLLENBTVAsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7R0FDN0I7O0FBRUQsT0FBSyxDQUFDLE1BQU0sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDOztBQUVsRCxNQUFJLENBQUMsa0JBQWtCLEVBQUUsWUFBVztBQUNsQyxjQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7R0FDekIsQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxzQ0FBc0MsRUFBRSxZQUFXO0FBQ3RELGNBQVUsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0dBQzVDLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMseUJBQXlCLEVBQUUsWUFBVztBQUN6QyxjQUFVLENBQUMsa0NBQWtDLENBQUMsQ0FBQztHQUNoRCxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLGlCQUFpQixFQUFFLFlBQVc7QUFDakMsY0FBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0dBQzdCLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsa0NBQWtDLEVBQUUsWUFBVztBQUNsRCxjQUFVLENBQUMsbUNBQW1DLENBQUMsQ0FBQztHQUNqRCxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLHlCQUF5QixFQUFFLFlBQVc7QUFDekMsY0FBVSxDQUFDLDBCQUEwQixDQUFDLENBQUM7R0FDeEMsQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyx3Q0FBd0MsRUFBRSxZQUFXO0FBQ3hELGNBQVUsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0dBQzFDLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMseUJBQXlCLEVBQUUsWUFBVztBQUN6QyxjQUFVLENBQUMsd0NBQXdDLENBQUMsQ0FBQztHQUN0RCxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLHlDQUF5QyxFQUFFLFlBQVc7QUFDekQsY0FBVSxDQUFDLDRDQUE0QyxDQUFDLENBQUM7R0FDMUQsQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxtREFBbUQsRUFBRSxZQUFXO0FBQ25FLGNBQVUsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0dBQzdDLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsOENBQThDLEVBQUUsWUFBVztBQUM5RCxjQUFVLENBQUMsNkRBQTZELENBQUMsQ0FBQztHQUMzRSxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQVc7QUFDMUMsY0FBVSxDQUFDLDBEQUEwRCxDQUFDLENBQUM7R0FDeEUsQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxrQkFBa0IsRUFBRSxZQUFXO0FBQ2xDLGNBQVUsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0dBQzdDLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsZUFBZSxFQUFFLFlBQVc7QUFDL0IsY0FBVSxDQUFDLDhGQUE4RixDQUFDLENBQUM7R0FDNUcsQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQywyQkFBMkIsRUFBRSxZQUFXO0FBQzNDLGNBQVUsQ0FBQyx3REFBd0QsQ0FBQyxDQUFDO0dBQ3RFLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsd0JBQXdCLEVBQUUsWUFBVztBQUN4QyxjQUFVLENBQUMsa0NBQWtDLENBQUMsQ0FBQztHQUNoRCxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLGtCQUFrQixFQUFFLFlBQVc7QUFDbEMsUUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25ELFNBQUssQ0FBQyxnQkE3RVEsS0FBSyxDQTZFUCxHQUFHLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztHQUNwQyxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLGVBQWUsRUFBRSxZQUFXO0FBQy9CLFFBQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FDcEIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUNwQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDckMsQ0FDRixDQUFDLENBQUM7QUFDSCxTQUFLLENBQUMsZ0JBdEZRLEtBQUssQ0FzRlAsR0FBRyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7R0FDcEMsQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxnQkFBZ0IsRUFBRSxZQUFXO0FBQ2hDLFFBQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FDcEIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUNwQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDekMsQ0FDRixDQUFDLENBQUM7QUFDSCxTQUFLLENBQUMsZ0JBL0ZRLEtBQUssQ0ErRlAsR0FBRyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztHQUN2QyxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLGNBQWMsRUFBRSxZQUFXO0FBQzlCLGNBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztHQUM1QixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL2dlbmVyYXRpb24vcHJpbnQtdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlLCBwcmludCwgYnVpbGRlcnMgfSBmcm9tICcuLi8uLi9odG1sYmFycy1zeW50YXgnO1xuXG5jb25zdCBiID0gYnVpbGRlcnM7XG5cbmZ1bmN0aW9uIHByaW50RXF1YWwodGVtcGxhdGUpIHtcbiAgY29uc3QgYXN0ID0gcGFyc2UodGVtcGxhdGUpO1xuICBlcXVhbChwcmludChhc3QpLCB0ZW1wbGF0ZSk7XG59XG5cblFVbml0Lm1vZHVsZSgnW2h0bWxiYXJzLXN5bnRheF0gQ29kZSBnZW5lcmF0aW9uJyk7XG5cbnRlc3QoJ0VsZW1lbnROb2RlOiB0YWcnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPGgxPjwvaDE+Jyk7XG59KTtcblxudGVzdCgnRWxlbWVudE5vZGU6IG5lc3RlZCB0YWdzIHdpdGggaW5kZW50JywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzxkaXY+XFxuICA8cD5UZXN0PC9wPlxcbjwvZGl2PicpO1xufSk7XG5cbnRlc3QoJ0VsZW1lbnROb2RlOiBhdHRyaWJ1dGVzJywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzxoMSBjbGFzcz1cImZvb1wiIGlkPVwidGl0bGVcIj48L2gxPicpO1xufSk7XG5cbnRlc3QoJ1RleHROb2RlOiBjaGFycycsIGZ1bmN0aW9uKCkge1xuICBwcmludEVxdWFsKCc8aDE+VGVzdDwvaDE+Jyk7XG59KTtcblxudGVzdCgnTXVzdGFjaGVTdGF0ZW1lbnQ6IHNsYXNoIGluIHBhdGgnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgne3tuYW1lc3BhY2UvZm9vIFwiYmFyXCIgYmF6PVwicXV4XCJ9fScpO1xufSk7XG5cbnRlc3QoJ011c3RhY2hlU3RhdGVtZW50OiBwYXRoJywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzxoMT57e21vZGVsLnRpdGxlfX08L2gxPicpO1xufSk7XG5cbnRlc3QoJ011c3RhY2hlU3RhdGVtZW50OiBTdHJpbmdMaXRlcmFsIHBhcmFtJywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzxoMT57e2xpbmstdG8gXCJGb29cIn19PC9oMT4nKTtcbn0pO1xuXG50ZXN0KCdNdXN0YWNoZVN0YXRlbWVudDogaGFzaCcsIGZ1bmN0aW9uKCkge1xuICBwcmludEVxdWFsKCc8aDE+e3tsaW5rLXRvIFwiRm9vXCIgY2xhc3M9XCJiYXJcIn19PC9oMT4nKTtcbn0pO1xuXG50ZXN0KCdNdXN0YWNoZVN0YXRlbWVudDogYXMgZWxlbWVudCBhdHRyaWJ1dGUnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPGgxIGNsYXNzPXt7aWYgZm9vIFwiZm9vXCIgXCJiYXJcIn19PlRlc3Q8L2gxPicpO1xufSk7XG5cbnRlc3QoJ011c3RhY2hlU3RhdGVtZW50OiBhcyBlbGVtZW50IGF0dHJpYnV0ZSB3aXRoIHBhdGgnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPGgxIGNsYXNzPXt7Y29sb3J9fT5UZXN0PC9oMT4nKTtcbn0pO1xuXG50ZXN0KCdDb25jYXRTdGF0ZW1lbnQ6IGluIGVsZW1lbnQgYXR0cmlidXRlIHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICBwcmludEVxdWFsKCc8aDEgY2xhc3M9XCJ7e2lmIGFjdGl2ZSBcImFjdGl2ZVwiIFwiaW5hY3RpdmVcIn19IGZvb1wiPlRlc3Q8L2gxPicpO1xufSk7XG5cbnRlc3QoJ0VsZW1lbnRNb2RpZmllclN0YXRlbWVudCcsIGZ1bmN0aW9uKCkge1xuICBwcmludEVxdWFsKCc8cCB7e2FjdGlvbiBcImFjdGl2YXRlXCJ9fSB7e3NvbWV0aW5nIGZvbz1cImJhclwifX0+VGVzdDwvcD4nKTtcbn0pO1xuXG50ZXN0KCdQYXJ0aWFsU3RhdGVtZW50JywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzxwPnt7PnNvbWV0aGluZyBcInBhcmFtXCJ9fTwvcD4nKTtcbn0pO1xuXG50ZXN0KCdTdWJFeHByZXNzaW9uJywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzxwPnt7bXktY29tcG9uZW50IHN1Ym1pdD0oYWN0aW9uIChtdXQgbW9kZWwubmFtZSkgKGZ1bGwtbmFtZSBtb2RlbC5maXJzdE5hbWUgXCJTbWl0aFwiKSl9fTwvcD4nKTtcbn0pO1xuXG50ZXN0KCdCbG9ja1N0YXRlbWVudDogbXVsdGlsaW5lJywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzx1bD57eyNlYWNoIGZvb3MgYXMgfGZvb3x9fVxcbiAge3tmb299fVxcbnt7L2VhY2h9fTwvdWw+Jyk7XG59KTtcblxudGVzdCgnQmxvY2tTdGF0ZW1lbnQ6IGlubGluZScsIGZ1bmN0aW9uKCkge1xuICBwcmludEVxdWFsKCd7eyNpZiBmb299fTxwPnt7Zm9vfX08L3A+e3svaWZ9fScpO1xufSk7XG5cbnRlc3QoJ1VuZGVmaW5lZExpdGVyYWwnLCBmdW5jdGlvbigpIHtcbiAgY29uc3QgYXN0ID0gYi5wcm9ncmFtKFtiLm11c3RhY2hlKGIudW5kZWZpbmVkKCkpXSk7XG4gIGVxdWFsKHByaW50KGFzdCksICd7e3VuZGVmaW5lZH19Jyk7XG59KTtcblxudGVzdCgnTnVtYmVyTGl0ZXJhbCcsIGZ1bmN0aW9uKCkge1xuICBjb25zdCBhc3QgPSBiLnByb2dyYW0oW1xuICAgIGIubXVzdGFjaGUoJ2ZvbycsIG51bGwsXG4gICAgICBiLmhhc2goW2IucGFpcignYmFyJywgYi5udW1iZXIoNSkpXSlcbiAgICApXG4gIF0pO1xuICBlcXVhbChwcmludChhc3QpLCAne3tmb28gYmFyPTV9fScpO1xufSk7XG5cbnRlc3QoJ0Jvb2xlYW5MaXRlcmFsJywgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGFzdCA9IGIucHJvZ3JhbShbXG4gICAgYi5tdXN0YWNoZSgnZm9vJywgbnVsbCxcbiAgICAgIGIuaGFzaChbYi5wYWlyKCdiYXInLCBiLmJvb2xlYW4odHJ1ZSkpXSlcbiAgICApXG4gIF0pO1xuICBlcXVhbChwcmludChhc3QpLCAne3tmb28gYmFyPXRydWV9fScpO1xufSk7XG5cbnRlc3QoJ0hUTUwgY29tbWVudCcsIGZ1bmN0aW9uKCkge1xuICBwcmludEVxdWFsKCc8IS0tIGZvbyAtLT4nKTtcbn0pO1xuIl19
define('htmlbars-syntax-tests/generation/print-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/generation');
  QUnit.test('htmlbars-syntax-tests/generation/print-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/generation/print-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9nZW5lcmF0aW9uL3ByaW50LXRlc3QuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDMUQsT0FBSyxDQUFDLElBQUksQ0FBQyxtRUFBbUUsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUMvRixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxvRUFBb0UsQ0FBQyxDQUFDO0dBQ3ZGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvZ2VuZXJhdGlvbi9wcmludC10ZXN0LmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtc3ludGF4LXRlc3RzL2dlbmVyYXRpb24nKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9nZW5lcmF0aW9uL3ByaW50LXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9nZW5lcmF0aW9uL3ByaW50LXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/htmlbars-syntax.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests');
  QUnit.test('htmlbars-syntax-tests/htmlbars-syntax.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/htmlbars-syntax.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXguanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDL0MsT0FBSyxDQUFDLElBQUksQ0FBQyw2REFBNkQsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUN6RixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSw4REFBOEQsQ0FBQyxDQUFDO0dBQ2pGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4LmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtc3ludGF4LXRlc3RzJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4LmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKGFzc2VydCkgeyBcbiAgYXNzZXJ0Lm9rKHRydWUsICdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4LmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-syntax-tests/htmlbars-syntax/builders.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/htmlbars-syntax');
  QUnit.test('htmlbars-syntax-tests/htmlbars-syntax/builders.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/builders.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvYnVpbGRlcnMuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLGdEQUFnRCxDQUFDLENBQUM7QUFDL0QsT0FBSyxDQUFDLElBQUksQ0FBQyxzRUFBc0UsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUNsRyxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSx1RUFBdUUsQ0FBQyxDQUFDO0dBQzFGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L2J1aWxkZXJzLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheCcpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC9idWlsZGVycy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC9idWlsZGVycy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/htmlbars-syntax/generation/print.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/generation');
  QUnit.test('htmlbars-syntax-tests/htmlbars-syntax/generation/print.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/generation/print.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvZ2VuZXJhdGlvbi9wcmludC5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsMkRBQTJELENBQUMsQ0FBQztBQUMxRSxPQUFLLENBQUMsSUFBSSxDQUFDLDhFQUE4RSxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQzFHLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLCtFQUErRSxDQUFDLENBQUM7R0FDbEcsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvZ2VuZXJhdGlvbi9wcmludC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvZ2VuZXJhdGlvbicpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC9nZW5lcmF0aW9uL3ByaW50LmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKGFzc2VydCkgeyBcbiAgYXNzZXJ0Lm9rKHRydWUsICdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L2dlbmVyYXRpb24vcHJpbnQuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/htmlbars-syntax/parser.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/htmlbars-syntax');
  QUnit.test('htmlbars-syntax-tests/htmlbars-syntax/parser.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/parser.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0FBQy9ELE9BQUssQ0FBQyxJQUFJLENBQUMsb0VBQW9FLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDaEcsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUscUVBQXFFLENBQUMsQ0FBQztHQUN4RixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC9wYXJzZXIuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4Jyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3BhcnNlci5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC9wYXJzZXIuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/htmlbars-syntax/parser/handlebars-node-visitors.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/parser');
  QUnit.test('htmlbars-syntax-tests/htmlbars-syntax/parser/handlebars-node-visitors.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/parser/handlebars-node-visitors.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyL2hhbmRsZWJhcnMtbm9kZS12aXNpdG9ycy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsdURBQXVELENBQUMsQ0FBQztBQUN0RSxPQUFLLENBQUMsSUFBSSxDQUFDLDZGQUE2RixFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ3pILFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLDhGQUE4RixDQUFDLENBQUM7R0FDakgsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyL2hhbmRsZWJhcnMtbm9kZS12aXNpdG9ycy5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3BhcnNlci9oYW5kbGViYXJzLW5vZGUtdmlzaXRvcnMuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyL2hhbmRsZWJhcnMtbm9kZS12aXNpdG9ycy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/htmlbars-syntax/parser/tokenizer-event-handlers.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/parser');
  QUnit.test('htmlbars-syntax-tests/htmlbars-syntax/parser/tokenizer-event-handlers.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/parser/tokenizer-event-handlers.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyL3Rva2VuaXplci1ldmVudC1oYW5kbGVycy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsdURBQXVELENBQUMsQ0FBQztBQUN0RSxPQUFLLENBQUMsSUFBSSxDQUFDLDZGQUE2RixFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ3pILFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLDhGQUE4RixDQUFDLENBQUM7R0FDakgsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyL3Rva2VuaXplci1ldmVudC1oYW5kbGVycy5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3BhcnNlci90b2tlbml6ZXItZXZlbnQtaGFuZGxlcnMuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyL3Rva2VuaXplci1ldmVudC1oYW5kbGVycy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/htmlbars-syntax/traversal/errors.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/traversal');
  QUnit.test('htmlbars-syntax-tests/htmlbars-syntax/traversal/errors.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/traversal/errors.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL2Vycm9ycy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsMERBQTBELENBQUMsQ0FBQztBQUN6RSxPQUFLLENBQUMsSUFBSSxDQUFDLDhFQUE4RSxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQzFHLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLCtFQUErRSxDQUFDLENBQUM7R0FDbEcsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL2Vycm9ycy5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3RyYXZlcnNhbC9lcnJvcnMuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL2Vycm9ycy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/htmlbars-syntax/traversal/traverse.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/traversal');
  QUnit.test('htmlbars-syntax-tests/htmlbars-syntax/traversal/traverse.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/traversal/traverse.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL3RyYXZlcnNlLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQywwREFBMEQsQ0FBQyxDQUFDO0FBQ3pFLE9BQUssQ0FBQyxJQUFJLENBQUMsZ0ZBQWdGLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDNUcsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsaUZBQWlGLENBQUMsQ0FBQztHQUNwRyxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC90cmF2ZXJzYWwvdHJhdmVyc2UuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3RyYXZlcnNhbCcpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC90cmF2ZXJzYWwvdHJhdmVyc2UuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL3RyYXZlcnNlLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-syntax-tests/htmlbars-syntax/traversal/walker.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/traversal');
  QUnit.test('htmlbars-syntax-tests/htmlbars-syntax/traversal/walker.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/traversal/walker.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL3dhbGtlci5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsMERBQTBELENBQUMsQ0FBQztBQUN6RSxPQUFLLENBQUMsSUFBSSxDQUFDLDhFQUE4RSxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQzFHLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLCtFQUErRSxDQUFDLENBQUM7R0FDbEcsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL3dhbGtlci5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3RyYXZlcnNhbC93YWxrZXIuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL3dhbGtlci5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/htmlbars-syntax/types/visitor-keys.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/types');
  QUnit.test('htmlbars-syntax-tests/htmlbars-syntax/types/visitor-keys.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/types/visitor-keys.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHlwZXMvdmlzaXRvci1rZXlzLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO0FBQ3JFLE9BQUssQ0FBQyxJQUFJLENBQUMsZ0ZBQWdGLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDNUcsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsaUZBQWlGLENBQUMsQ0FBQztHQUNwRyxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC90eXBlcy92aXNpdG9yLWtleXMuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3R5cGVzJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3R5cGVzL3Zpc2l0b3Ita2V5cy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC90eXBlcy92aXNpdG9yLWtleXMuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/htmlbars-syntax/utils.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/htmlbars-syntax');
  QUnit.test('htmlbars-syntax-tests/htmlbars-syntax/utils.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/utils.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdXRpbHMuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLGdEQUFnRCxDQUFDLENBQUM7QUFDL0QsT0FBSyxDQUFDLElBQUksQ0FBQyxtRUFBbUUsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUMvRixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxvRUFBb0UsQ0FBQyxDQUFDO0dBQ3ZGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3V0aWxzLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheCcpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC91dGlscy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC91dGlscy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define("htmlbars-syntax-tests/loc-node-test", ["exports", "../htmlbars-syntax"], function (exports, _htmlbarsSyntax) {

  QUnit.module("[htmlbars-syntax] Parser - Location Info");

  function locEqual(node, startLine, startColumn, endLine, endColumn, message) {

    var expected = {
      source: null,
      start: { line: startLine, column: startColumn },
      end: { line: endLine, column: endColumn }
    };

    deepEqual(node.loc, expected, message);
  }

  test("programs", function () {
    var ast = _htmlbarsSyntax.parse("\n  {{#if foo}}\n    {{bar}}\n       {{/if}}\n    ");

    locEqual(ast, 1, 0, 5, 4, 'outer program');

    // startColumn should be 13 not 2.
    // This should be fixed upstream in Handlebars.
    locEqual(ast.body[1].program, 2, 2, 4, 7, 'nested program');
  });

  test("blocks", function () {
    var ast = _htmlbarsSyntax.parse("\n  {{#if foo}}\n    {{#if bar}}\n        test\n        {{else}}\n      test\n  {{/if    }}\n       {{/if\n      }}\n    ");

    locEqual(ast.body[1], 2, 2, 9, 8, 'outer block');
    locEqual(ast.body[1].program.body[0], 3, 4, 7, 13, 'nested block');
  });

  test("mustache", function () {
    var ast = _htmlbarsSyntax.parse("\n    {{foo}}\n    {{#if foo}}\n      bar: {{bar\n        }}\n    {{/if}}\n  ");

    locEqual(ast.body[1], 2, 4, 2, 11, 'outer mustache');
    locEqual(ast.body[3].program.body[1], 4, 11, 5, 10, 'inner mustache');
  });

  test("element modifier", function () {
    var ast = _htmlbarsSyntax.parse("\n    <div {{bind-attr\n      foo\n      bar=wat}}></div>\n  ");

    locEqual(ast.body[1].modifiers[0], 2, 9, 4, 15, 'element modifier');
  });

  test("html elements", function () {
    var ast = _htmlbarsSyntax.parse("\n    <section>\n      <br>\n      <div>\n        <hr />\n      </div>\n    </section>\n  ");

    var _ast$body = ast.body;
    var section = _ast$body[1];
    var _section$children = section.children;
    var br = _section$children[1];
    var div = _section$children[3];
    var _div$children = div.children;
    var hr = _div$children[1];

    locEqual(section, 2, 4, 7, 14, 'section element');
    locEqual(br, 3, 6, 3, 10, 'br element');
    locEqual(div, 4, 6, 6, 12, 'div element');
    locEqual(hr, 5, 8, 5, 14, 'hr element');
  });

  test("components", function () {
    var ast = _htmlbarsSyntax.parse("\n    <el-page>\n      <el-header></el-header>\n      <el-input />\n      <el-footer>\n          </el-footer>\n    </el-page>\n  ");

    var _ast$body2 = ast.body;
    var page = _ast$body2[1];
    var _page$program$body = page.program.body;
    var header = _page$program$body[1];
    var input = _page$program$body[3];
    var footer = _page$program$body[5];

    locEqual(page, 2, 4, 7, 14, 'page component');
    locEqual(header, 3, 6, 3, 29, 'header component');
    locEqual(input, 4, 6, 4, 18, 'input component');
    locEqual(footer, 5, 6, 6, 22, 'footer component');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9sb2Mtbm9kZS10ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsT0FBSyxDQUFDLE1BQU0sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDOztBQUV6RCxXQUFTLFFBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRTs7QUFFM0UsUUFBSSxRQUFRLEdBQUc7QUFDYixZQUFNLEVBQUUsSUFBSTtBQUNaLFdBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRTtBQUMvQyxTQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUU7S0FDMUMsQ0FBQzs7QUFFRixhQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDeEM7O0FBRUQsTUFBSSxDQUFDLFVBQVUsRUFBRSxZQUFXO0FBQzFCLFFBQUksR0FBRyxHQUFHLGdCQWhCSCxLQUFLLHNEQW9CUixDQUFDOztBQUVMLFlBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDOzs7O0FBSTNDLFlBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztHQUM3RCxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLFFBQVEsRUFBRSxZQUFXO0FBQ3hCLFFBQUksR0FBRyxHQUFHLGdCQTlCSCxLQUFLLDZIQXVDUixDQUFDOztBQUVMLFlBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FB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Q0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvbG9jLW5vZGUtdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlIH0gZnJvbSBcIi4uL2h0bWxiYXJzLXN5bnRheFwiO1xuXG5RVW5pdC5tb2R1bGUoXCJbaHRtbGJhcnMtc3ludGF4XSBQYXJzZXIgLSBMb2NhdGlvbiBJbmZvXCIpO1xuXG5mdW5jdGlvbiBsb2NFcXVhbChub2RlLCBzdGFydExpbmUsIHN0YXJ0Q29sdW1uLCBlbmRMaW5lLCBlbmRDb2x1bW4sIG1lc3NhZ2UpIHtcblxuICB2YXIgZXhwZWN0ZWQgPSB7XG4gICAgc291cmNlOiBudWxsLFxuICAgIHN0YXJ0OiB7IGxpbmU6IHN0YXJ0TGluZSwgY29sdW1uOiBzdGFydENvbHVtbiB9LFxuICAgIGVuZDogeyBsaW5lOiBlbmRMaW5lLCBjb2x1bW46IGVuZENvbHVtbiB9XG4gIH07XG5cbiAgZGVlcEVxdWFsKG5vZGUubG9jLCBleHBlY3RlZCwgbWVzc2FnZSk7XG59XG5cbnRlc3QoXCJwcm9ncmFtc1wiLCBmdW5jdGlvbigpIHtcbiAgdmFyIGFzdCA9IHBhcnNlKGBcbiAge3sjaWYgZm9vfX1cbiAgICB7e2Jhcn19XG4gICAgICAge3svaWZ9fVxuICAgIGApO1xuXG4gIGxvY0VxdWFsKGFzdCwgMSwgMCwgNSwgNCwgJ291dGVyIHByb2dyYW0nKTtcblxuICAvLyBzdGFydENvbHVtbiBzaG91bGQgYmUgMTMgbm90IDIuXG4gIC8vIFRoaXMgc2hvdWxkIGJlIGZpeGVkIHVwc3RyZWFtIGluIEhhbmRsZWJhcnMuXG4gIGxvY0VxdWFsKGFzdC5ib2R5WzFdLnByb2dyYW0sIDIsIDIsIDQsIDcsICduZXN0ZWQgcHJvZ3JhbScpO1xufSk7XG5cbnRlc3QoXCJibG9ja3NcIiwgZnVuY3Rpb24oKSB7XG4gIHZhciBhc3QgPSBwYXJzZShgXG4gIHt7I2lmIGZvb319XG4gICAge3sjaWYgYmFyfX1cbiAgICAgICAgdGVzdFxuICAgICAgICB7e2Vsc2V9fVxuICAgICAgdGVzdFxuICB7ey9pZiAgICB9fVxuICAgICAgIHt7L2lmXG4gICAgICB9fVxuICAgIGApO1xuXG4gIGxvY0VxdWFsKGFzdC5ib2R5WzFdLCAyLCAyLCA5LCA4LCAnb3V0ZXIgYmxvY2snKTtcbiAgbG9jRXF1YWwoYXN0LmJvZHlbMV0ucHJvZ3JhbS5ib2R5WzBdLCAzLCA0LCA3LCAxMywgJ25lc3RlZCBibG9jaycpO1xufSk7XG5cbnRlc3QoXCJtdXN0YWNoZVwiLCBmdW5jdGlvbigpIHtcbiAgdmFyIGFzdCA9IHBhcnNlKGBcbiAgICB7e2Zvb319XG4gICAge3sjaWYgZm9vfX1cbiAgICAgIGJhcjoge3tiYXJcbiAgICAgICAgfX1cbiAgICB7ey9pZn19XG4gIGApO1xuXG4gIGxvY0VxdWFsKGFzdC5ib2R5WzFdLCAyLCA0LCAyLCAxMSwgJ291dGVyIG11c3RhY2hlJyk7XG4gIGxvY0VxdWFsKGFzdC5ib2R5WzNdLnByb2dyYW0uYm9keVsxXSwgNCwgMTEsIDUsIDEwLCAnaW5uZXIgbXVzdGFjaGUnKTtcbn0pO1xuXG50ZXN0KFwiZWxlbWVudCBtb2RpZmllclwiLCBmdW5jdGlvbigpIHtcbiAgdmFyIGFzdCA9IHBhcnNlKGBcbiAgICA8ZGl2IHt7YmluZC1hdHRyXG4gICAgICBmb29cbiAgICAgIGJhcj13YXR9fT48L2Rpdj5cbiAgYCk7XG5cbiAgbG9jRXF1YWwoYXN0LmJvZHlbMV0ubW9kaWZpZXJzWzBdLCAyLCA5LCA0LCAxNSwgJ2VsZW1lbnQgbW9kaWZpZXInKTtcbn0pO1xuXG50ZXN0KFwiaHRtbCBlbGVtZW50c1wiLCBmdW5jdGlvbigpIHtcbiAgdmFyIGFzdCA9IHBhcnNlKGBcbiAgICA8c2VjdGlvbj5cbiAgICAgIDxicj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxociAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuICBgKTtcblxuICBsZXQgWyxzZWN0aW9uXSA9IGFzdC5ib2R5O1xuICBsZXQgWyxiciwsZGl2XSA9IHNlY3Rpb24uY2hpbGRyZW47XG4gIGxldCBbLGhyXSA9IGRpdi5jaGlsZHJlbjtcblxuICBsb2NFcXVhbChzZWN0aW9uLCAyLCA0LCA3LCAxNCwgJ3NlY3Rpb24gZWxlbWVudCcpO1xuICBsb2NFcXVhbChiciwgMywgNiwgMywgMTAsICdiciBlbGVtZW50Jyk7XG4gIGxvY0VxdWFsKGRpdiwgNCwgNiwgNiwgMTIsICdkaXYgZWxlbWVudCcpO1xuICBsb2NFcXVhbChociwgNSwgOCwgNSwgMTQsICdociBlbGVtZW50Jyk7XG59KTtcblxudGVzdChcImNvbXBvbmVudHNcIiwgZnVuY3Rpb24oKSB7XG4gIHZhciBhc3QgPSBwYXJzZShgXG4gICAgPGVsLXBhZ2U+XG4gICAgICA8ZWwtaGVhZGVyPjwvZWwtaGVhZGVyPlxuICAgICAgPGVsLWlucHV0IC8+XG4gICAgICA8ZWwtZm9vdGVyPlxuICAgICAgICAgIDwvZWwtZm9vdGVyPlxuICAgIDwvZWwtcGFnZT5cbiAgYCk7XG5cbiAgbGV0IFsscGFnZV0gPSBhc3QuYm9keTtcbiAgbGV0IFssaGVhZGVyLCxpbnB1dCwsZm9vdGVyXSA9IHBhZ2UucHJvZ3JhbS5ib2R5O1xuXG4gIGxvY0VxdWFsKHBhZ2UsIDIsIDQsIDcsIDE0LCAncGFnZSBjb21wb25lbnQnKTtcbiAgbG9jRXF1YWwoaGVhZGVyLCAzLCA2LCAzLCAyOSwgJ2hlYWRlciBjb21wb25lbnQnKTtcbiAgbG9jRXF1YWwoaW5wdXQsIDQsIDYsIDQsIDE4LCAnaW5wdXQgY29tcG9uZW50Jyk7XG4gIGxvY0VxdWFsKGZvb3RlciwgNSwgNiwgNiwgMjIsICdmb290ZXIgY29tcG9uZW50Jyk7XG59KTtcbiJdfQ==
define('htmlbars-syntax-tests/loc-node-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests');
  QUnit.test('htmlbars-syntax-tests/loc-node-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/loc-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9sb2Mtbm9kZS10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQy9DLE9BQUssQ0FBQyxJQUFJLENBQUMsMkRBQTJELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDdkYsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsNERBQTRELENBQUMsQ0FBQztHQUMvRSxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL2xvYy1ub2RlLXRlc3QuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9sb2Mtbm9kZS10ZXN0LmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKGFzc2VydCkgeyBcbiAgYXNzZXJ0Lm9rKHRydWUsICdodG1sYmFycy1zeW50YXgtdGVzdHMvbG9jLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define("htmlbars-syntax-tests/parser-node-test", ["exports", "../htmlbars-syntax/handlebars/compiler/base", "../htmlbars-syntax", "../htmlbars-syntax/builders", "./support"], function (exports, _htmlbarsSyntaxHandlebarsCompilerBase, _htmlbarsSyntax, _htmlbarsSyntaxBuilders, _support) {

  QUnit.module("[htmlbars-syntax] Parser - AST");

  test('raise an error for script tags with line number', function () {
    throws(function () {
      _htmlbarsSyntax.parse("error\n line 2: <script>\n</script>");
      // Make sure the error gives the correct line number
    }, /line 2/);
  });

  test("a simple piece of content", function () {
    var t = 'some content';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('some content')]));
  });

  test("allow simple AST to be passed", function () {
    var ast = _htmlbarsSyntax.parse(_htmlbarsSyntaxHandlebarsCompilerBase.parse("simple"));

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("simple")]));
  });

  test("allow an AST with mustaches to be passed", function () {
    var ast = _htmlbarsSyntax.parse(_htmlbarsSyntaxHandlebarsCompilerBase.parse("<h1>some</h1> ast {{foo}}"));

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("h1", [], [], [_htmlbarsSyntaxBuilders.default.text("some")]), _htmlbarsSyntaxBuilders.default.text(" ast "), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('foo'))]));
  });

  test("self-closed element", function () {
    var t = '<g />';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("g")]));
  });

  test("elements can have empty attributes", function () {
    var t = '<img id="">';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("img", [_htmlbarsSyntaxBuilders.default.attr("id", _htmlbarsSyntaxBuilders.default.text(""))])]));
  });

  test("svg content", function () {
    var t = "<svg></svg>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("svg")]));
  });

  test("html content with html content inline", function () {
    var t = '<div><p></p></div>';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("div", [], [], [_htmlbarsSyntaxBuilders.default.element("p")])]));
  });

  test("html content with svg content inline", function () {
    var t = '<div><svg></svg></div>';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("div", [], [], [_htmlbarsSyntaxBuilders.default.element("svg")])]));
  });

  var integrationPoints = ['foreignObject', 'desc', 'title'];
  function buildIntegrationPointTest(integrationPoint) {
    return function integrationPointTest() {
      var t = '<svg><' + integrationPoint + '><div></div></' + integrationPoint + '></svg>';
      _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("svg", [], [], [_htmlbarsSyntaxBuilders.default.element(integrationPoint, [], [], [_htmlbarsSyntaxBuilders.default.element("div")])])]));
    };
  }
  for (var i = 0, length = integrationPoints.length; i < length; i++) {
    test("svg content with html content inline for " + integrationPoints[i], buildIntegrationPointTest(integrationPoints[i]));
  }

  test("a piece of content with HTML", function () {
    var t = 'some <div>content</div> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("div", [], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("a piece of Handlebars with HTML", function () {
    var t = 'some <div>{{content}}</div> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("div", [], [], [_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('content'))]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("Handlebars embedded in an attribute (quoted)", function () {
    var t = 'some <div class="{{foo}}">content</div> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("div", [_htmlbarsSyntaxBuilders.default.attr("class", _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.path('foo')]))], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("Handlebars embedded in an attribute (unquoted)", function () {
    var t = 'some <div class={{foo}}>content</div> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("div", [_htmlbarsSyntaxBuilders.default.attr("class", _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('foo')))], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("Handlebars embedded in an attribute (sexprs)", function () {
    var t = 'some <div class="{{foo (foo "abc")}}">content</div> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("div", [_htmlbarsSyntaxBuilders.default.attr("class", _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('foo'), [_htmlbarsSyntaxBuilders.default.sexpr(_htmlbarsSyntaxBuilders.default.path('foo'), [_htmlbarsSyntaxBuilders.default.string('abc')])])]))], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("Handlebars embedded in an attribute with other content surrounding it", function () {
    var t = 'some <a href="http://{{link}}/">content</a> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("a", [_htmlbarsSyntaxBuilders.default.attr("href", _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.string("http://"), _htmlbarsSyntaxBuilders.default.path('link'), _htmlbarsSyntaxBuilders.default.string("/")]))], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("A more complete embedding example", function () {
    var t = "{{embed}} {{some 'content'}} " + "<div class='{{foo}} {{bind-class isEnabled truthy='enabled'}}'>{{ content }}</div>" + " {{more 'embed'}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('embed')), _htmlbarsSyntaxBuilders.default.text(' '), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('some'), [_htmlbarsSyntaxBuilders.default.string('content')]), _htmlbarsSyntaxBuilders.default.text(' '), _htmlbarsSyntaxBuilders.default.element("div", [_htmlbarsSyntaxBuilders.default.attr("class", _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.path('foo'), _htmlbarsSyntaxBuilders.default.string(' '), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('bind-class'), [_htmlbarsSyntaxBuilders.default.path('isEnabled')], _htmlbarsSyntaxBuilders.default.hash([_htmlbarsSyntaxBuilders.default.pair('truthy', _htmlbarsSyntaxBuilders.default.string('enabled'))]))]))], [], [_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('content'))]), _htmlbarsSyntaxBuilders.default.text(' '), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('more'), [_htmlbarsSyntaxBuilders.default.string('embed')])]));
  });

  test("Simple embedded block helpers", function () {
    var t = "{{#if foo}}<div>{{content}}</div>{{/if}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('if'), [_htmlbarsSyntaxBuilders.default.path('foo')], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('div', [], [], [_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('content'))])]))]));
  });

  test("Involved block helper", function () {
    var t = '<p>hi</p> content {{#testing shouldRender}}<p>Appears!</p>{{/testing}} more <em>content</em> here';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('p', [], [], [_htmlbarsSyntaxBuilders.default.text('hi')]), _htmlbarsSyntaxBuilders.default.text(' content '), _htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('testing'), [_htmlbarsSyntaxBuilders.default.path('shouldRender')], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('p', [], [], [_htmlbarsSyntaxBuilders.default.text('Appears!')])])), _htmlbarsSyntaxBuilders.default.text(' more '), _htmlbarsSyntaxBuilders.default.element('em', [], [], [_htmlbarsSyntaxBuilders.default.text('content')]), _htmlbarsSyntaxBuilders.default.text(' here')]));
  });

  test("Element modifiers", function () {
    var t = "<p {{action 'boom'}} class='bar'>Some content</p>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('p', [_htmlbarsSyntaxBuilders.default.attr('class', _htmlbarsSyntaxBuilders.default.text('bar'))], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('action'), [_htmlbarsSyntaxBuilders.default.string('boom')])], [_htmlbarsSyntaxBuilders.default.text('Some content')])]));
  });

  test("Tokenizer: MustacheStatement encountered in tagName state", function () {
    var t = "<input{{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Tokenizer: MustacheStatement encountered in beforeAttributeName state", function () {
    var t = "<input {{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Tokenizer: MustacheStatement encountered in attributeName state", function () {
    var t = "<input foo{{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [_htmlbarsSyntaxBuilders.default.attr('foo', _htmlbarsSyntaxBuilders.default.text(''))], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Tokenizer: MustacheStatement encountered in afterAttributeName state", function () {
    var t = "<input foo {{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [_htmlbarsSyntaxBuilders.default.attr('foo', _htmlbarsSyntaxBuilders.default.text(''))], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Tokenizer: MustacheStatement encountered in afterAttributeValue state", function () {
    var t = "<input foo=1 {{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [_htmlbarsSyntaxBuilders.default.attr('foo', _htmlbarsSyntaxBuilders.default.text('1'))], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Tokenizer: MustacheStatement encountered in afterAttributeValueQuoted state", function () {
    var t = "<input foo='1'{{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [_htmlbarsSyntaxBuilders.default.attr('foo', _htmlbarsSyntaxBuilders.default.text('1'))], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Stripping - mustaches", function () {
    var t = "foo {{~content}} bar";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo'), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('content')), _htmlbarsSyntaxBuilders.default.text(' bar')]));

    t = "foo {{content~}} bar";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo '), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('content')), _htmlbarsSyntaxBuilders.default.text('bar')]));
  });

  test("Stripping - blocks", function () {
    var t = "foo {{~#wat}}{{/wat}} bar";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo'), _htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program()), _htmlbarsSyntaxBuilders.default.text(' bar')]));

    t = "foo {{#wat}}{{/wat~}} bar";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo '), _htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program()), _htmlbarsSyntaxBuilders.default.text('bar')]));
  });

  test("Stripping - programs", function () {
    var t = "{{#wat~}} foo {{else}}{{/wat}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo ')]), _htmlbarsSyntaxBuilders.default.program())]));

    t = "{{#wat}} foo {{~else}}{{/wat}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text(' foo')]), _htmlbarsSyntaxBuilders.default.program())]));

    t = "{{#wat}}{{else~}} foo {{/wat}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo ')]))]));

    t = "{{#wat}}{{else}} foo {{~/wat}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text(' foo')]))]));
  });

  test("Stripping - removes unnecessary text nodes", function () {
    var t = "{{#each~}}\n  <li> foo </li>\n{{~/each}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('each'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('li', [], [], [_htmlbarsSyntaxBuilders.default.text(' foo ')])]))]));
  });

  test("Stripping - comments", function () {
    var t = "{{!~}}\n  <li> foo </li>{{!~}}\n  ";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('li', [], [], [_htmlbarsSyntaxBuilders.default.text(' foo ')])]));
  });

  // TODO: Make these throw an error.
  //test("Awkward mustache in unquoted attribute value", function() {
  //  var t = "<div class=a{{foo}}></div>";
  //  astEqual(t, b.program([
  //    b.element('div', [ b.attr('class', concat([b.string("a"), b.sexpr([b.path('foo')])])) ])
  //  ]));
  //
  //  t = "<div class=a{{foo}}b></div>";
  //  astEqual(t, b.program([
  //    b.element('div', [ b.attr('class', concat([b.string("a"), b.sexpr([b.path('foo')]), b.string("b")])) ])
  //  ]));
  //
  //  t = "<div class={{foo}}b></div>";
  //  astEqual(t, b.program([
  //    b.element('div', [ b.attr('class', concat([b.sexpr([b.path('foo')]), b.string("b")])) ])
  //  ]));
  //});

  test("Components", function () {
    var t = "<x-foo a=b c='d' e={{f}} id='{{bar}}' class='foo-{{bar}}'>{{a}}{{b}}c{{d}}</x-foo>{{e}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.component('x-foo', [_htmlbarsSyntaxBuilders.default.attr('a', _htmlbarsSyntaxBuilders.default.text('b')), _htmlbarsSyntaxBuilders.default.attr('c', _htmlbarsSyntaxBuilders.default.text('d')), _htmlbarsSyntaxBuilders.default.attr('e', _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('f'))), _htmlbarsSyntaxBuilders.default.attr('id', _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.path('bar')])), _htmlbarsSyntaxBuilders.default.attr('class', _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.string('foo-'), _htmlbarsSyntaxBuilders.default.path('bar')]))], _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('a')), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('b')), _htmlbarsSyntaxBuilders.default.text('c'), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('d'))])), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('e'))]));
  });

  test("Components with disableComponentGeneration", function () {
    var t = "begin <x-foo>content</x-foo> finish";
    var actual = _htmlbarsSyntax.parse(t, {
      disableComponentGeneration: true
    });

    _support.astEqual(actual, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("begin "), _htmlbarsSyntaxBuilders.default.element("x-foo", [], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" finish")]));
  });

  test("Components with disableComponentGeneration === false", function () {
    var t = "begin <x-foo>content</x-foo> finish";
    var actual = _htmlbarsSyntax.parse(t, {
      disableComponentGeneration: false
    });

    _support.astEqual(actual, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("begin "), _htmlbarsSyntaxBuilders.default.component("x-foo", [], _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("content")])), _htmlbarsSyntaxBuilders.default.text(" finish")]));
  });

  test("Contextual components", function () {
    var t = "<x.foo a=b c='d' e={{f}} id='{{bar}}' class='foo-{{bar}}'>{{a}}{{b}}c{{d}}</x.foo>{{e}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.component('x.foo', [_htmlbarsSyntaxBuilders.default.attr('a', _htmlbarsSyntaxBuilders.default.text('b')), _htmlbarsSyntaxBuilders.default.attr('c', _htmlbarsSyntaxBuilders.default.text('d')), _htmlbarsSyntaxBuilders.default.attr('e', _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('f'))), _htmlbarsSyntaxBuilders.default.attr('id', _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.path('bar')])), _htmlbarsSyntaxBuilders.default.attr('class', _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.string('foo-'), _htmlbarsSyntaxBuilders.default.path('bar')]))], _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('a')), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('b')), _htmlbarsSyntaxBuilders.default.text('c'), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('d'))])), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('e'))]));
  });

  test("Contextual components with disableComponentGeneration", function () {
    var t = "begin <x.foo>content</x.foo> finish";
    var actual = _htmlbarsSyntax.parse(t, {
      disableComponentGeneration: true
    });

    _support.astEqual(actual, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("begin "), _htmlbarsSyntaxBuilders.default.element("x.foo", [], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" finish")]));
  });

  test("Contextual components with disableComponentGeneration === false", function () {
    var t = "begin <x.foo>content</x.foo> finish";
    var actual = _htmlbarsSyntax.parse(t, {
      disableComponentGeneration: false
    });

    _support.astEqual(actual, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("begin "), _htmlbarsSyntaxBuilders.default.component("x.foo", [], _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("content")])), _htmlbarsSyntaxBuilders.default.text(" finish")]));
  });

  test("an HTML comment", function () {
    var t = 'before <!-- some comment --> after';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("before "), _htmlbarsSyntaxBuilders.default.comment(" some comment "), _htmlbarsSyntaxBuilders.default.text(" after")]));
  });

  test("allow {{null}} to be passed as helper name", function () {
    var ast = _htmlbarsSyntax.parse("{{null}}");

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.null())]));
  });

  test("allow {{null}} to be passed as a param", function () {
    var ast = _htmlbarsSyntax.parse("{{foo null}}");

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('foo'), [_htmlbarsSyntaxBuilders.default.null()])]));
  });

  test("allow {{undefined}} to be passed as helper name", function () {
    var ast = _htmlbarsSyntax.parse("{{undefined}}");

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.undefined())]));
  });

  test("allow {{undefined}} to be passed as a param", function () {
    var ast = _htmlbarsSyntax.parse("{{foo undefined}}");

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('foo'), [_htmlbarsSyntaxBuilders.default.undefined()])]));
  });
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-syntax-tests/parser-node-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests');
  QUnit.test('htmlbars-syntax-tests/parser-node-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/parser-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9wYXJzZXItbm9kZS10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQy9DLE9BQUssQ0FBQyxJQUFJLENBQUMsOERBQThELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDMUYsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsK0RBQStELENBQUMsQ0FBQztHQUNsRixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL3BhcnNlci1ub2RlLXRlc3QuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9wYXJzZXItbm9kZS10ZXN0LmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKGFzc2VydCkgeyBcbiAgYXNzZXJ0Lm9rKHRydWUsICdodG1sYmFycy1zeW50YXgtdGVzdHMvcGFyc2VyLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/plugin-node-test', ['exports', '../htmlbars-syntax'], function (exports, _htmlbarsSyntax) {

  QUnit.module('[htmlbars-syntax] Plugins - AST Transforms');

  test('AST plugins can be provided to the compiler', function () {
    expect(1);

    function Plugin() {}
    Plugin.prototype.transform = function () {
      ok(true, 'transform was called!');
    };

    _htmlbarsSyntax.parse('<div></div>', {
      plugins: {
        ast: [Plugin]
      }
    });
  });

  test('provides syntax package as `syntax` prop if value is null', function () {
    expect(1);

    function Plugin() {}
    Plugin.prototype.transform = function () {
      equal(this.syntax.Walker, _htmlbarsSyntax.Walker);
    };

    _htmlbarsSyntax.parse('<div></div>', {
      plugins: {
        ast: [Plugin]
      }
    });
  });

  test('AST plugins can modify the AST', function () {
    expect(1);

    var expected = "OOOPS, MESSED THAT UP!";

    function Plugin() {}
    Plugin.prototype.transform = function () {
      return expected;
    };

    var ast = _htmlbarsSyntax.parse('<div></div>', {
      plugins: {
        ast: [Plugin]
      }
    });

    equal(ast, expected, 'return value from AST transform is used');
  });

  test('AST plugins can be chained', function () {
    expect(2);

    var expected = "OOOPS, MESSED THAT UP!";

    function Plugin() {}
    Plugin.prototype.transform = function () {
      return expected;
    };

    function SecondaryPlugin() {}
    SecondaryPlugin.prototype.transform = function (ast) {
      equal(ast, expected, 'return value from AST transform is used');

      return 'BOOM!';
    };

    var ast = _htmlbarsSyntax.parse('<div></div>', {
      plugins: {
        ast: [Plugin, SecondaryPlugin]
      }
    });

    equal(ast, 'BOOM!', 'return value from last AST transform is used');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9wbHVnaW4tbm9kZS10ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDOztBQUUzRCxNQUFJLENBQUMsNkNBQTZDLEVBQUUsWUFBVztBQUM3RCxVQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRVYsYUFBUyxNQUFNLEdBQUcsRUFBRztBQUNyQixVQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFXO0FBQ3RDLFFBQUUsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztLQUNuQyxDQUFDOztBQUVGLG9CQVpPLEtBQUssQ0FZTixhQUFhLEVBQUU7QUFDbkIsYUFBTyxFQUFFO0FBQ1AsV0FBRyxFQUFFLENBQUUsTUFBTSxDQUFFO09BQ2hCO0tBQ0YsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQywyREFBMkQsRUFBRSxZQUFXO0FBQzNFLFVBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFVixhQUFTLE1BQU0sR0FBRyxFQUFHO0FBQ3JCLFVBQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVc7QUFDdEMsV0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxrQkF4QlosTUFBTSxDQXdCZSxDQUFDO0tBQ25DLENBQUM7O0FBRUYsb0JBM0JPLEtBQUssQ0EyQk4sYUFBYSxFQUFFO0FBQ25CLGFBQU8sRUFBRTtBQUNQLFdBQUcsRUFBRSxDQUFFLE1BQU0sQ0FBRTtPQUNoQjtLQUNGLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsZ0NBQWdDLEVBQUUsWUFBVztBQUNoRCxVQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRVYsUUFBSSxRQUFRLEdBQUcsd0JBQXdCLENBQUM7O0FBRXhDLGFBQVMsTUFBTSxHQUFHLEVBQUc7QUFDckIsVUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBVztBQUN0QyxhQUFPLFFBQVEsQ0FBQztLQUNqQixDQUFDOztBQUVGLFFBQUksR0FBRyxHQUFHLGdCQTVDSCxLQUFLLENBNENJLGFBQWEsRUFBRTtBQUM3QixhQUFPLEVBQUU7QUFDUCxXQUFHLEVBQUUsQ0FBRSxNQUFNLENBQUU7T0FDaEI7S0FDRixDQUFDLENBQUM7O0FBRUgsU0FBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUseUNBQXlDLENBQUMsQ0FBQztHQUNqRSxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLDRCQUE0QixFQUFFLFlBQVc7QUFDNUMsVUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVWLFFBQUksUUFBUSxHQUFHLHdCQUF3QixDQUFDOztBQUV4QyxhQUFTLE1BQU0sR0FBRyxFQUFHO0FBQ3JCLFVBQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVc7QUFDdEMsYUFBTyxRQUFRLENBQUM7S0FDakIsQ0FBQzs7QUFFRixhQUFTLGVBQWUsR0FBRyxFQUFHO0FBQzlCLG1CQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFTLEdBQUcsRUFBRTtBQUNsRCxXQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSx5Q0FBeUMsQ0FBQyxDQUFDOztBQUVoRSxhQUFPLE9BQU8sQ0FBQztLQUNoQixDQUFDOztBQUVGLFFBQUksR0FBRyxHQUFHLGdCQXRFSCxLQUFLLENBc0VJLGFBQWEsRUFBRTtBQUM3QixhQUFPLEVBQUU7QUFDUCxXQUFHLEVBQUUsQ0FDSCxNQUFNLEVBQ04sZUFBZSxDQUNoQjtPQUNGO0tBQ0YsQ0FBQyxDQUFDOztBQUVILFNBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLDhDQUE4QyxDQUFDLENBQUM7R0FDckUsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy9wbHVnaW4tbm9kZS10ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2UsIFdhbGtlciB9IGZyb20gJy4uL2h0bWxiYXJzLXN5bnRheCc7XG5cblFVbml0Lm1vZHVsZSgnW2h0bWxiYXJzLXN5bnRheF0gUGx1Z2lucyAtIEFTVCBUcmFuc2Zvcm1zJyk7XG5cbnRlc3QoJ0FTVCBwbHVnaW5zIGNhbiBiZSBwcm92aWRlZCB0byB0aGUgY29tcGlsZXInLCBmdW5jdGlvbigpIHtcbiAgZXhwZWN0KDEpO1xuXG4gIGZ1bmN0aW9uIFBsdWdpbigpIHsgfVxuICBQbHVnaW4ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgIG9rKHRydWUsICd0cmFuc2Zvcm0gd2FzIGNhbGxlZCEnKTtcbiAgfTtcblxuICBwYXJzZSgnPGRpdj48L2Rpdj4nLCB7XG4gICAgcGx1Z2luczoge1xuICAgICAgYXN0OiBbIFBsdWdpbiBdXG4gICAgfVxuICB9KTtcbn0pO1xuXG50ZXN0KCdwcm92aWRlcyBzeW50YXggcGFja2FnZSBhcyBgc3ludGF4YCBwcm9wIGlmIHZhbHVlIGlzIG51bGwnLCBmdW5jdGlvbigpIHtcbiAgZXhwZWN0KDEpO1xuXG4gIGZ1bmN0aW9uIFBsdWdpbigpIHsgfVxuICBQbHVnaW4ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgIGVxdWFsKHRoaXMuc3ludGF4LldhbGtlciwgV2Fsa2VyKTtcbiAgfTtcblxuICBwYXJzZSgnPGRpdj48L2Rpdj4nLCB7XG4gICAgcGx1Z2luczoge1xuICAgICAgYXN0OiBbIFBsdWdpbiBdXG4gICAgfVxuICB9KTtcbn0pO1xuXG50ZXN0KCdBU1QgcGx1Z2lucyBjYW4gbW9kaWZ5IHRoZSBBU1QnLCBmdW5jdGlvbigpIHtcbiAgZXhwZWN0KDEpO1xuXG4gIHZhciBleHBlY3RlZCA9IFwiT09PUFMsIE1FU1NFRCBUSEFUIFVQIVwiO1xuXG4gIGZ1bmN0aW9uIFBsdWdpbigpIHsgfVxuICBQbHVnaW4ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBleHBlY3RlZDtcbiAgfTtcblxuICB2YXIgYXN0ID0gcGFyc2UoJzxkaXY+PC9kaXY+Jywge1xuICAgIHBsdWdpbnM6IHtcbiAgICAgIGFzdDogWyBQbHVnaW4gXVxuICAgIH1cbiAgfSk7XG5cbiAgZXF1YWwoYXN0LCBleHBlY3RlZCwgJ3JldHVybiB2YWx1ZSBmcm9tIEFTVCB0cmFuc2Zvcm0gaXMgdXNlZCcpO1xufSk7XG5cbnRlc3QoJ0FTVCBwbHVnaW5zIGNhbiBiZSBjaGFpbmVkJywgZnVuY3Rpb24oKSB7XG4gIGV4cGVjdCgyKTtcblxuICB2YXIgZXhwZWN0ZWQgPSBcIk9PT1BTLCBNRVNTRUQgVEhBVCBVUCFcIjtcblxuICBmdW5jdGlvbiBQbHVnaW4oKSB7IH1cbiAgUGx1Z2luLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZXhwZWN0ZWQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gU2Vjb25kYXJ5UGx1Z2luKCkgeyB9XG4gIFNlY29uZGFyeVBsdWdpbi5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24oYXN0KSB7XG4gICAgZXF1YWwoYXN0LCBleHBlY3RlZCwgJ3JldHVybiB2YWx1ZSBmcm9tIEFTVCB0cmFuc2Zvcm0gaXMgdXNlZCcpO1xuXG4gICAgcmV0dXJuICdCT09NISc7XG4gIH07XG5cbiAgdmFyIGFzdCA9IHBhcnNlKCc8ZGl2PjwvZGl2PicsIHtcbiAgICBwbHVnaW5zOiB7XG4gICAgICBhc3Q6IFsgXG4gICAgICAgIFBsdWdpbixcbiAgICAgICAgU2Vjb25kYXJ5UGx1Z2luXG4gICAgICBdXG4gICAgfVxuICB9KTtcblxuICBlcXVhbChhc3QsICdCT09NIScsICdyZXR1cm4gdmFsdWUgZnJvbSBsYXN0IEFTVCB0cmFuc2Zvcm0gaXMgdXNlZCcpO1xufSk7XG4iXX0=
define('htmlbars-syntax-tests/plugin-node-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests');
  QUnit.test('htmlbars-syntax-tests/plugin-node-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/plugin-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9wbHVnaW4tbm9kZS10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQy9DLE9BQUssQ0FBQyxJQUFJLENBQUMsOERBQThELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDMUYsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsK0RBQStELENBQUMsQ0FBQztHQUNsRixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL3BsdWdpbi1ub2RlLXRlc3QuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9wbHVnaW4tbm9kZS10ZXN0LmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKGFzc2VydCkgeyBcbiAgYXNzZXJ0Lm9rKHRydWUsICdodG1sYmFycy1zeW50YXgtdGVzdHMvcGx1Z2luLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/support', ['exports', '../htmlbars-syntax'], function (exports, _htmlbarsSyntax) {
  exports.astEqual = astEqual;

  function normalizeNode(obj) {
    if (obj && typeof obj === 'object') {
      var newObj;
      if (obj.splice) {
        newObj = new Array(obj.length);

        for (var i = 0; i < obj.length; i++) {
          newObj[i] = normalizeNode(obj[i]);
        }
      } else {
        newObj = {};

        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            newObj[key] = normalizeNode(obj[key]);
          }
        }

        if (newObj.type) {
          newObj._type = newObj.type;
          delete newObj.type;
        }

        delete newObj.loc;
      }
      return newObj;
    } else {
      return obj;
    }
  }

  function astEqual(actual, expected, message) {
    if (typeof actual === 'string') {
      actual = _htmlbarsSyntax.parse(actual);
    }
    if (typeof expected === 'string') {
      expected = _htmlbarsSyntax.parse(expected);
    }

    actual = normalizeNode(actual);
    expected = normalizeNode(expected);

    deepEqual(actual, expected, message);
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9zdXBwb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLFdBQVMsYUFBYSxDQUFDLEdBQUcsRUFBRTtBQUMxQixRQUFJLEdBQUcsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7QUFDbEMsVUFBSSxNQUFNLENBQUM7QUFDWCxVQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7QUFDZCxjQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUUvQixhQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNuQyxnQkFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQztPQUNGLE1BQU07QUFDTCxjQUFNLEdBQUcsRUFBRSxDQUFDOztBQUVaLGFBQUssSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFO0FBQ25CLGNBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUMzQixrQkFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztXQUN2QztTQUNGOztBQUVELFlBQUksTUFBTSxDQUFDLElBQUksRUFBRTtBQUNmLGdCQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDM0IsaUJBQU8sTUFBTSxDQUFDLElBQUksQ0FBQztTQUNwQjs7QUFFRCxlQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUM7T0FDbkI7QUFDRCxhQUFPLE1BQU0sQ0FBQztLQUNmLE1BQU07QUFDTCxhQUFPLEdBQUcsQ0FBQztLQUNaO0dBQ0Y7O0FBRU0sV0FBUyxRQUFRLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUU7QUFDbEQsUUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7QUFDOUIsWUFBTSxHQUFHLGdCQW5DSixLQUFLLENBbUNLLE1BQU0sQ0FBQyxDQUFDO0tBQ3hCO0FBQ0QsUUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7QUFDaEMsY0FBUSxHQUFHLGdCQXRDTixLQUFLLENBc0NPLFFBQVEsQ0FBQyxDQUFDO0tBQzVCOztBQUVELFVBQU0sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDL0IsWUFBUSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFbkMsYUFBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDdEMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL3N1cHBvcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZSB9IGZyb20gJy4uL2h0bWxiYXJzLXN5bnRheCc7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5vZGUob2JqKSB7XG4gIGlmIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgbmV3T2JqO1xuICAgIGlmIChvYmouc3BsaWNlKSB7XG4gICAgICBuZXdPYmogPSBuZXcgQXJyYXkob2JqLmxlbmd0aCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5ld09ialtpXSA9IG5vcm1hbGl6ZU5vZGUob2JqW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmV3T2JqID0ge307XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgbmV3T2JqW2tleV0gPSBub3JtYWxpemVOb2RlKG9ialtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobmV3T2JqLnR5cGUpIHtcbiAgICAgICAgbmV3T2JqLl90eXBlID0gbmV3T2JqLnR5cGU7XG4gICAgICAgIGRlbGV0ZSBuZXdPYmoudHlwZTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIG5ld09iai5sb2M7XG4gICAgfVxuICAgIHJldHVybiBuZXdPYmo7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAodHlwZW9mIGFjdHVhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBhY3R1YWwgPSBwYXJzZShhY3R1YWwpO1xuICB9XG4gIGlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgZXhwZWN0ZWQgPSBwYXJzZShleHBlY3RlZCk7XG4gIH1cblxuICBhY3R1YWwgPSBub3JtYWxpemVOb2RlKGFjdHVhbCk7XG4gIGV4cGVjdGVkID0gbm9ybWFsaXplTm9kZShleHBlY3RlZCk7XG5cbiAgZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpO1xufVxuIl19
define('htmlbars-syntax-tests/support.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests');
  QUnit.test('htmlbars-syntax-tests/support.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/support.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9zdXBwb3J0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQy9DLE9BQUssQ0FBQyxJQUFJLENBQUMscURBQXFELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDakYsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsc0RBQXNELENBQUMsQ0FBQztHQUN6RSxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL3N1cHBvcnQuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9zdXBwb3J0LmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKGFzc2VydCkgeyBcbiAgYXNzZXJ0Lm9rKHRydWUsICdodG1sYmFycy1zeW50YXgtdGVzdHMvc3VwcG9ydC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/traversal/manipulating-node-test', ['exports', '../support', '../../htmlbars-syntax', '../../htmlbars-syntax/traversal/errors'], function (exports, _support, _htmlbarsSyntax, _htmlbarsSyntaxTraversalErrors) {

  QUnit.module('[htmlbars-syntax] Traversal - manipulating');

  ['enter', 'exit'].forEach(function (eventName) {
    QUnit.test('[' + eventName + '] Replacing self in a key (returning null)', function (assert) {
      var ast = _htmlbarsSyntax.parse('<x y={{z}} />');
      var attr = ast.body[0].attributes[0];

      assert.throws(function () {
        var _MustacheStatement;

        _htmlbarsSyntax.traverse(ast, {
          MustacheStatement: (_MustacheStatement = {}, _MustacheStatement[eventName] = function (node) {
            if (node.path.parts[0] === 'z') {
              return null;
            }
          }, _MustacheStatement)
        });
      }, _htmlbarsSyntaxTraversalErrors.cannotRemoveNode(attr.value, attr, 'value'));
    });

    QUnit.test('[' + eventName + '] Replacing self in a key (returning an empty array)', function (assert) {
      var ast = _htmlbarsSyntax.parse('<x y={{z}} />');
      var attr = ast.body[0].attributes[0];

      assert.throws(function () {
        var _MustacheStatement2;

        _htmlbarsSyntax.traverse(ast, {
          MustacheStatement: (_MustacheStatement2 = {}, _MustacheStatement2[eventName] = function (node) {
            if (node.path.parts[0] === 'z') {
              return [];
            }
          }, _MustacheStatement2)
        });
      }, _htmlbarsSyntaxTraversalErrors.cannotRemoveNode(attr.value, attr, 'value'));
    });

    QUnit.test('[' + eventName + '] Replacing self in a key (returning a node)', function () {
      var _MustacheStatement3;

      var ast = _htmlbarsSyntax.parse('<x y={{z}} />');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement3 = {}, _MustacheStatement3[eventName] = function (node) {
          if (node.path.parts[0] === 'z') {
            return _htmlbarsSyntax.builders.mustache('a');
          }
        }, _MustacheStatement3)
      });

      _support.astEqual(ast, '<x y={{a}} />');
    });

    QUnit.test('[' + eventName + '] Replacing self in a key (returning an array with a single node)', function () {
      var _MustacheStatement4;

      var ast = _htmlbarsSyntax.parse('<x y={{z}} />');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement4 = {}, _MustacheStatement4[eventName] = function (node) {
          if (node.path.parts[0] === 'z') {
            return [_htmlbarsSyntax.builders.mustache('a')];
          }
        }, _MustacheStatement4)
      });

      _support.astEqual(ast, '<x y={{a}} />');
    });

    QUnit.test('[' + eventName + '] Replacing self in a key (returning an array with multiple nodes)', function (assert) {
      var ast = _htmlbarsSyntax.parse('<x y={{z}} />');
      var attr = ast.body[0].attributes[0];

      assert.throws(function () {
        var _MustacheStatement5;

        _htmlbarsSyntax.traverse(ast, {
          MustacheStatement: (_MustacheStatement5 = {}, _MustacheStatement5[eventName] = function (node) {
            if (node.path.parts[0] === 'z') {
              return [_htmlbarsSyntax.builders.mustache('a'), _htmlbarsSyntax.builders.mustache('b'), _htmlbarsSyntax.builders.mustache('c')];
            }
          }, _MustacheStatement5)
        });
      }, _htmlbarsSyntaxTraversalErrors.cannotReplaceNode(attr.value, attr, 'value'));
    });

    QUnit.test('[' + eventName + '] Replacing self in an array (returning null)', function () {
      var _MustacheStatement6;

      var ast = _htmlbarsSyntax.parse('{{x}}{{y}}{{z}}');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement6 = {}, _MustacheStatement6[eventName] = function (node) {
          if (node.path.parts[0] === 'y') {
            return null;
          }
        }, _MustacheStatement6)
      });

      _support.astEqual(ast, '{{x}}{{z}}');
    });

    QUnit.test('[' + eventName + '] Replacing self in an array (returning an empty array)', function () {
      var _MustacheStatement7;

      var ast = _htmlbarsSyntax.parse('{{x}}{{y}}{{z}}');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement7 = {}, _MustacheStatement7[eventName] = function (node) {
          if (node.path.parts[0] === 'y') {
            return [];
          }
        }, _MustacheStatement7)
      });

      _support.astEqual(ast, '{{x}}{{z}}');
    });

    QUnit.test('[' + eventName + '] Replacing self in an array (returning a node)', function () {
      var _MustacheStatement8;

      var ast = _htmlbarsSyntax.parse('{{x}}{{y}}{{z}}');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement8 = {}, _MustacheStatement8[eventName] = function (node) {
          if (node.path.parts[0] === 'y') {
            return _htmlbarsSyntax.builders.mustache('a');
          }
        }, _MustacheStatement8)
      });

      _support.astEqual(ast, '{{x}}{{a}}{{z}}');
    });

    QUnit.test('[' + eventName + '] Replacing self in an array (returning an array with a single node)', function () {
      var _MustacheStatement9;

      var ast = _htmlbarsSyntax.parse('{{x}}{{y}}{{z}}');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement9 = {}, _MustacheStatement9[eventName] = function (node) {
          if (node.path.parts[0] === 'y') {
            return [_htmlbarsSyntax.builders.mustache('a')];
          }
        }, _MustacheStatement9)
      });

      _support.astEqual(ast, '{{x}}{{a}}{{z}}');
    });

    QUnit.test('[' + eventName + '] Replacing self in an array (returning an array with multiple nodes)', function () {
      var _MustacheStatement10;

      var ast = _htmlbarsSyntax.parse('{{x}}{{y}}{{z}}');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement10 = {}, _MustacheStatement10[eventName] = function (node) {
          if (node.path.parts[0] === 'y') {
            return [_htmlbarsSyntax.builders.mustache('a'), _htmlbarsSyntax.builders.mustache('b'), _htmlbarsSyntax.builders.mustache('c')];
          }
        }, _MustacheStatement10)
      });

      _support.astEqual(ast, '{{x}}{{a}}{{b}}{{c}}{{z}}');
    });
  });

  QUnit.module('[htmlbars-syntax] Traversal - manipulating (edge cases)');

  QUnit.test('Inside of a block', function () {
    var ast = _htmlbarsSyntax.parse('{{y}}{{#w}}{{x}}{{y}}{{z}}{{/w}}');

    _htmlbarsSyntax.traverse(ast, {
      MustacheStatement: function (node) {
        if (node.path.parts[0] === 'y') {
          return [_htmlbarsSyntax.builders.mustache('a'), _htmlbarsSyntax.builders.mustache('b'), _htmlbarsSyntax.builders.mustache('c')];
        }
      }
    });

    _support.astEqual(ast, '{{a}}{{b}}{{c}}{{#w}}{{x}}{{a}}{{b}}{{c}}{{z}}{{/w}}');
  });

  QUnit.test('Exit event is not triggered if the node is replaced during the enter event', function (assert) {
    var ast = _htmlbarsSyntax.parse('{{x}}');
    var didExit = false;

    _htmlbarsSyntax.traverse(ast, {
      MustacheStatement: {
        enter: function () {
          return _htmlbarsSyntax.builders.mustache('y');
        },
        exit: function () {
          didExit = true;
        }
      }
    });

    assert.strictEqual(didExit, false);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvbWFuaXB1bGF0aW5nLW5vZGUtdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVdBLE9BQUssQ0FBQyxNQUFNLENBQUMsNENBQTRDLENBQUMsQ0FBQzs7QUFFM0QsR0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsU0FBUyxFQUFJO0FBQ3JDLFNBQUssQ0FBQyxJQUFJLE9BQUssU0FBUyxpREFBOEMsVUFBQSxNQUFNLEVBQUk7QUFDOUUsVUFBSSxHQUFHLEdBQUcsZ0JBYlosS0FBSyxpQkFhNkIsQ0FBQztBQUNqQyxVQUFJLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFckMsWUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFNOzs7QUFDbEIsd0JBaEJKLFFBQVEsQ0FnQkssR0FBRyxFQUFFO0FBQ1osMkJBQWlCLCtDQUNkLFNBQVMsSUFBQyxVQUFDLElBQUksRUFBRTtBQUNoQixnQkFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7QUFDOUIscUJBQU8sSUFBSSxDQUFDO2FBQ2I7V0FDRixxQkFDRjtTQUNGLENBQUMsQ0FBQztPQUNKLEVBQUUsK0JBckJMLGdCQUFnQixDQXFCTSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ2pELENBQUMsQ0FBQzs7QUFFSCxTQUFLLENBQUMsSUFBSSxPQUFLLFNBQVMsMkRBQXdELFVBQUEsTUFBTSxFQUFJO0FBQ3hGLFVBQUksR0FBRyxHQUFHLGdCQTlCWixLQUFLLGlCQThCNkIsQ0FBQztBQUNqQyxVQUFJLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7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LENBQUM7O0FBRUgsVUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7R0FDcEMsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvbWFuaXB1bGF0aW5nLW5vZGUtdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzdEVxdWFsIH0gZnJvbSAnLi4vc3VwcG9ydCc7XG5pbXBvcnQge1xuICBwYXJzZSxcbiAgdHJhdmVyc2UsXG4gIGJ1aWxkZXJzIGFzIGJcbn0gZnJvbSAnLi4vLi4vaHRtbGJhcnMtc3ludGF4JztcbmltcG9ydCB7XG4gIGNhbm5vdFJlbW92ZU5vZGUsXG4gIGNhbm5vdFJlcGxhY2VOb2RlLFxufSBmcm9tICcuLi8uLi9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL2Vycm9ycyc7XG5cblFVbml0Lm1vZHVsZSgnW2h0bWxiYXJzLXN5bnRheF0gVHJhdmVyc2FsIC0gbWFuaXB1bGF0aW5nJyk7XG5cblsnZW50ZXInLCAnZXhpdCddLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgUVVuaXQudGVzdChgWyR7ZXZlbnROYW1lfV0gUmVwbGFjaW5nIHNlbGYgaW4gYSBrZXkgKHJldHVybmluZyBudWxsKWAsIGFzc2VydCA9PiB7XG4gICAgbGV0IGFzdCA9IHBhcnNlKGA8eCB5PXt7en19IC8+YCk7XG4gICAgbGV0IGF0dHIgPSBhc3QuYm9keVswXS5hdHRyaWJ1dGVzWzBdO1xuXG4gICAgYXNzZXJ0LnRocm93cygoKSA9PiB7XG4gICAgICB0cmF2ZXJzZShhc3QsIHtcbiAgICAgICAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHtcbiAgICAgICAgICBbZXZlbnROYW1lXShub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5wYXRoLnBhcnRzWzBdID09PSAneicpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBjYW5ub3RSZW1vdmVOb2RlKGF0dHIudmFsdWUsIGF0dHIsICd2YWx1ZScpKTtcbiAgfSk7XG5cbiAgUVVuaXQudGVzdChgWyR7ZXZlbnROYW1lfV0gUmVwbGFjaW5nIHNlbGYgaW4gYSBrZXkgKHJldHVybmluZyBhbiBlbXB0eSBhcnJheSlgLCBhc3NlcnQgPT4ge1xuICAgIGxldCBhc3QgPSBwYXJzZShgPHggeT17e3p9fSAvPmApO1xuICAgIGxldCBhdHRyID0gYXN0LmJvZHlbMF0uYXR0cmlidXRlc1swXTtcblxuICAgIGFzc2VydC50aHJvd3MoKCkgPT4ge1xuICAgICAgdHJhdmVyc2UoYXN0LCB7XG4gICAgICAgIE11c3RhY2hlU3RhdGVtZW50OiB7XG4gICAgICAgICAgW2V2ZW50TmFtZV0obm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUucGF0aC5wYXJ0c1swXSA9PT0gJ3onKSB7XG4gICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGNhbm5vdFJlbW92ZU5vZGUoYXR0ci52YWx1ZSwgYXR0ciwgJ3ZhbHVlJykpO1xuICB9KTtcblxuICBRVW5pdC50ZXN0KGBbJHtldmVudE5hbWV9XSBSZXBsYWNpbmcgc2VsZiBpbiBhIGtleSAocmV0dXJuaW5nIGEgbm9kZSlgLCAoKSA9PiB7XG4gICAgbGV0IGFzdCA9IHBhcnNlKGA8eCB5PXt7en19IC8+YCk7XG5cbiAgICB0cmF2ZXJzZShhc3QsIHtcbiAgICAgIE11c3RhY2hlU3RhdGVtZW50OiB7XG4gICAgICAgIFtldmVudE5hbWVdKG5vZGUpIHtcbiAgICAgICAgICBpZiAobm9kZS5wYXRoLnBhcnRzWzBdID09PSAneicpIHtcbiAgICAgICAgICAgIHJldHVybiBiLm11c3RhY2hlKCdhJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhc3RFcXVhbChhc3QsIGA8eCB5PXt7YX19IC8+YCk7XG4gIH0pO1xuXG4gIFFVbml0LnRlc3QoYFske2V2ZW50TmFtZX1dIFJlcGxhY2luZyBzZWxmIGluIGEga2V5IChyZXR1cm5pbmcgYW4gYXJyYXkgd2l0aCBhIHNpbmdsZSBub2RlKWAsICgpID0+IHtcbiAgICBsZXQgYXN0ID0gcGFyc2UoYDx4IHk9e3t6fX0gLz5gKTtcblxuICAgIHRyYXZlcnNlKGFzdCwge1xuICAgICAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHtcbiAgICAgICAgW2V2ZW50TmFtZV0obm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLnBhdGgucGFydHNbMF0gPT09ICd6Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtiLm11c3RhY2hlKCdhJyldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYXN0RXF1YWwoYXN0LCBgPHggeT17e2F9fSAvPmApO1xuICB9KTtcblxuICBRVW5pdC50ZXN0KGBbJHtldmVudE5hbWV9XSBSZXBsYWNpbmcgc2VsZiBpbiBhIGtleSAocmV0dXJuaW5nIGFuIGFycmF5IHdpdGggbXVsdGlwbGUgbm9kZXMpYCwgYXNzZXJ0ID0+IHtcbiAgICBsZXQgYXN0ID0gcGFyc2UoYDx4IHk9e3t6fX0gLz5gKTtcbiAgICBsZXQgYXR0ciA9IGFzdC5ib2R5WzBdLmF0dHJpYnV0ZXNbMF07XG5cbiAgICBhc3NlcnQudGhyb3dzKCgpID0+IHtcbiAgICAgIHRyYXZlcnNlKGFzdCwge1xuICAgICAgICBNdXN0YWNoZVN0YXRlbWVudDoge1xuICAgICAgICAgIFtldmVudE5hbWVdKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlLnBhdGgucGFydHNbMF0gPT09ICd6Jykge1xuICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGIubXVzdGFjaGUoJ2EnKSxcbiAgICAgICAgICAgICAgICBiLm11c3RhY2hlKCdiJyksXG4gICAgICAgICAgICAgICAgYi5tdXN0YWNoZSgnYycpXG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBjYW5ub3RSZXBsYWNlTm9kZShhdHRyLnZhbHVlLCBhdHRyLCAndmFsdWUnKSk7XG4gIH0pO1xuXG5cbiAgUVVuaXQudGVzdChgWyR7ZXZlbnROYW1lfV0gUmVwbGFjaW5nIHNlbGYgaW4gYW4gYXJyYXkgKHJldHVybmluZyBudWxsKWAsICgpID0+IHtcbiAgICBsZXQgYXN0ID0gcGFyc2UoYHt7eH19e3t5fX17e3p9fWApO1xuXG4gICAgdHJhdmVyc2UoYXN0LCB7XG4gICAgICBNdXN0YWNoZVN0YXRlbWVudDoge1xuICAgICAgICBbZXZlbnROYW1lXShub2RlKSB7XG4gICAgICAgICAgaWYgKG5vZGUucGF0aC5wYXJ0c1swXSA9PT0gJ3knKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFzdEVxdWFsKGFzdCwgYHt7eH19e3t6fX1gKTtcbiAgfSk7XG5cbiAgUVVuaXQudGVzdChgWyR7ZXZlbnROYW1lfV0gUmVwbGFjaW5nIHNlbGYgaW4gYW4gYXJyYXkgKHJldHVybmluZyBhbiBlbXB0eSBhcnJheSlgLCAoKSA9PiB7XG4gICAgbGV0IGFzdCA9IHBhcnNlKGB7e3h9fXt7eX19e3t6fX1gKTtcblxuICAgIHRyYXZlcnNlKGFzdCwge1xuICAgICAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHtcbiAgICAgICAgW2V2ZW50TmFtZV0obm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLnBhdGgucGFydHNbMF0gPT09ICd5Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYXN0RXF1YWwoYXN0LCBge3t4fX17e3p9fWApO1xuICB9KTtcblxuICBRVW5pdC50ZXN0KGBbJHtldmVudE5hbWV9XSBSZXBsYWNpbmcgc2VsZiBpbiBhbiBhcnJheSAocmV0dXJuaW5nIGEgbm9kZSlgLCAoKSA9PiB7XG4gICAgbGV0IGFzdCA9IHBhcnNlKGB7e3h9fXt7eX19e3t6fX1gKTtcblxuICAgIHRyYXZlcnNlKGFzdCwge1xuICAgICAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHtcbiAgICAgICAgW2V2ZW50TmFtZV0obm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLnBhdGgucGFydHNbMF0gPT09ICd5Jykge1xuICAgICAgICAgICAgcmV0dXJuIGIubXVzdGFjaGUoJ2EnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFzdEVxdWFsKGFzdCwgYHt7eH19e3thfX17e3p9fWApO1xuICB9KTtcblxuICBRVW5pdC50ZXN0KGBbJHtldmVudE5hbWV9XSBSZXBsYWNpbmcgc2VsZiBpbiBhbiBhcnJheSAocmV0dXJuaW5nIGFuIGFycmF5IHdpdGggYSBzaW5nbGUgbm9kZSlgLCAoKSA9PiB7XG4gICAgbGV0IGFzdCA9IHBhcnNlKGB7e3h9fXt7eX19e3t6fX1gKTtcblxuICAgIHRyYXZlcnNlKGFzdCwge1xuICAgICAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHtcbiAgICAgICAgW2V2ZW50TmFtZV0obm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLnBhdGgucGFydHNbMF0gPT09ICd5Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtiLm11c3RhY2hlKCdhJyldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYXN0RXF1YWwoYXN0LCBge3t4fX17e2F9fXt7en19YCk7XG4gIH0pO1xuXG4gIFFVbml0LnRlc3QoYFske2V2ZW50TmFtZX1dIFJlcGxhY2luZyBzZWxmIGluIGFuIGFycmF5IChyZXR1cm5pbmcgYW4gYXJyYXkgd2l0aCBtdWx0aXBsZSBub2RlcylgLCAoKSA9PiB7XG4gICAgbGV0IGFzdCA9IHBhcnNlKGB7e3h9fXt7eX19e3t6fX1gKTtcblxuICAgIHRyYXZlcnNlKGFzdCwge1xuICAgICAgTXVzdGFjaGVTdGF0ZW1lbnQ6IHtcbiAgICAgICAgW2V2ZW50TmFtZV0obm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLnBhdGgucGFydHNbMF0gPT09ICd5Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgYi5tdXN0YWNoZSgnYScpLFxuICAgICAgICAgICAgICBiLm11c3RhY2hlKCdiJyksXG4gICAgICAgICAgICAgIGIubXVzdGFjaGUoJ2MnKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFzdEVxdWFsKGFzdCwgYHt7eH19e3thfX17e2J9fXt7Y319e3t6fX1gKTtcbiAgfSk7XG59KTtcblxuXG5RVW5pdC5tb2R1bGUoJ1todG1sYmFycy1zeW50YXhdIFRyYXZlcnNhbCAtIG1hbmlwdWxhdGluZyAoZWRnZSBjYXNlcyknKTtcblxuUVVuaXQudGVzdCgnSW5zaWRlIG9mIGEgYmxvY2snLCAoKSA9PiB7XG4gIGxldCBhc3QgPSBwYXJzZShge3t5fX17eyN3fX17e3h9fXt7eX19e3t6fX17ey93fX1gKTtcblxuICB0cmF2ZXJzZShhc3QsIHtcbiAgICBNdXN0YWNoZVN0YXRlbWVudChub2RlKSB7XG4gICAgICBpZiAobm9kZS5wYXRoLnBhcnRzWzBdID09PSAneScpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBiLm11c3RhY2hlKCdhJyksXG4gICAgICAgICAgYi5tdXN0YWNoZSgnYicpLFxuICAgICAgICAgIGIubXVzdGFjaGUoJ2MnKVxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgYXN0RXF1YWwoYXN0LCBge3thfX17e2J9fXt7Y319e3sjd319e3t4fX17e2F9fXt7Yn19e3tjfX17e3p9fXt7L3d9fWApO1xufSk7XG5cblFVbml0LnRlc3QoJ0V4aXQgZXZlbnQgaXMgbm90IHRyaWdnZXJlZCBpZiB0aGUgbm9kZSBpcyByZXBsYWNlZCBkdXJpbmcgdGhlIGVudGVyIGV2ZW50JywgYXNzZXJ0ID0+IHtcbiAgbGV0IGFzdCA9IHBhcnNlKGB7e3h9fWApO1xuICBsZXQgZGlkRXhpdCA9IGZhbHNlO1xuXG4gIHRyYXZlcnNlKGFzdCwge1xuICAgIE11c3RhY2hlU3RhdGVtZW50OiB7XG4gICAgICBlbnRlcigpIHsgcmV0dXJuIGIubXVzdGFjaGUoJ3knKTsgfSxcbiAgICAgIGV4aXQoKSB7IGRpZEV4aXQgPSB0cnVlOyB9XG4gICAgfVxuICB9KTtcblxuICBhc3NlcnQuc3RyaWN0RXF1YWwoZGlkRXhpdCwgZmFsc2UpO1xufSk7XG4iXX0=
define('htmlbars-syntax-tests/traversal/manipulating-node-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/traversal');
  QUnit.test('htmlbars-syntax-tests/traversal/manipulating-node-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/traversal/manipulating-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvbWFuaXB1bGF0aW5nLW5vZGUtdGVzdC5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUN6RCxPQUFLLENBQUMsSUFBSSxDQUFDLDhFQUE4RSxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQzFHLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLCtFQUErRSxDQUFDLENBQUM7R0FDbEcsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvbWFuaXB1bGF0aW5nLW5vZGUtdGVzdC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvbWFuaXB1bGF0aW5nLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC9tYW5pcHVsYXRpbmctbm9kZS10ZXN0LmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-syntax-tests/traversal/visiting-keys-node-test', ['exports', '../../htmlbars-syntax'], function (exports, _htmlbarsSyntax) {

  function traversalEqual(node, expectedTraversal) {
    var actualTraversal = [];

    _htmlbarsSyntax.traverse(node, {
      All: {
        enter: function (node) {
          actualTraversal.push(['enter', node]);
        },
        exit: function (node) {
          actualTraversal.push(['exit', node]);
        },
        keys: {
          All: {
            enter: function (node, key) {
              actualTraversal.push(['enter:' + key, node]);
            },
            exit: function (node, key) {
              actualTraversal.push(['exit:' + key, node]);
            }
          }
        }
      }
    });

    deepEqual(actualTraversal.map(function (a) {
      return a[0] + ' ' + a[1].type;
    }), expectedTraversal.map(function (a) {
      return a[0] + ' ' + a[1].type;
    }));

    var nodesEqual = true;

    for (var i = 0; i < actualTraversal.length; i++) {
      if (actualTraversal[i][1] !== expectedTraversal[i][1]) {
        nodesEqual = false;
        break;
      }
    }

    ok(nodesEqual, "Actual nodes match expected nodes");
  }

  QUnit.module('[htmlbars-syntax] Traversal - visiting keys');

  test('Blocks', function () {
    var ast = _htmlbarsSyntax.parse('{{#block param1 param2 key1=value key2=value}}<b></b><b></b>{{/block}}');

    traversalEqual(ast, [['enter', ast], ['enter:body', ast], ['enter', ast.body[0]], ['enter:path', ast.body[0]], ['enter', ast.body[0].path], ['exit', ast.body[0].path], ['exit:path', ast.body[0]], ['enter:params', ast.body[0]], ['enter', ast.body[0].params[0]], ['exit', ast.body[0].params[0]], ['enter', ast.body[0].params[1]], ['exit', ast.body[0].params[1]], ['exit:params', ast.body[0]], ['enter:hash', ast.body[0]], ['enter', ast.body[0].hash], ['enter:pairs', ast.body[0].hash], ['enter', ast.body[0].hash.pairs[0]], ['enter:value', ast.body[0].hash.pairs[0]], ['enter', ast.body[0].hash.pairs[0].value], ['exit', ast.body[0].hash.pairs[0].value], ['exit:value', ast.body[0].hash.pairs[0]], ['exit', ast.body[0].hash.pairs[0]], ['enter', ast.body[0].hash.pairs[1]], ['enter:value', ast.body[0].hash.pairs[1]], ['enter', ast.body[0].hash.pairs[1].value], ['exit', ast.body[0].hash.pairs[1].value], ['exit:value', ast.body[0].hash.pairs[1]], ['exit', ast.body[0].hash.pairs[1]], ['exit:pairs', ast.body[0].hash], ['exit', ast.body[0].hash], ['exit:hash', ast.body[0]], ['enter:program', ast.body[0]], ['enter', ast.body[0].program], ['enter:body', ast.body[0].program], ['enter', ast.body[0].program.body[0]], ['enter:attributes', ast.body[0].program.body[0]], ['exit:attributes', ast.body[0].program.body[0]], ['enter:modifiers', ast.body[0].program.body[0]], ['exit:modifiers', ast.body[0].program.body[0]], ['enter:children', ast.body[0].program.body[0]], ['exit:children', ast.body[0].program.body[0]], ['exit', ast.body[0].program.body[0]], ['enter', ast.body[0].program.body[1]], ['enter:attributes', ast.body[0].program.body[1]], ['exit:attributes', ast.body[0].program.body[1]], ['enter:modifiers', ast.body[0].program.body[1]], ['exit:modifiers', ast.body[0].program.body[1]], ['enter:children', ast.body[0].program.body[1]], ['exit:children', ast.body[0].program.body[1]], ['exit', ast.body[0].program.body[1]], ['exit:body', ast.body[0].program], ['exit', ast.body[0].program], ['exit:program', ast.body[0]], ['exit', ast.body[0]], ['exit:body', ast], ['exit', ast]]);
  });
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-syntax-tests/traversal/visiting-keys-node-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/traversal');
  QUnit.test('htmlbars-syntax-tests/traversal/visiting-keys-node-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/traversal/visiting-keys-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvdmlzaXRpbmcta2V5cy1ub2RlLXRlc3QuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFDekQsT0FBSyxDQUFDLElBQUksQ0FBQywrRUFBK0UsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUMzRyxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxnRkFBZ0YsQ0FBQyxDQUFDO0dBQ25HLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvdHJhdmVyc2FsL3Zpc2l0aW5nLWtleXMtbm9kZS10ZXN0LmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbCcpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC92aXNpdGluZy1rZXlzLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC92aXNpdGluZy1rZXlzLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/traversal/visiting-node-test', ['exports', '../../htmlbars-syntax'], function (exports, _htmlbarsSyntax) {

  function traversalEqual(node, expectedTraversal) {
    var actualTraversal = [];

    _htmlbarsSyntax.traverse(node, {
      All: {
        enter: function (node) {
          actualTraversal.push(['enter', node]);
        },
        exit: function (node) {
          actualTraversal.push(['exit', node]);
        }
      }
    });

    deepEqual(actualTraversal.map(function (a) {
      return a[0] + ' ' + a[1].type;
    }), expectedTraversal.map(function (a) {
      return a[0] + ' ' + a[1].type;
    }));

    var nodesEqual = true;

    for (var i = 0; i < actualTraversal.length; i++) {
      if (actualTraversal[i][1] !== expectedTraversal[i][1]) {
        nodesEqual = false;
        break;
      }
    }

    ok(nodesEqual, "Actual nodes match expected nodes");
  }

  QUnit.module('[htmlbars-syntax] Traversal - visiting');

  test('Elements and attributes', function () {
    var ast = _htmlbarsSyntax.parse('<div id="id" class="large {{classes}}" value={{value}}><b></b><b></b></div>');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].attributes[0]], ['enter', ast.body[0].attributes[0].value], ['exit', ast.body[0].attributes[0].value], ['exit', ast.body[0].attributes[0]], ['enter', ast.body[0].attributes[1]], ['enter', ast.body[0].attributes[1].value], ['enter', ast.body[0].attributes[1].value.parts[0]], ['exit', ast.body[0].attributes[1].value.parts[0]], ['enter', ast.body[0].attributes[1].value.parts[1]], ['exit', ast.body[0].attributes[1].value.parts[1]], ['exit', ast.body[0].attributes[1].value], ['exit', ast.body[0].attributes[1]], ['enter', ast.body[0].attributes[2]], ['enter', ast.body[0].attributes[2].value], ['enter', ast.body[0].attributes[2].value.path], ['exit', ast.body[0].attributes[2].value.path], ['enter', ast.body[0].attributes[2].value.hash], ['exit', ast.body[0].attributes[2].value.hash], ['exit', ast.body[0].attributes[2].value], ['exit', ast.body[0].attributes[2]], ['enter', ast.body[0].children[0]], ['exit', ast.body[0].children[0]], ['enter', ast.body[0].children[1]], ['exit', ast.body[0].children[1]], ['exit', ast.body[0]], ['exit', ast]]);
  });

  test('Element modifiers', function () {
    var ast = _htmlbarsSyntax.parse('<div {{modifier}}{{modifier param1 param2 key1=value key2=value}}></div>');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].modifiers[0]], ['enter', ast.body[0].modifiers[0].path], ['exit', ast.body[0].modifiers[0].path], ['enter', ast.body[0].modifiers[0].hash], ['exit', ast.body[0].modifiers[0].hash], ['exit', ast.body[0].modifiers[0]], ['enter', ast.body[0].modifiers[1]], ['enter', ast.body[0].modifiers[1].path], ['exit', ast.body[0].modifiers[1].path], ['enter', ast.body[0].modifiers[1].params[0]], ['exit', ast.body[0].modifiers[1].params[0]], ['enter', ast.body[0].modifiers[1].params[1]], ['exit', ast.body[0].modifiers[1].params[1]], ['enter', ast.body[0].modifiers[1].hash], ['enter', ast.body[0].modifiers[1].hash.pairs[0]], ['enter', ast.body[0].modifiers[1].hash.pairs[0].value], ['exit', ast.body[0].modifiers[1].hash.pairs[0].value], ['exit', ast.body[0].modifiers[1].hash.pairs[0]], ['enter', ast.body[0].modifiers[1].hash.pairs[1]], ['enter', ast.body[0].modifiers[1].hash.pairs[1].value], ['exit', ast.body[0].modifiers[1].hash.pairs[1].value], ['exit', ast.body[0].modifiers[1].hash.pairs[1]], ['exit', ast.body[0].modifiers[1].hash], ['exit', ast.body[0].modifiers[1]], ['exit', ast.body[0]], ['exit', ast]]);
  });

  test('Blocks', function () {
    var ast = _htmlbarsSyntax.parse('{{#block}}{{/block}}' + '{{#block param1 param2 key1=value key2=value}}<b></b><b></b>{{/block}}');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].path], ['exit', ast.body[0].path], ['enter', ast.body[0].hash], ['exit', ast.body[0].hash], ['enter', ast.body[0].program], ['exit', ast.body[0].program], ['exit', ast.body[0]], ['enter', ast.body[1]], ['enter', ast.body[1].path], ['exit', ast.body[1].path], ['enter', ast.body[1].params[0]], ['exit', ast.body[1].params[0]], ['enter', ast.body[1].params[1]], ['exit', ast.body[1].params[1]], ['enter', ast.body[1].hash], ['enter', ast.body[1].hash.pairs[0]], ['enter', ast.body[1].hash.pairs[0].value], ['exit', ast.body[1].hash.pairs[0].value], ['exit', ast.body[1].hash.pairs[0]], ['enter', ast.body[1].hash.pairs[1]], ['enter', ast.body[1].hash.pairs[1].value], ['exit', ast.body[1].hash.pairs[1].value], ['exit', ast.body[1].hash.pairs[1]], ['exit', ast.body[1].hash], ['enter', ast.body[1].program], ['enter', ast.body[1].program.body[0]], ['exit', ast.body[1].program.body[0]], ['enter', ast.body[1].program.body[1]], ['exit', ast.body[1].program.body[1]], ['exit', ast.body[1].program], ['exit', ast.body[1]], ['exit', ast]]);
  });

  test('Mustaches', function () {
    var ast = _htmlbarsSyntax.parse('{{mustache}}' + '{{mustache param1 param2 key1=value key2=value}}');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].path], ['exit', ast.body[0].path], ['enter', ast.body[0].hash], ['exit', ast.body[0].hash], ['exit', ast.body[0]], ['enter', ast.body[1]], ['enter', ast.body[1].path], ['exit', ast.body[1].path], ['enter', ast.body[1].params[0]], ['exit', ast.body[1].params[0]], ['enter', ast.body[1].params[1]], ['exit', ast.body[1].params[1]], ['enter', ast.body[1].hash], ['enter', ast.body[1].hash.pairs[0]], ['enter', ast.body[1].hash.pairs[0].value], ['exit', ast.body[1].hash.pairs[0].value], ['exit', ast.body[1].hash.pairs[0]], ['enter', ast.body[1].hash.pairs[1]], ['enter', ast.body[1].hash.pairs[1].value], ['exit', ast.body[1].hash.pairs[1].value], ['exit', ast.body[1].hash.pairs[1]], ['exit', ast.body[1].hash], ['exit', ast.body[1]], ['exit', ast]]);
  });

  test('Components', function () {
    var ast = _htmlbarsSyntax.parse('<x-block />' + '<x-block></x-block>' + '<x-block id="id" class="large {{classes}}" value={{value}}><b></b><b></b></x-block>');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].program], ['exit', ast.body[0].program], ['exit', ast.body[0]], ['enter', ast.body[1]], ['enter', ast.body[1].program], ['exit', ast.body[1].program], ['exit', ast.body[1]], ['enter', ast.body[2]], ['enter', ast.body[2].attributes[0]], ['enter', ast.body[2].attributes[0].value], ['exit', ast.body[2].attributes[0].value], ['exit', ast.body[2].attributes[0]], ['enter', ast.body[2].attributes[1]], ['enter', ast.body[2].attributes[1].value], ['enter', ast.body[2].attributes[1].value.parts[0]], ['exit', ast.body[2].attributes[1].value.parts[0]], ['enter', ast.body[2].attributes[1].value.parts[1]], ['exit', ast.body[2].attributes[1].value.parts[1]], ['exit', ast.body[2].attributes[1].value], ['exit', ast.body[2].attributes[1]], ['enter', ast.body[2].attributes[2]], ['enter', ast.body[2].attributes[2].value], ['enter', ast.body[2].attributes[2].value.path], ['exit', ast.body[2].attributes[2].value.path], ['enter', ast.body[2].attributes[2].value.hash], ['exit', ast.body[2].attributes[2].value.hash], ['exit', ast.body[2].attributes[2].value], ['exit', ast.body[2].attributes[2]], ['enter', ast.body[2].program], ['enter', ast.body[2].program.body[0]], ['exit', ast.body[2].program.body[0]], ['enter', ast.body[2].program.body[1]], ['exit', ast.body[2].program.body[1]], ['exit', ast.body[2].program], ['exit', ast.body[2]], ['exit', ast]]);
  });

  test('Nested helpers', function () {
    var ast = _htmlbarsSyntax.parse('{{helper\n    (helper param1 param2 key1=value key2=value)\n    key1=(helper param)\n    key2=(helper key=(helper param))\n  }}');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].path], ['exit', ast.body[0].path], ['enter', ast.body[0].params[0]], ['enter', ast.body[0].params[0].path], ['exit', ast.body[0].params[0].path], ['enter', ast.body[0].params[0].params[0]], ['exit', ast.body[0].params[0].params[0]], ['enter', ast.body[0].params[0].params[1]], ['exit', ast.body[0].params[0].params[1]], ['enter', ast.body[0].params[0].hash], ['enter', ast.body[0].params[0].hash.pairs[0]], ['enter', ast.body[0].params[0].hash.pairs[0].value], ['exit', ast.body[0].params[0].hash.pairs[0].value], ['exit', ast.body[0].params[0].hash.pairs[0]], ['enter', ast.body[0].params[0].hash.pairs[1]], ['enter', ast.body[0].params[0].hash.pairs[1].value], ['exit', ast.body[0].params[0].hash.pairs[1].value], ['exit', ast.body[0].params[0].hash.pairs[1]], ['exit', ast.body[0].params[0].hash], ['exit', ast.body[0].params[0]], ['enter', ast.body[0].hash], ['enter', ast.body[0].hash.pairs[0]], ['enter', ast.body[0].hash.pairs[0].value], ['enter', ast.body[0].hash.pairs[0].value.path], ['exit', ast.body[0].hash.pairs[0].value.path], ['enter', ast.body[0].hash.pairs[0].value.params[0]], ['exit', ast.body[0].hash.pairs[0].value.params[0]], ['enter', ast.body[0].hash.pairs[0].value.hash], ['exit', ast.body[0].hash.pairs[0].value.hash], ['exit', ast.body[0].hash.pairs[0].value], ['exit', ast.body[0].hash.pairs[0]], ['enter', ast.body[0].hash.pairs[1]], ['enter', ast.body[0].hash.pairs[1].value], ['enter', ast.body[0].hash.pairs[1].value.path], ['exit', ast.body[0].hash.pairs[1].value.path], ['enter', ast.body[0].hash.pairs[1].value.hash], ['enter', ast.body[0].hash.pairs[1].value.hash.pairs[0]], ['enter', ast.body[0].hash.pairs[1].value.hash.pairs[0].value], ['enter', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.path], ['exit', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.path], ['enter', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.params[0]], ['exit', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.params[0]], ['enter', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.hash], ['exit', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.hash], ['exit', ast.body[0].hash.pairs[1].value.hash.pairs[0].value], ['exit', ast.body[0].hash.pairs[1].value.hash.pairs[0]], ['exit', ast.body[0].hash.pairs[1].value.hash], ['exit', ast.body[0].hash.pairs[1].value], ['exit', ast.body[0].hash.pairs[1]], ['exit', ast.body[0].hash], ['exit', ast.body[0]], ['exit', ast]]);
  });

  test('Comments', function () {
    var ast = _htmlbarsSyntax.parse('<!-- HTML comment -->{{!-- Handlebars comment --}}');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['exit', ast.body[0]],
    // TODO: Ensure Handlebars comments are in the AST.
    // ['enter', ast.body[1]],
    // ['exit',  ast.body[1]],
    ['exit', ast]]);
  });
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-syntax-tests/traversal/visiting-node-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/traversal');
  QUnit.test('htmlbars-syntax-tests/traversal/visiting-node-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/traversal/visiting-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvdmlzaXRpbmctbm9kZS10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0FBQ3pELE9BQUssQ0FBQyxJQUFJLENBQUMsMEVBQTBFLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDdEcsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsMkVBQTJFLENBQUMsQ0FBQztHQUM5RixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC92aXNpdGluZy1ub2RlLXRlc3QuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMvdHJhdmVyc2FsJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvdHJhdmVyc2FsL3Zpc2l0aW5nLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC92aXNpdGluZy1ub2RlLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/traversal/walker-node-test', ['exports', '../../htmlbars-syntax'], function (exports, _htmlbarsSyntax) {

  function compareWalkedNodes(html, expected) {
    var ast = _htmlbarsSyntax.parse(html);
    var walker = new _htmlbarsSyntax.Walker();
    var nodes = [];

    walker.visit(ast, function (node) {
      nodes.push(node.type);
    });

    deepEqual(nodes, expected);
  }

  QUnit.module('[htmlbars-syntax] (Legacy) Traversal - Walker');

  test('walks elements', function () {
    compareWalkedNodes('<div><li></li></div>', ['Program', 'ElementNode', 'ElementNode']);
  });

  test('walks blocks', function () {
    compareWalkedNodes('{{#foo}}<li></li>{{/foo}}', ['Program', 'BlockStatement', 'Program', 'ElementNode']);
  });

  test('walks components', function () {
    compareWalkedNodes('<my-foo><li></li></my-foo>', ['Program', 'ComponentNode', 'Program', 'ElementNode']);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvd2Fsa2VyLW5vZGUtdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLFdBQVMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUMxQyxRQUFJLEdBQUcsR0FBRyxnQkFISCxLQUFLLENBR0ksSUFBSSxDQUFDLENBQUM7QUFDdEIsUUFBSSxNQUFNLEdBQUcsb0JBSkMsTUFBTSxFQUlLLENBQUM7QUFDMUIsUUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDOztBQUVmLFVBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFVBQVMsSUFBSSxFQUFFO0FBQy9CLFdBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3ZCLENBQUMsQ0FBQzs7QUFFSCxhQUFTLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0dBQzVCOztBQUVELE9BQUssQ0FBQyxNQUFNLENBQUMsK0NBQStDLENBQUMsQ0FBQzs7QUFFOUQsTUFBSSxDQUFDLGdCQUFnQixFQUFFLFlBQVc7QUFDaEMsc0JBQWtCLENBQUMsc0JBQXNCLEVBQUUsQ0FDekMsU0FBUyxFQUNULGFBQWEsRUFDYixhQUFhLENBQ2QsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxjQUFjLEVBQUUsWUFBVztBQUM5QixzQkFBa0IsQ0FBQywyQkFBMkIsRUFBRSxDQUM5QyxTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxhQUFhLENBQ2QsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxrQkFBa0IsRUFBRSxZQUFXO0FBQ2xDLHNCQUFrQixDQUFDLDRCQUE0QixFQUFFLENBQy9DLFNBQVMsRUFDVCxlQUFlLEVBQ2YsU0FBUyxFQUNULGFBQWEsQ0FDZCxDQUFDLENBQUM7R0FDSixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC93YWxrZXItbm9kZS10ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2UsIFdhbGtlciB9IGZyb20gJy4uLy4uL2h0bWxiYXJzLXN5bnRheCc7XG5cbmZ1bmN0aW9uIGNvbXBhcmVXYWxrZWROb2RlcyhodG1sLCBleHBlY3RlZCkge1xuICB2YXIgYXN0ID0gcGFyc2UoaHRtbCk7XG4gIHZhciB3YWxrZXIgPSBuZXcgV2Fsa2VyKCk7XG4gIHZhciBub2RlcyA9IFtdO1xuXG4gIHdhbGtlci52aXNpdChhc3QsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUudHlwZSk7XG4gIH0pO1xuXG4gIGRlZXBFcXVhbChub2RlcywgZXhwZWN0ZWQpO1xufVxuXG5RVW5pdC5tb2R1bGUoJ1todG1sYmFycy1zeW50YXhdIChMZWdhY3kpIFRyYXZlcnNhbCAtIFdhbGtlcicpO1xuXG50ZXN0KCd3YWxrcyBlbGVtZW50cycsIGZ1bmN0aW9uKCkge1xuICBjb21wYXJlV2Fsa2VkTm9kZXMoJzxkaXY+PGxpPjwvbGk+PC9kaXY+JywgW1xuICAgICdQcm9ncmFtJyxcbiAgICAnRWxlbWVudE5vZGUnLFxuICAgICdFbGVtZW50Tm9kZSdcbiAgXSk7XG59KTtcblxudGVzdCgnd2Fsa3MgYmxvY2tzJywgZnVuY3Rpb24oKSB7XG4gIGNvbXBhcmVXYWxrZWROb2Rlcygne3sjZm9vfX08bGk+PC9saT57ey9mb299fScsIFtcbiAgICAnUHJvZ3JhbScsXG4gICAgJ0Jsb2NrU3RhdGVtZW50JyxcbiAgICAnUHJvZ3JhbScsXG4gICAgJ0VsZW1lbnROb2RlJ1xuICBdKTtcbn0pO1xuXG50ZXN0KCd3YWxrcyBjb21wb25lbnRzJywgZnVuY3Rpb24oKSB7XG4gIGNvbXBhcmVXYWxrZWROb2RlcygnPG15LWZvbz48bGk+PC9saT48L215LWZvbz4nLCBbXG4gICAgJ1Byb2dyYW0nLFxuICAgICdDb21wb25lbnROb2RlJyxcbiAgICAnUHJvZ3JhbScsXG4gICAgJ0VsZW1lbnROb2RlJ1xuICBdKTtcbn0pO1xuIl19
define('htmlbars-syntax-tests/traversal/walker-node-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-syntax-tests/traversal');
  QUnit.test('htmlbars-syntax-tests/traversal/walker-node-test.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-syntax-tests/traversal/walker-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvd2Fsa2VyLW5vZGUtdGVzdC5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUN6RCxPQUFLLENBQUMsSUFBSSxDQUFDLHdFQUF3RSxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ3BHLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLHlFQUF5RSxDQUFDLENBQUM7R0FDNUYsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvd2Fsa2VyLW5vZGUtdGVzdC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvd2Fsa2VyLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC93YWxrZXItbm9kZS10ZXN0LmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==