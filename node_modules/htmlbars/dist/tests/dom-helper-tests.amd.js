define('dom-helper-tests/dom-helper-node-test', ['exports', '../dom-helper'], function (exports, _domHelper) {

  var dom;

  QUnit.module('DOM Helper (Node)', {
    afterEach: function () {
      dom = null;
    }
  });

  if (typeof document === 'undefined') {
    test('it throws when instantiated without document', function () {
      var throws = false;
      try {
        dom = new _domHelper.default();
      } catch (e) {
        throws = true;
      }
      ok(throws, 'dom helper cannot instantiate');
    });
  }

  test('it instantiates with a stub document', function () {
    var called = false;
    var element = {};
    var doc = {
      createElement: function () {
        called = true;
        return element;
      }
    };
    dom = new _domHelper.default(doc);
    ok(dom, 'dom helper can instantiate');
    var createdElement = dom.createElement('div');
    equal(createdElement, element, 'dom helper calls passed stub');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci1ub2RlLXRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxNQUFJLEdBQUcsQ0FBQzs7QUFFUixPQUFLLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFO0FBQ2hDLGFBQVMsRUFBRSxZQUFXO0FBQ3BCLFNBQUcsR0FBRyxJQUFJLENBQUM7S0FDWjtHQUNGLENBQUMsQ0FBQzs7QUFFSCxNQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsRUFBRTtBQUNuQyxRQUFJLENBQUMsOENBQThDLEVBQUUsWUFBVTtBQUM3RCxVQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDbkIsVUFBSTtBQUNGLFdBQUcsR0FBRyx3QkFBZSxDQUFDO09BQ3ZCLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDVixjQUFNLEdBQUcsSUFBSSxDQUFDO09BQ2Y7QUFDRCxRQUFFLENBQUMsTUFBTSxFQUFFLCtCQUErQixDQUFDLENBQUM7S0FDN0MsQ0FBQyxDQUFDO0dBQ0o7O0FBRUQsTUFBSSxDQUFDLHNDQUFzQyxFQUFFLFlBQVU7QUFDckQsUUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0FBQ25CLFFBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUNqQixRQUFJLEdBQUcsR0FBRztBQUNSLG1CQUFhLEVBQUUsWUFBVTtBQUN2QixjQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ2QsZUFBTyxPQUFPLENBQUM7T0FDaEI7S0FDRixDQUFDO0FBQ0YsT0FBRyxHQUFHLHVCQUFjLEdBQUcsQ0FBQyxDQUFDO0FBQ3pCLE1BQUUsQ0FBQyxHQUFHLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztBQUN0QyxRQUFJLGNBQWMsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzlDLFNBQUssQ0FBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLDhCQUE4QixDQUFDLENBQUM7R0FDaEUsQ0FBQyxDQUFDIiwiZmlsZSI6ImRvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci1ub2RlLXRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRE9NSGVscGVyIGZyb20gXCIuLi9kb20taGVscGVyXCI7XG5cbnZhciBkb207XG5cblFVbml0Lm1vZHVsZSgnRE9NIEhlbHBlciAoTm9kZSknLCB7XG4gIGFmdGVyRWFjaDogZnVuY3Rpb24oKSB7XG4gICAgZG9tID0gbnVsbDtcbiAgfVxufSk7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRlc3QoJ2l0IHRocm93cyB3aGVuIGluc3RhbnRpYXRlZCB3aXRob3V0IGRvY3VtZW50JywgZnVuY3Rpb24oKXtcbiAgICB2YXIgdGhyb3dzID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgIGRvbSA9IG5ldyBET01IZWxwZXIoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvd3MgPSB0cnVlO1xuICAgIH1cbiAgICBvayh0aHJvd3MsICdkb20gaGVscGVyIGNhbm5vdCBpbnN0YW50aWF0ZScpO1xuICB9KTtcbn1cblxudGVzdCgnaXQgaW5zdGFudGlhdGVzIHdpdGggYSBzdHViIGRvY3VtZW50JywgZnVuY3Rpb24oKXtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICB2YXIgZWxlbWVudCA9IHt9O1xuICB2YXIgZG9jID0ge1xuICAgIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uKCl7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuICB9O1xuICBkb20gPSBuZXcgRE9NSGVscGVyKGRvYyk7XG4gIG9rKGRvbSwgJ2RvbSBoZWxwZXIgY2FuIGluc3RhbnRpYXRlJyk7XG4gIHZhciBjcmVhdGVkRWxlbWVudCA9IGRvbS5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZXF1YWwoY3JlYXRlZEVsZW1lbnQsIGVsZW1lbnQsICdkb20gaGVscGVyIGNhbGxzIHBhc3NlZCBzdHViJyk7XG59KTtcbiJdfQ==
define('dom-helper-tests/dom-helper-node-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - dom-helper-tests');
  QUnit.test('dom-helper-tests/dom-helper-node-test.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper-tests/dom-helper-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci1ub2RlLXRlc3QuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDMUMsT0FBSyxDQUFDLElBQUksQ0FBQyw2REFBNkQsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUN6RixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSw4REFBOEQsQ0FBQyxDQUFDO0dBQ2pGLENBQUMsQ0FBQyIsImZpbGUiOiJkb20taGVscGVyLXRlc3RzL2RvbS1oZWxwZXItbm9kZS10ZXN0LmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gZG9tLWhlbHBlci10ZXN0cycpO1xuUVVuaXQudGVzdCgnZG9tLWhlbHBlci10ZXN0cy9kb20taGVscGVyLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnZG9tLWhlbHBlci10ZXN0cy9kb20taGVscGVyLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define("dom-helper-tests/dom-helper-test", ["exports", "../dom-helper", "../htmlbars-test-helpers"], function (exports, _domHelper, _htmlbarsTestHelpers) {

  var xhtmlNamespace = "http://www.w3.org/1999/xhtml",
      xlinkNamespace = "http://www.w3.org/1999/xlink",
      svgNamespace = "http://www.w3.org/2000/svg";

  var foreignNamespaces = ['foreignObject', 'desc', 'title'];

  var dom, i;

  // getAttributes may return null or "" for nonexistent attributes,
  // depending on the browser.  So we find it out here and use it later.
  var disabledAbsentValue = (function () {
    var div = document.createElement("input");
    return div.getAttribute("disabled");
  })();

  function runForeignNamespaceTests(foreignNamespace) {
    test("#createElement of div with " + foreignNamespace + " contextual element", function () {
      var node = dom.createElement('div', document.createElementNS(svgNamespace, foreignNamespace));
      equal(node.tagName, 'DIV');
      equal(node.namespaceURI, xhtmlNamespace);
    });

    test("#parseHTML of div with " + foreignNamespace, function () {
      dom.setNamespace(xhtmlNamespace);
      var foreignObject = document.createElementNS(svgNamespace, foreignNamespace),
          nodes = dom.parseHTML('<div></div>', foreignObject).childNodes;
      equal(nodes[0].tagName, 'DIV');
      equal(nodes[0].namespaceURI, xhtmlNamespace);
    });
  }

  QUnit.module('DOM Helper', {
    beforeEach: function () {
      dom = new _domHelper.default();
    },
    afterEach: function () {
      dom = null;
    }
  });

  test('#createElement', function () {
    var node = dom.createElement('div');
    equal(node.tagName, 'DIV');
    _htmlbarsTestHelpers.equalHTML(node, '<div></div>');
  });

  test('#childAtIndex', function () {
    var node = dom.createElement('div');

    var child1 = dom.createElement('p');
    var child2 = dom.createElement('img');

    strictEqual(dom.childAtIndex(node, 0), null);
    strictEqual(dom.childAtIndex(node, 1), null);
    strictEqual(dom.childAtIndex(node, 2), null);

    dom.appendChild(node, child1);
    strictEqual(dom.childAtIndex(node, 0).tagName, 'P');
    strictEqual(dom.childAtIndex(node, 1), null);
    strictEqual(dom.childAtIndex(node, 2), null);

    dom.insertBefore(node, child2, child1);
    strictEqual(dom.childAtIndex(node, 0).tagName, 'IMG');
    strictEqual(dom.childAtIndex(node, 1).tagName, 'P');
    strictEqual(dom.childAtIndex(node, 2), null);
  });

  test('#appendText adds text', function () {
    var node = dom.createElement('div');
    var text = dom.appendText(node, 'Howdy');
    ok(!!text, 'returns node');
    _htmlbarsTestHelpers.equalHTML(node, '<div>Howdy</div>');
  });

  test('#setAttribute', function () {
    var node = dom.createElement('div');
    dom.setAttribute(node, 'id', 'super-tag');
    _htmlbarsTestHelpers.equalHTML(node, '<div id="super-tag"></div>');
    dom.setAttribute(node, 'id', null);
    _htmlbarsTestHelpers.equalHTML(node, '<div id="null"></div>');

    node = dom.createElement('input');
    ok(node.getAttribute('disabled') === disabledAbsentValue, 'precond: disabled is absent');
    dom.setAttribute(node, 'disabled', true);
    ok(node.getAttribute('disabled') !== disabledAbsentValue, 'disabled set to true is present');
    dom.setAttribute(node, 'disabled', false);
    ok(node.getAttribute('disabled') !== disabledAbsentValue, 'disabled set to false is present');
  });

  test('#setAttributeNS', function () {
    var node = dom.createElement('svg');
    dom.setAttributeNS(node, xlinkNamespace, 'xlink:href', 'super-fun');
    // chrome adds (xmlns:xlink="http://www.w3.org/1999/xlink") property while others don't
    // thus equalHTML is not useful
    var el = document.createElement('div');
    el.appendChild(node);
    // phantomjs omits the prefix, thus we can't find xlink:
    ok(el.innerHTML.indexOf('href="super-fun"') > 0);
    dom.setAttributeNS(node, xlinkNamespace, 'href', null);

    ok(el.innerHTML.indexOf('href="null"') > 0);
  });

  test('#getElementById', function () {
    var parentNode = dom.createElement('div'),
        childNode = dom.createElement('div');
    dom.setAttribute(parentNode, 'id', 'parent');
    dom.setAttribute(childNode, 'id', 'child');
    dom.appendChild(parentNode, childNode);
    dom.document.body.appendChild(parentNode);
    _htmlbarsTestHelpers.equalHTML(dom.getElementById('child'), '<div id="child"></div>');
    dom.document.body.removeChild(parentNode);
  });

  test('#setPropertyStrict', function () {
    var node = dom.createElement('div');
    dom.setPropertyStrict(node, 'id', 'super-tag');
    _htmlbarsTestHelpers.equalHTML(node, '<div id="super-tag"></div>');

    node = dom.createElement('input');
    ok(node.getAttribute('disabled') === disabledAbsentValue, 'precond: disabled is absent');
    dom.setPropertyStrict(node, 'disabled', true);
    ok(node.getAttribute('disabled') !== disabledAbsentValue, 'disabled is present');
    dom.setPropertyStrict(node, 'disabled', false);
    ok(node.getAttribute('disabled') === disabledAbsentValue, 'disabled has been removed');
  });

  // IE dislikes undefined or null for value
  test('#setPropertyStrict value', function () {
    var node = dom.createElement('input');
    dom.setPropertyStrict(node, 'value', undefined);
    equal(node.value, '', 'blank string is set for undefined');
    dom.setPropertyStrict(node, 'value', null);
    equal(node.value, '', 'blank string is set for undefined');
  });

  // IE dislikes undefined or null for type
  test('#setPropertyStrict type', function () {
    var node = dom.createElement('input');
    dom.setPropertyStrict(node, 'type', undefined);
    equal(node.type, 'text', 'text default is set for undefined');
    dom.setPropertyStrict(node, 'type', null);
    equal(node.type, 'text', 'text default is set for undefined');
  });

  // setting undefined or null to src makes a network request
  test('#setPropertyStrict src', function () {
    var node = dom.createElement('img');
    dom.setPropertyStrict(node, 'src', undefined);
    notEqual(node.src, undefined, 'blank string is set for undefined');
    dom.setPropertyStrict(node, 'src', null);
    notEqual(node.src, null, 'blank string is set for undefined');
  });

  test('#removeAttribute', function () {
    var node = dom.createElement('div');
    dom.setAttribute(node, 'id', 'super-tag');
    _htmlbarsTestHelpers.equalHTML(node, '<div id="super-tag"></div>', 'precond - attribute exists');

    dom.removeAttribute(node, 'id');
    _htmlbarsTestHelpers.equalHTML(node, '<div></div>', 'attribute was removed');
  });

  test('#removeAttribute of SVG', function () {
    dom.setNamespace(svgNamespace);
    var node = dom.createElement('svg');
    dom.setAttribute(node, 'viewBox', '0 0 100 100');
    _htmlbarsTestHelpers.equalHTML(node, '<svg viewBox="0 0 100 100"></svg>', 'precond - attribute exists');

    dom.removeAttribute(node, 'viewBox');
    _htmlbarsTestHelpers.equalHTML(node, '<svg></svg>', 'attribute was removed');
  });

  test('#setProperty', function () {
    var node = dom.createElement('div');
    dom.setProperty(node, 'id', 'super-tag');
    _htmlbarsTestHelpers.equalHTML(node, '<div id="super-tag"></div>');
    dom.setProperty(node, 'id', null);
    ok(node.getAttribute('id') !== 'super-tag', 'null property sets to the property');

    node = dom.createElement('div');
    dom.setProperty(node, 'data-fun', 'whoopie');
    _htmlbarsTestHelpers.equalHTML(node, '<div data-fun="whoopie"></div>');
    dom.setProperty(node, 'data-fun', null);
    _htmlbarsTestHelpers.equalHTML(node, '<div></div>', 'null attribute removes the attribute');

    node = dom.createElement('input');
    dom.setProperty(node, 'disabled', true);
    equal(node.disabled, true);
    dom.setProperty(node, 'disabled', false);
    equal(node.disabled, false);

    node = dom.createElement('div');
    dom.setProperty(node, 'style', 'color: red;');
    _htmlbarsTestHelpers.equalHTML(node, '<div style="color: red;"></div>');
  });

  test('#setProperty removes attr with undefined', function () {
    var node = dom.createElement('div');
    dom.setProperty(node, 'data-fun', 'whoopie');
    _htmlbarsTestHelpers.equalHTML(node, '<div data-fun="whoopie"></div>');
    dom.setProperty(node, 'data-fun', undefined);
    _htmlbarsTestHelpers.equalHTML(node, '<div></div>', 'undefined attribute removes the attribute');
  });

  test('#setProperty uses setAttribute for special non-compliant element props', function () {
    expect(6);

    var badPairs = [{ tagName: 'button', key: 'type', value: 'submit', selfClosing: false }, { tagName: 'input', key: 'type', value: 'x-not-supported', selfClosing: true }];

    badPairs.forEach(function (pair) {
      var node = dom.createElement(pair.tagName);
      var setAttribute = node.setAttribute;

      node.setAttribute = function (attrName, value) {
        equal(attrName, pair.key, 'setAttribute called with correct attrName');
        equal(value, pair.value, 'setAttribute called with correct value');
        return setAttribute.call(this, attrName, value);
      };

      dom.setProperty(node, pair.key, pair.value);

      // e.g. <button type="submit"></button>
      var expected = '<' + pair.tagName + ' ' + pair.key + '="' + pair.value + '">';
      if (pair.selfClosing === false) {
        expected += '</' + pair.tagName + '>';
      }

      _htmlbarsTestHelpers.equalHTML(node, expected, 'output html is correct');
    });
  });

  test('#addClasses', function () {
    var node = dom.createElement('div');
    dom.addClasses(node, ['super-fun']);
    equal(node.className, 'super-fun');
    dom.addClasses(node, ['super-fun']);
    equal(node.className, 'super-fun');
    dom.addClasses(node, ['super-blast']);
    equal(node.className, 'super-fun super-blast');
    dom.addClasses(node, ['bacon', 'ham']);
    equal(node.className, 'super-fun super-blast bacon ham');
  });

  test('#removeClasses', function () {
    var node = dom.createElement('div');
    node.setAttribute('class', 'this-class that-class');
    dom.removeClasses(node, ['this-class']);
    equal(node.className, 'that-class');
    dom.removeClasses(node, ['this-class']);
    equal(node.className, 'that-class');
    dom.removeClasses(node, ['that-class']);
    equal(node.className, '');
    node.setAttribute('class', 'woop moop jeep');
    dom.removeClasses(node, ['moop', 'jeep']);
    equal(node.className, 'woop');
  });

  test('#createElement of tr with contextual table element', function () {
    var tableElement = document.createElement('table'),
        node = dom.createElement('tr', tableElement);
    equal(node.tagName, 'TR');
    _htmlbarsTestHelpers.equalHTML(node, '<tr></tr>');
  });

  test('#createMorph has optional contextualElement', function () {
    var parent = document.createElement('div'),
        fragment = document.createDocumentFragment(),
        start = document.createTextNode(''),
        end = document.createTextNode(''),
        morph,
        thrown;

    try {
      morph = dom.createMorph(fragment, start, end, fragment);
    } catch (e) {
      thrown = true;
    }
    ok(thrown, 'Exception thrown when a fragment is provided for contextualElement');

    morph = dom.createMorph(fragment, start, end, parent);
    equal(morph.contextualElement, parent, "morph's contextualElement is parent");

    morph = dom.createMorph(parent, start, end);
    equal(morph.contextualElement, parent, "morph's contextualElement is parent");
  });

  test('#appendMorph', function () {
    var element = document.createElement('div');

    dom.appendText(element, 'a');
    var morph = dom.appendMorph(element);
    dom.appendText(element, 'c');

    morph.setContent('b');

    equal(element.innerHTML, 'abc');
  });

  test('#insertMorphBefore', function () {
    var element = document.createElement('div');

    dom.appendText(element, 'a');
    var c = dom.appendText(element, 'c');
    var morph = dom.insertMorphBefore(element, c);

    morph.setContent('b');

    equal(element.innerHTML, 'abc');
  });

  test('#parseHTML combinations', function () {
    var parsingCombinations = [
    // omitted start tags
    //
    ['table', '<tr><td>Yo</td></tr>', 'TR'], ['table', '<tbody><tr></tr></tbody>', 'TBODY'], ['table', '<col></col>', 'COL'],
    // elements with broken innerHTML in IE9 and down
    ['select', '<option></option>', 'OPTION'], ['colgroup', '<col></col>', 'COL'], ['tbody', '<tr></tr>', 'TR'], ['tfoot', '<tr></tr>', 'TR'], ['thead', '<tr></tr>', 'TR'], ['tr', '<td></td>', 'TD'], ['div', '<script></script>', 'SCRIPT']];

    var contextTag, content, expectedTagName, contextElement, nodes;
    for (var p = 0; p < parsingCombinations.length; p++) {
      contextTag = parsingCombinations[p][0];
      content = parsingCombinations[p][1];
      expectedTagName = parsingCombinations[p][2];

      contextElement = document.createElement(contextTag);
      nodes = dom.parseHTML(content, contextElement).childNodes;
      equal(nodes[0].tagName, expectedTagName, '#parseHTML of ' + content + ' returns a ' + expectedTagName + ' inside a ' + contextTag + ' context');
    }
  });

  test('#parseHTML of script then tr inside table context wraps the tr in a tbody', function () {
    var tableElement = document.createElement('table'),
        nodes = dom.parseHTML('<script></script><tr><td>Yo</td></tr>', tableElement).childNodes;
    // The HTML spec suggests the first item must be the child of
    // the omittable start tag. Here script is the first child, so no-go.
    equal(nodes.length, 2, 'Leading script tag corrupts');
    equal(nodes[0].tagName, 'SCRIPT');
    equal(nodes[1].tagName, 'TBODY');
  });

  test('#parseHTML of select allows the initial implicit option selection to remain', function () {
    var div = document.createElement('div');
    var select = dom.parseHTML('<select><option></option></select>', div).childNodes[0];

    ok(select.childNodes[0].selected, 'first element is selected');
  });

  test('#parseHTML of options removes an implicit selection', function () {
    var select = document.createElement('select');
    var options = dom.parseHTML('<option value="1"></option><option value="2"></option>', select).childNodes;

    ok(!options[0].selected, 'first element is not selected');
    ok(!options[1].selected, 'second element is not selected');
  });

  test('#parseHTML of options leaves an explicit first selection', function () {
    var select = document.createElement('select');
    var options = dom.parseHTML('<option value="1" selected></option><option value="2"></option>', select).childNodes;

    ok(options[0].selected, 'first element is selected');
    ok(!options[1].selected, 'second element is not selected');
  });

  test('#parseHTML of options leaves an explicit second selection', function () {
    var select = document.createElement('select');
    var options = dom.parseHTML('<option value="1"></option><option value="2" selected="selected"></option>', select).childNodes;

    ok(!options[0].selected, 'first element is not selected');
    ok(options[1].selected, 'second element is selected');
  });

  test('#parseHTML of script then tr inside tbody context', function () {
    var tbodyElement = document.createElement('tbody'),
        nodes = dom.parseHTML('<script></script><tr><td>Yo</td></tr>', tbodyElement).childNodes;
    equal(nodes.length, 2, 'Leading script tag corrupts');
    equal(nodes[0].tagName, 'SCRIPT');
    equal(nodes[1].tagName, 'TR');
  });

  test('#parseHTML with retains whitespace', function () {
    var div = document.createElement('div');
    var nodes = dom.parseHTML('leading<script id="first"></script> <script id="second"></script><div><script></script> <script></script>, indeed.</div>', div).childNodes;
    equal(nodes[0].data, 'leading');
    equal(nodes[1].tagName, 'SCRIPT');
    equal(nodes[2].data, ' ');
    equal(nodes[3].tagName, 'SCRIPT');
    equal(nodes[4].tagName, 'DIV');
    equal(nodes[4].childNodes[0].tagName, 'SCRIPT');
    equal(nodes[4].childNodes[1].data, ' ');
    equal(nodes[4].childNodes[2].tagName, 'SCRIPT');
    equal(nodes[4].childNodes[3].data, ', indeed.');
  });

  test('#parseHTML with retains whitespace of top element', function () {
    var div = document.createElement('div');
    var nodes = dom.parseHTML('<span>hello <script id="first"></script> yeah</span>', div).childNodes;
    equal(nodes[0].tagName, 'SPAN');
    _htmlbarsTestHelpers.equalHTML(nodes, '<span>hello <script id="first"></script> yeah</span>');
  });

  test('#parseHTML with retains whitespace after script', function () {
    var div = document.createElement('div');
    var nodes = dom.parseHTML('<span>hello</span><script id="first"></script><span><script></script> kwoop</span>', div).childNodes;
    equal(nodes[0].tagName, 'SPAN');
    equal(nodes[1].tagName, 'SCRIPT');
    equal(nodes[2].tagName, 'SPAN');
    _htmlbarsTestHelpers.equalHTML(nodes, '<span>hello</span><script id="first"></script><span><script></script> kwoop</span>');
  });

  test('#parseHTML of number', function () {
    var div = document.createElement('div');
    var nodes = dom.parseHTML(5, div).childNodes;
    equal(nodes[0].data, '5');
    _htmlbarsTestHelpers.equalHTML(nodes, '5');
  });

  test('#protocolForURL', function () {
    var protocol = dom.protocolForURL("http://www.emberjs.com");
    equal(protocol, "http:");

    // Inherit protocol from document if unparseable
    protocol = dom.protocolForURL("   javascript:lulzhacked()");
    /*jshint scripturl:true*/
    equal(protocol, "javascript:");
  });

  test('#cloneNode shallow', function () {
    var divElement = document.createElement('div');

    divElement.appendChild(document.createElement('span'));

    var node = dom.cloneNode(divElement, false);

    equal(node.tagName, 'DIV');
    _htmlbarsTestHelpers.equalHTML(node, '<div></div>');
  });

  test('#cloneNode deep', function () {
    var divElement = document.createElement('div');

    divElement.appendChild(document.createElement('span'));

    var node = dom.cloneNode(divElement, true);

    equal(node.tagName, 'DIV');
    _htmlbarsTestHelpers.equalHTML(node, '<div><span></span></div>');
  });

  test('dom node has empty text after cloning and ensuringBlankTextNode', function () {
    var div = document.createElement('div');

    div.appendChild(document.createTextNode(''));

    var clonedDiv = dom.cloneNode(div, true);

    equal(clonedDiv.nodeType, 1);
    _htmlbarsTestHelpers.equalHTML(clonedDiv, '<div></div>');
    // IE's native cloneNode drops blank string text
    // nodes. Assert repairClonedNode brings back the blank
    // text node.
    dom.repairClonedNode(clonedDiv, [0]);
    equal(clonedDiv.childNodes.length, 1);
    equal(clonedDiv.childNodes[0].nodeType, 3);
  });

  test('dom node has empty start text after cloning and ensuringBlankTextNode', function () {
    var div = document.createElement('div');

    div.appendChild(document.createTextNode(''));
    div.appendChild(document.createElement('span'));

    var clonedDiv = dom.cloneNode(div, true);

    equal(clonedDiv.nodeType, 1);
    _htmlbarsTestHelpers.equalHTML(clonedDiv, '<div><span></span></div>');
    // IE's native cloneNode drops blank string text
    // nodes. Assert denormalizeText brings back the blank
    // text node.
    dom.repairClonedNode(clonedDiv, [0]);
    equal(clonedDiv.childNodes.length, 2);
    equal(clonedDiv.childNodes[0].nodeType, 3);
  });

  test('dom node checked after cloning and ensuringChecked', function () {
    var input = document.createElement('input');

    input.setAttribute('checked', 'checked');
    ok(input.checked, 'input is checked');

    var clone = dom.cloneNode(input, false);

    // IE's native cloneNode copies checked attributes but
    // not the checked property of the DOM node.
    dom.repairClonedNode(clone, [], true);

    _htmlbarsTestHelpers.isCheckedInputHTML(clone, '<input checked="checked">');
    ok(clone.checked, 'clone is checked');
  });

  if ('namespaceURI' in document.createElement('div')) {

    QUnit.module('DOM Helper namespaces', {
      beforeEach: function () {
        dom = new _domHelper.default();
      },
      afterEach: function () {
        dom = null;
      }
    });

    test('#createElement div is xhtml', function () {
      var node = dom.createElement('div');
      equal(node.namespaceURI, xhtmlNamespace);
    });

    test('#createElement of svg with svg namespace', function () {
      dom.setNamespace(svgNamespace);
      var node = dom.createElement('svg');
      equal(node.tagName, 'svg');
      equal(node.namespaceURI, svgNamespace);
    });

    test('#createElement of path with detected svg contextual element', function () {
      dom.setNamespace(svgNamespace);
      var node = dom.createElement('path');
      equal(node.tagName, 'path');
      equal(node.namespaceURI, svgNamespace);
    });

    test('#createElement of path with svg contextual element', function () {
      var node = dom.createElement('path', document.createElementNS(svgNamespace, 'svg'));
      equal(node.tagName, 'path');
      equal(node.namespaceURI, svgNamespace);
    });

    test('#createElement of svg with div namespace', function () {
      var node = dom.createElement('svg', document.createElement('div'));
      equal(node.tagName, 'svg');
      equal(node.namespaceURI, svgNamespace);
    });

    test('#getElementById with different root node', function () {
      var doc = document.implementation.createDocument(xhtmlNamespace, 'html', null),
          body = document.createElementNS(xhtmlNamespace, 'body'),
          parentNode = dom.createElement('div'),
          childNode = dom.createElement('div');

      doc.documentElement.appendChild(body);
      dom.setAttribute(parentNode, 'id', 'parent');
      dom.setAttribute(childNode, 'id', 'child');
      dom.appendChild(parentNode, childNode);
      dom.appendChild(body, parentNode);
      _htmlbarsTestHelpers.equalHTML(dom.getElementById('child', doc), '<div id="child"></div>');
    });

    test('#setProperty with namespaced attributes', function () {
      var node;

      dom.setNamespace(svgNamespace);
      node = dom.createElement('svg');
      dom.setProperty(node, 'viewBox', '0 0 0 0');
      _htmlbarsTestHelpers.equalHTML(node, '<svg viewBox="0 0 0 0"></svg>');

      dom.setProperty(node, 'xlink:title', 'super-blast', xlinkNamespace);
      // chrome adds (xmlns:xlink="http://www.w3.org/1999/xlink") property while others don't
      // thus equalHTML is not useful
      var el = document.createElement('div');
      el.appendChild(node);
      // phantom js omits the prefix so we can't look for xlink:
      ok(el.innerHTML.indexOf('title="super-blast"') > 0);

      dom.setProperty(node, 'xlink:title', null, xlinkNamespace);
      equal(node.getAttribute('xlink:title'), null, 'ns attr is removed');
    });

    test("#setProperty removes namespaced attr with undefined", function () {
      var node;

      node = dom.createElement('svg');
      dom.setProperty(node, 'xlink:title', 'Great Title', xlinkNamespace);
      dom.setProperty(node, 'xlink:title', undefined, xlinkNamespace);
      equal(node.getAttribute('xlink:title'), undefined, 'ns attr is removed');
    });

    for (i = 0; i < foreignNamespaces.length; i++) {
      runForeignNamespaceTests(foreignNamespaces[i]);
    }

    test('#parseHTML of path with svg contextual element', function () {
      dom.setNamespace(svgNamespace);
      var svgElement = document.createElementNS(svgNamespace, 'svg'),
          nodes = dom.parseHTML('<path></path>', svgElement).childNodes;
      equal(nodes[0].tagName, 'path');
      equal(nodes[0].namespaceURI, svgNamespace);
    });

    test('#parseHTML of stop with linearGradient contextual element', function () {
      dom.setNamespace(svgNamespace);
      var svgElement = document.createElementNS(svgNamespace, 'linearGradient'),
          nodes = dom.parseHTML('<stop />', svgElement).childNodes;
      equal(nodes[0].tagName, 'stop');
      equal(nodes[0].namespaceURI, svgNamespace);
    });

    test('#addClasses on SVG', function () {
      var node = document.createElementNS(svgNamespace, 'svg');
      dom.addClasses(node, ['super-fun']);
      equal(node.getAttribute('class'), 'super-fun');
      dom.addClasses(node, ['super-fun']);
      equal(node.getAttribute('class'), 'super-fun');
      dom.addClasses(node, ['super-blast']);
      equal(node.getAttribute('class'), 'super-fun super-blast');
    });

    test('#removeClasses on SVG', function () {
      var node = document.createElementNS(svgNamespace, 'svg');
      node.setAttribute('class', 'this-class that-class');
      dom.removeClasses(node, ['this-class']);
      equal(node.getAttribute('class'), 'that-class');
      dom.removeClasses(node, ['this-class']);
      equal(node.getAttribute('class'), 'that-class');
      dom.removeClasses(node, ['that-class']);
      equal(node.getAttribute('class'), '');
    });
  }
});
//# sourceMappingURL=data:application/json;base64,
define('dom-helper-tests/dom-helper-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - dom-helper-tests');
  QUnit.test('dom-helper-tests/dom-helper-test.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper-tests/dom-helper-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzFDLE9BQUssQ0FBQyxJQUFJLENBQUMsd0RBQXdELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDcEYsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUseURBQXlELENBQUMsQ0FBQztHQUM1RSxDQUFDLENBQUMiLCJmaWxlIjoiZG9tLWhlbHBlci10ZXN0cy9kb20taGVscGVyLXRlc3QuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBkb20taGVscGVyLXRlc3RzJyk7XG5RVW5pdC50ZXN0KCdkb20taGVscGVyLXRlc3RzL2RvbS1oZWxwZXItdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnZG9tLWhlbHBlci10ZXN0cy9kb20taGVscGVyLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('dom-helper-tests/dom-helper.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - dom-helper-tests');
  QUnit.test('dom-helper-tests/dom-helper.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper-tests/dom-helper.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUMxQyxPQUFLLENBQUMsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQy9FLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLG9EQUFvRCxDQUFDLENBQUM7R0FDdkUsQ0FBQyxDQUFDIiwiZmlsZSI6ImRvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGRvbS1oZWxwZXItdGVzdHMnKTtcblFVbml0LnRlc3QoJ2RvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnZG9tLWhlbHBlci10ZXN0cy9kb20taGVscGVyLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('dom-helper-tests/dom-helper/build-html-dom.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - dom-helper-tests/dom-helper');
  QUnit.test('dom-helper-tests/dom-helper/build-html-dom.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper-tests/dom-helper/build-html-dom.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci9idWlsZC1odG1sLWRvbS5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUNyRCxPQUFLLENBQUMsSUFBSSxDQUFDLGtFQUFrRSxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQzlGLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLG1FQUFtRSxDQUFDLENBQUM7R0FDdEYsQ0FBQyxDQUFDIiwiZmlsZSI6ImRvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci9idWlsZC1odG1sLWRvbS5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGRvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlcicpO1xuUVVuaXQudGVzdCgnZG9tLWhlbHBlci10ZXN0cy9kb20taGVscGVyL2J1aWxkLWh0bWwtZG9tLmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKGFzc2VydCkgeyBcbiAgYXNzZXJ0Lm9rKHRydWUsICdkb20taGVscGVyLXRlc3RzL2RvbS1oZWxwZXIvYnVpbGQtaHRtbC1kb20uanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('dom-helper-tests/dom-helper/classes.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - dom-helper-tests/dom-helper');
  QUnit.test('dom-helper-tests/dom-helper/classes.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper-tests/dom-helper/classes.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci9jbGFzc2VzLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQ3JELE9BQUssQ0FBQyxJQUFJLENBQUMsMkRBQTJELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDdkYsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsNERBQTRELENBQUMsQ0FBQztHQUMvRSxDQUFDLENBQUMiLCJmaWxlIjoiZG9tLWhlbHBlci10ZXN0cy9kb20taGVscGVyL2NsYXNzZXMuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBkb20taGVscGVyLXRlc3RzL2RvbS1oZWxwZXInKTtcblFVbml0LnRlc3QoJ2RvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci9jbGFzc2VzLmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKGFzc2VydCkgeyBcbiAgYXNzZXJ0Lm9rKHRydWUsICdkb20taGVscGVyLXRlc3RzL2RvbS1oZWxwZXIvY2xhc3Nlcy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('dom-helper-tests/dom-helper/prop.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - dom-helper-tests/dom-helper');
  QUnit.test('dom-helper-tests/dom-helper/prop.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper-tests/dom-helper/prop.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci9wcm9wLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQ3JELE9BQUssQ0FBQyxJQUFJLENBQUMsd0RBQXdELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDcEYsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUseURBQXlELENBQUMsQ0FBQztHQUM1RSxDQUFDLENBQUMiLCJmaWxlIjoiZG9tLWhlbHBlci10ZXN0cy9kb20taGVscGVyL3Byb3AuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBkb20taGVscGVyLXRlc3RzL2RvbS1oZWxwZXInKTtcblFVbml0LnRlc3QoJ2RvbS1oZWxwZXItdGVzdHMvZG9tLWhlbHBlci9wcm9wLmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKGFzc2VydCkgeyBcbiAgYXNzZXJ0Lm9rKHRydWUsICdkb20taGVscGVyLXRlc3RzL2RvbS1oZWxwZXIvcHJvcC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('dom-helper-tests/element-morph-test', ['exports', '../dom-helper'], function (exports, _domHelper) {

  var dom;
  QUnit.module('DOM Helper: ElementMorph', {
    beforeEach: function () {
      dom = new _domHelper.default();
    },

    afterEach: function () {
      dom = null;
    }
  });

  test('contains a clear method', function () {
    expect(0);

    var el = dom.createElement('div');
    var node = dom.createElementMorph(el);

    node.clear();
  });

  test('resets element and dom on destroy', function () {
    expect(2);

    var el = dom.createElement('div');
    var node = dom.createElementMorph(el);

    node.destroy();

    equal(node.element, null, 'element was reset to null');
    equal(node.dom, null, 'dom was reset to null');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXItdGVzdHMvZWxlbWVudC1tb3JwaC10ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsTUFBSSxHQUFHLENBQUM7QUFDUixPQUFLLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFO0FBQ3ZDLGNBQVUsRUFBRSxZQUFXO0FBQ3JCLFNBQUcsR0FBRyx3QkFBZSxDQUFDO0tBQ3ZCOztBQUVELGFBQVMsRUFBRSxZQUFXO0FBQ3BCLFNBQUcsR0FBRyxJQUFJLENBQUM7S0FDWjtHQUNGLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMseUJBQXlCLEVBQUUsWUFBVTtBQUN4QyxVQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRVYsUUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxRQUFJLElBQUksR0FBRyxHQUFHLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7O0FBRXRDLFFBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztHQUNkLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsbUNBQW1DLEVBQUUsWUFBVTtBQUNsRCxVQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRVYsUUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxRQUFJLElBQUksR0FBRyxHQUFHLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7O0FBRXRDLFFBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7QUFFZixTQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztBQUN2RCxTQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztHQUNoRCxDQUFDLENBQUMiLCJmaWxlIjoiZG9tLWhlbHBlci10ZXN0cy9lbGVtZW50LW1vcnBoLXRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRE9NSGVscGVyIGZyb20gXCIuLi9kb20taGVscGVyXCI7XG5cbnZhciBkb207XG5RVW5pdC5tb2R1bGUoJ0RPTSBIZWxwZXI6IEVsZW1lbnRNb3JwaCcsIHtcbiAgYmVmb3JlRWFjaDogZnVuY3Rpb24oKSB7XG4gICAgZG9tID0gbmV3IERPTUhlbHBlcigpO1xuICB9LFxuXG4gIGFmdGVyRWFjaDogZnVuY3Rpb24oKSB7XG4gICAgZG9tID0gbnVsbDtcbiAgfVxufSk7XG5cbnRlc3QoJ2NvbnRhaW5zIGEgY2xlYXIgbWV0aG9kJywgZnVuY3Rpb24oKXtcbiAgZXhwZWN0KDApO1xuXG4gIHZhciBlbCA9IGRvbS5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmFyIG5vZGUgPSBkb20uY3JlYXRlRWxlbWVudE1vcnBoKGVsKTtcblxuICBub2RlLmNsZWFyKCk7XG59KTtcblxudGVzdCgncmVzZXRzIGVsZW1lbnQgYW5kIGRvbSBvbiBkZXN0cm95JywgZnVuY3Rpb24oKXtcbiAgZXhwZWN0KDIpO1xuXG4gIHZhciBlbCA9IGRvbS5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmFyIG5vZGUgPSBkb20uY3JlYXRlRWxlbWVudE1vcnBoKGVsKTtcblxuICBub2RlLmRlc3Ryb3koKTtcblxuICBlcXVhbChub2RlLmVsZW1lbnQsIG51bGwsICdlbGVtZW50IHdhcyByZXNldCB0byBudWxsJyk7XG4gIGVxdWFsKG5vZGUuZG9tLCBudWxsLCAnZG9tIHdhcyByZXNldCB0byBudWxsJyk7XG59KTtcbiJdfQ==
define('dom-helper-tests/element-morph-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - dom-helper-tests');
  QUnit.test('dom-helper-tests/element-morph-test.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper-tests/element-morph-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXItdGVzdHMvZWxlbWVudC1tb3JwaC10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzFDLE9BQUssQ0FBQyxJQUFJLENBQUMsMkRBQTJELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDdkYsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsNERBQTRELENBQUMsQ0FBQztHQUMvRSxDQUFDLENBQUMiLCJmaWxlIjoiZG9tLWhlbHBlci10ZXN0cy9lbGVtZW50LW1vcnBoLXRlc3QuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBkb20taGVscGVyLXRlc3RzJyk7XG5RVW5pdC50ZXN0KCdkb20taGVscGVyLXRlc3RzL2VsZW1lbnQtbW9ycGgtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnZG9tLWhlbHBlci10ZXN0cy9lbGVtZW50LW1vcnBoLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('dom-helper-tests/prop-test', ['exports', 'dom-helper/prop'], function (exports, _domHelperProp) {

  QUnit.module('dom-helper prop');

  test('type.attr, for element props that for one reason or another need to be treated as attrs', function () {
    expect(13);

    [{ tagName: 'TEXTAREA', key: 'form' }, { tagName: 'BUTTON', key: 'type' }, { tagName: 'INPUT', key: 'type' }, { tagName: 'INPUT', key: 'list' }, { tagName: 'INPUT', key: 'form' }, { tagName: 'INPUT', key: 'autocorrect' }, { tagName: 'OPTION', key: 'form' }, { tagName: 'INPUT', key: 'form' }, { tagName: 'BUTTON', key: 'form' }, { tagName: 'LABEL', key: 'form' }, { tagName: 'FIELDSET', key: 'form' }, { tagName: 'LEGEND', key: 'form' }, { tagName: 'OBJECT', key: 'form' }].forEach(function (pair) {
      var element = {
        tagName: pair.tagName
      };

      Object.defineProperty(element, pair.key, {
        set: function () {
          throw new Error('I am a bad browser!');
        }
      });

      deepEqual(_domHelperProp.normalizeProperty(element, pair.key), {
        normalized: pair.key,
        type: 'attr'
      }, ' ' + pair.tagName + '.' + pair.key);
    });
  });

  var TAG_EVENT_PAIRS = [{ tagName: 'form', key: 'onsubmit' }, { tagName: 'form', key: 'onSubmit' }, { tagName: 'form', key: 'ONSUBMIT' }, { tagName: 'video', key: 'canplay' }, { tagName: 'video', key: 'canPlay' }, { tagName: 'video', key: 'CANPLAY' }];

  test('type.eventHandlers should all be props: Chrome', function () {
    expect(6);
    TAG_EVENT_PAIRS.forEach(function (pair) {
      var element = {
        tagName: pair.tagName
      };

      Object.defineProperty(element, pair.key, {
        set: function () {},
        get: function () {}
      });

      deepEqual(_domHelperProp.normalizeProperty(element, pair.key), {
        normalized: pair.key,
        type: 'prop'
      }, ' ' + pair.tagName + '.' + pair.key);
    });
  });

  test('type.eventHandlers should all be props: Safari style (which has screwed up stuff)', function () {
    expect(24);

    TAG_EVENT_PAIRS.forEach(function (pair) {
      var parent = {
        tagName: pair.tagName
      };

      Object.defineProperty(parent, pair.key, {
        set: undefined,
        get: undefined
      });

      var element = Object.create(parent);

      ok(Object.getOwnPropertyDescriptor(element, pair.key) === undefined, 'ensure we mimic silly safari');
      ok(Object.getOwnPropertyDescriptor(parent, pair.key).set === undefined, 'ensure we mimic silly safari');

      var _normalizeProperty = _domHelperProp.normalizeProperty(element, pair.key);

      var normalized = _normalizeProperty.normalized;
      var type = _normalizeProperty.type;

      equal(normalized, pair.key, 'normalized: ' + pair.tagName + '.' + pair.key);
      equal(type, 'prop', 'type: ' + pair.tagName + '.' + pair.key);
    });
  });

  test('test style attr', function () {
    var _normalizeProperty2 = _domHelperProp.normalizeProperty({
      style: undefined,
      tagName: 'foobar'
    }, 'style');

    var normalized = _normalizeProperty2.normalized;
    var type = _normalizeProperty2.type;

    equal(normalized, 'style');
    equal(type, 'attr');
  });

  test('test STYLE attr', function () {
    var _normalizeProperty3 = _domHelperProp.normalizeProperty({
      style: undefined,
      tagName: 'foobar'
    }, 'STYLE');

    var normalized = _normalizeProperty3.normalized;
    var type = _normalizeProperty3.type;

    equal(normalized, 'style');
    equal(type, 'attr');
  });

  test('test StyLE attr', function () {
    var _normalizeProperty4 = _domHelperProp.normalizeProperty({
      style: undefined,
      tagName: 'foobar'
    }, 'StyLE');

    var normalized = _normalizeProperty4.normalized;
    var type = _normalizeProperty4.type;

    equal(normalized, 'style');
    equal(type, 'attr');
  });
});
//# sourceMappingURL=data:application/json;base64,
define('dom-helper-tests/prop-test.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - dom-helper-tests');
  QUnit.test('dom-helper-tests/prop-test.js should pass jshint', function (assert) {
    assert.ok(true, 'dom-helper-tests/prop-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbS1oZWxwZXItdGVzdHMvcHJvcC10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzFDLE9BQUssQ0FBQyxJQUFJLENBQUMsa0RBQWtELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDOUUsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsbURBQW1ELENBQUMsQ0FBQztHQUN0RSxDQUFDLENBQUMiLCJmaWxlIjoiZG9tLWhlbHBlci10ZXN0cy9wcm9wLXRlc3QuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBkb20taGVscGVyLXRlc3RzJyk7XG5RVW5pdC50ZXN0KCdkb20taGVscGVyLXRlc3RzL3Byb3AtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnZG9tLWhlbHBlci10ZXN0cy9wcm9wLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-test-helpers", ["exports", "../simple-html-tokenizer", "../htmlbars-util/array-utils"], function (exports, _simpleHtmlTokenizer, _htmlbarsUtilArrayUtils) {
  exports.equalInnerHTML = equalInnerHTML;
  exports.equalHTML = equalHTML;
  exports.equalTokens = equalTokens;
  exports.normalizeInnerHTML = normalizeInnerHTML;
  exports.isCheckedInputHTML = isCheckedInputHTML;
  exports.getTextContent = getTextContent;

  function equalInnerHTML(fragment, html) {
    var actualHTML = normalizeInnerHTML(fragment.innerHTML);
    QUnit.push(actualHTML === html, actualHTML, html);
  }

  function equalHTML(node, html) {
    var fragment;
    if (!node.nodeType && node.length) {
      fragment = document.createDocumentFragment();
      while (node[0]) {
        fragment.appendChild(node[0]);
      }
    } else {
      fragment = node;
    }

    var div = document.createElement("div");
    div.appendChild(fragment.cloneNode(true));

    equalInnerHTML(div, html);
  }

  function generateTokens(fragmentOrHtml) {
    var div = document.createElement("div");
    if (typeof fragmentOrHtml === 'string') {
      div.innerHTML = fragmentOrHtml;
    } else {
      div.appendChild(fragmentOrHtml.cloneNode(true));
    }

    return { tokens: _simpleHtmlTokenizer.tokenize(div.innerHTML), html: div.innerHTML };
  }

  function equalTokens(fragment, html, message) {
    if (fragment.fragment) {
      fragment = fragment.fragment;
    }
    if (html.fragment) {
      html = html.fragment;
    }

    var fragTokens = generateTokens(fragment);
    var htmlTokens = generateTokens(html);

    function normalizeTokens(token) {
      if (token.type === 'StartTag') {
        token.attributes = token.attributes.sort(function (a, b) {
          if (a[0] > b[0]) {
            return 1;
          }
          if (a[0] < b[0]) {
            return -1;
          }
          return 0;
        });
      }
    }

    _htmlbarsUtilArrayUtils.forEach(fragTokens.tokens, normalizeTokens);
    _htmlbarsUtilArrayUtils.forEach(htmlTokens.tokens, normalizeTokens);

    var msg = "Expected: " + html + "; Actual: " + fragTokens.html;

    if (message) {
      msg += " (" + message + ")";
    }

    deepEqual(fragTokens.tokens, htmlTokens.tokens, msg);
  }

  // detect side-effects of cloning svg elements in IE9-11
  var ieSVGInnerHTML = (function () {
    if (!document.createElementNS) {
      return false;
    }
    var div = document.createElement('div');
    var node = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    div.appendChild(node);
    var clone = div.cloneNode(true);
    return clone.innerHTML === '<svg xmlns="http://www.w3.org/2000/svg" />';
  })();

  function normalizeInnerHTML(actualHTML) {
    if (ieSVGInnerHTML) {
      // Replace `<svg xmlns="http://www.w3.org/2000/svg" height="50%" />` with `<svg height="50%"></svg>`, etc.
      // drop namespace attribute
      actualHTML = actualHTML.replace(/ xmlns="[^"]+"/, '');
      // replace self-closing elements
      actualHTML = actualHTML.replace(/<([^ >]+) [^\/>]*\/>/gi, function (tag, tagName) {
        return tag.slice(0, tag.length - 3) + '></' + tagName + '>';
      });
    }

    return actualHTML;
  }

  // detect weird IE8 checked element string
  var checkedInput = document.createElement('input');
  checkedInput.setAttribute('checked', 'checked');
  var checkedInputString = checkedInput.outerHTML;

  function isCheckedInputHTML(element) {
    equal(element.outerHTML, checkedInputString);
  }

  // check which property has the node's text content
  var textProperty = document.createElement('div').textContent === undefined ? 'innerText' : 'textContent';

  function getTextContent(el) {
    // textNode
    if (el.nodeType === 3) {
      return el.nodeValue;
    } else {
      return el[textProperty];
    }
  }
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-test-helpers.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - .');
  QUnit.test('htmlbars-test-helpers.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-test-helpers.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXRlc3QtaGVscGVycy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDM0IsT0FBSyxDQUFDLElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUN6RSxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSw4Q0FBOEMsQ0FBQyxDQUFDO0dBQ2pFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy10ZXN0LWhlbHBlcnMuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSAuJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy10ZXN0LWhlbHBlcnMuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLXRlc3QtaGVscGVycy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-util', ['exports', './htmlbars-util/safe-string', './htmlbars-util/handlebars/utils', './htmlbars-util/namespaces', './htmlbars-util/morph-utils'], function (exports, _htmlbarsUtilSafeString, _htmlbarsUtilHandlebarsUtils, _htmlbarsUtilNamespaces, _htmlbarsUtilMorphUtils) {
  exports.SafeString = _htmlbarsUtilSafeString.default;
  exports.escapeExpression = _htmlbarsUtilHandlebarsUtils.escapeExpression;
  exports.getAttrNamespace = _htmlbarsUtilNamespaces.getAttrNamespace;
  exports.validateChildMorphs = _htmlbarsUtilMorphUtils.validateChildMorphs;
  exports.linkParams = _htmlbarsUtilMorphUtils.linkParams;
  exports.dump = _htmlbarsUtilMorphUtils.dump;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtVQU1FLFVBQVU7VUFDVixnQkFBZ0IsZ0NBTlQsZ0JBQWdCO1VBT3ZCLGdCQUFnQiwyQkFOVCxnQkFBZ0I7VUFPdkIsbUJBQW1CLDJCQU5aLG1CQUFtQjtVQU8xQixVQUFVLDJCQVBrQixVQUFVO1VBUXRDLElBQUksMkJBUm9DLElBQUkiLCJmaWxlIjoiaHRtbGJhcnMtdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTYWZlU3RyaW5nIGZyb20gJy4vaHRtbGJhcnMtdXRpbC9zYWZlLXN0cmluZyc7XG5pbXBvcnQgeyBlc2NhcGVFeHByZXNzaW9uIH0gZnJvbSAnLi9odG1sYmFycy11dGlsL2hhbmRsZWJhcnMvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0QXR0ck5hbWVzcGFjZSB9IGZyb20gJy4vaHRtbGJhcnMtdXRpbC9uYW1lc3BhY2VzJztcbmltcG9ydCB7IHZhbGlkYXRlQ2hpbGRNb3JwaHMsIGxpbmtQYXJhbXMsIGR1bXAgfSBmcm9tICcuL2h0bWxiYXJzLXV0aWwvbW9ycGgtdXRpbHMnO1xuXG5leHBvcnQge1xuICBTYWZlU3RyaW5nLFxuICBlc2NhcGVFeHByZXNzaW9uLFxuICBnZXRBdHRyTmFtZXNwYWNlLFxuICB2YWxpZGF0ZUNoaWxkTW9ycGhzLFxuICBsaW5rUGFyYW1zLFxuICBkdW1wXG59O1xuIl19
define('htmlbars-util.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - .');
  QUnit.test('htmlbars-util.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-util.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzNCLE9BQUssQ0FBQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDakUsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsc0NBQXNDLENBQUMsQ0FBQztHQUN6RCxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtdXRpbC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIC4nKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLXV0aWwuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oYXNzZXJ0KSB7IFxuICBhc3NlcnQub2sodHJ1ZSwgJ2h0bWxiYXJzLXV0aWwuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-util/array-utils', ['exports'], function (exports) {
  exports.forEach = forEach;
  exports.map = map;

  function forEach(array, callback, binding) {
    var i, l;
    if (binding === undefined) {
      for (i = 0, l = array.length; i < l; i++) {
        callback(array[i], i, array);
      }
    } else {
      for (i = 0, l = array.length; i < l; i++) {
        callback.call(binding, array[i], i, array);
      }
    }
  }

  function map(array, callback) {
    var output = [];
    var i, l;

    for (i = 0, l = array.length; i < l; i++) {
      output.push(callback(array[i], i, array));
    }

    return output;
  }

  var getIdx;
  if (Array.prototype.indexOf) {
    getIdx = function (array, obj, from) {
      return array.indexOf(obj, from);
    };
  } else {
    getIdx = function (array, obj, from) {
      if (from === undefined || from === null) {
        from = 0;
      } else if (from < 0) {
        from = Math.max(0, array.length + from);
      }
      for (var i = from, l = array.length; i < l; i++) {
        if (array[i] === obj) {
          return i;
        }
      }
      return -1;
    };
  }

  var isArray = Array.isArray || function (array) {
    return Object.prototype.toString.call(array) === '[object Array]';
  };

  exports.isArray = isArray;
  var indexOfArray = getIdx;
  exports.indexOfArray = indexOfArray;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvYXJyYXktdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFdBQVMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFO0FBQ2hELFFBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNULFFBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtBQUN6QixXQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN4QyxnQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7T0FDOUI7S0FDRixNQUFNO0FBQ0wsV0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDeEMsZ0JBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7T0FDNUM7S0FDRjtHQUNGOztBQUVNLFdBQVMsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7QUFDbkMsUUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFFBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzs7QUFFVCxTQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN4QyxZQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDM0M7O0FBRUQsV0FBTyxNQUFNLENBQUM7R0FDZjs7QUFFRCxNQUFJLE1BQU0sQ0FBQztBQUNYLE1BQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7QUFDM0IsVUFBTSxHQUFHLFVBQVMsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUM7QUFDakMsYUFBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNqQyxDQUFDO0dBQ0gsTUFBTTtBQUNMLFVBQU0sR0FBRyxVQUFTLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFO0FBQ2xDLFVBQUksSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO0FBQ3ZDLFlBQUksR0FBRyxDQUFDLENBQUM7T0FDVixNQUFNLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRTtBQUNuQixZQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQztPQUN6QztBQUNELFdBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDOUMsWUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO0FBQ3BCLGlCQUFPLENBQUMsQ0FBQztTQUNWO09BQ0Y7QUFDRCxhQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ1gsQ0FBQztHQUNIOztBQUVNLE1BQUksT0FBTyxHQUFJLEtBQUssQ0FBQyxPQUFPLElBQUksVUFBUyxLQUFLLEVBQUU7QUFDckQsV0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssZ0JBQWdCLENBQUM7R0FDbkUsQUFBQyxDQUFDOzs7QUFFSSxNQUFJLFlBQVksR0FBRyxNQUFNLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtdXRpbC9hcnJheS11dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoKGFycmF5LCBjYWxsYmFjaywgYmluZGluZykge1xuICB2YXIgaSwgbDtcbiAgaWYgKGJpbmRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAoaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNhbGxiYWNrKGFycmF5W2ldLCBpLCBhcnJheSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwoYmluZGluZywgYXJyYXlbaV0sIGksIGFycmF5KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcChhcnJheSwgY2FsbGJhY2spIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICB2YXIgaSwgbDtcblxuICBmb3IgKGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3V0cHV0LnB1c2goY2FsbGJhY2soYXJyYXlbaV0sIGksIGFycmF5KSk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG52YXIgZ2V0SWR4O1xuaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gIGdldElkeCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGZyb20pe1xuICAgIHJldHVybiBhcnJheS5pbmRleE9mKG9iaiwgZnJvbSk7XG4gIH07XG59IGVsc2Uge1xuICBnZXRJZHggPSBmdW5jdGlvbihhcnJheSwgb2JqLCBmcm9tKSB7XG4gICAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCB8fCBmcm9tID09PSBudWxsKSB7XG4gICAgICBmcm9tID0gMDtcbiAgICB9IGVsc2UgaWYgKGZyb20gPCAwKSB7XG4gICAgICBmcm9tID0gTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoICsgZnJvbSk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSBmcm9tLCBsPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChhcnJheVtpXSA9PT0gb2JqKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgaXNBcnJheSA9IChBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKGFycmF5KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyYXkpID09PSAnW29iamVjdCBBcnJheV0nO1xufSk7XG5cbmV4cG9ydCB2YXIgaW5kZXhPZkFycmF5ID0gZ2V0SWR4O1xuIl19
define('htmlbars-util/array-utils.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-util');
  QUnit.test('htmlbars-util/array-utils.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-util/array-utils.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvYXJyYXktdXRpbHMuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDdkMsT0FBSyxDQUFDLElBQUksQ0FBQyxpREFBaUQsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUM3RSxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxrREFBa0QsQ0FBQyxDQUFDO0dBQ3JFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy11dGlsL2FycmF5LXV0aWxzLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtdXRpbCcpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtdXRpbC9hcnJheS11dGlscy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtdXRpbC9hcnJheS11dGlscy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-util/handlebars/safe-string', ['exports'], function (exports) {
  // Build out our basic SafeString type
  function SafeString(string) {
    this.string = string;
  }

  SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
    return '' + this.string;
  };

  exports.default = SafeString;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvaGFuZGxlYmFycy9zYWZlLXN0cmluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLFdBQVMsVUFBVSxDQUFDLE1BQU0sRUFBRTtBQUMxQixRQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztHQUN0Qjs7QUFFRCxZQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxZQUFXO0FBQ3ZFLFdBQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7R0FDekIsQ0FBQzs7b0JBRWEsVUFBVSIsImZpbGUiOiJodG1sYmFycy11dGlsL2hhbmRsZWJhcnMvc2FmZS1zdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJyArIHRoaXMuc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2FmZVN0cmluZztcbiJdfQ==
define('htmlbars-util/handlebars/safe-string.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-util/handlebars');
  QUnit.test('htmlbars-util/handlebars/safe-string.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-util/handlebars/safe-string.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvaGFuZGxlYmFycy9zYWZlLXN0cmluZy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsbUNBQW1DLENBQUMsQ0FBQztBQUNsRCxPQUFLLENBQUMsSUFBSSxDQUFDLDREQUE0RCxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ3hGLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLDZEQUE2RCxDQUFDLENBQUM7R0FDaEYsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXV0aWwvaGFuZGxlYmFycy9zYWZlLXN0cmluZy5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXV0aWwvaGFuZGxlYmFycycpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtdXRpbC9oYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKGFzc2VydCkgeyBcbiAgYXNzZXJ0Lm9rKHRydWUsICdodG1sYmFycy11dGlsL2hhbmRsZWJhcnMvc2FmZS1zdHJpbmcuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-util/handlebars/utils', ['exports'], function (exports) {
  exports.extend = extend;
  exports.indexOf = indexOf;
  exports.escapeExpression = escapeExpression;
  exports.isEmpty = isEmpty;
  exports.blockParams = blockParams;
  exports.appendContextPath = appendContextPath;
  var escape = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };

  var badChars = /[&<>"'`]/g,
      possible = /[&<>"'`]/;

  function escapeChar(chr) {
    return escape[chr];
  }

  function extend(obj /* , ...source */) {
    for (var i = 1; i < arguments.length; i++) {
      for (var key in arguments[i]) {
        if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
          obj[key] = arguments[i][key];
        }
      }
    }

    return obj;
  }

  var toString = Object.prototype.toString;

  exports.toString = toString;
  // Sourced from lodash
  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
  /*eslint-disable func-style, no-var */
  var isFunction = function (value) {
    return typeof value === 'function';
  };
  // fallback for older versions of Chrome and Safari
  /* istanbul ignore next */
  if (isFunction(/x/)) {
    exports.isFunction = isFunction = function (value) {
      return typeof value === 'function' && toString.call(value) === '[object Function]';
    };
  }
  var isFunction;
  exports.isFunction = isFunction;
  /*eslint-enable func-style, no-var */

  /* istanbul ignore next */
  var isArray = Array.isArray || function (value) {
    return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
  };

  exports.isArray = isArray;
  // Older IE versions do not directly support indexOf so we must implement our own, sadly.

  function indexOf(array, value) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (array[i] === value) {
        return i;
      }
    }
    return -1;
  }

  function escapeExpression(string) {
    if (typeof string !== 'string') {
      // don't escape SafeStrings, since they're already safe
      if (string && string.toHTML) {
        return string.toHTML();
      } else if (string == null) {
        return '';
      } else if (!string) {
        return string + '';
      }

      // Force a string conversion as this will be done by the append regardless and
      // the regex test will do this transparently behind the scenes, causing issues if
      // an object's to string has escaped characters in it.
      string = '' + string;
    }

    if (!possible.test(string)) {
      return string;
    }
    return string.replace(badChars, escapeChar);
  }

  function isEmpty(value) {
    if (!value && value !== 0) {
      return true;
    } else if (isArray(value) && value.length === 0) {
      return true;
    } else {
      return false;
    }
  }

  function blockParams(params, ids) {
    params.path = ids;
    return params;
  }

  function appendContextPath(contextPath, id) {
    return (contextPath ? contextPath + '.' : '') + id;
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvaGFuZGxlYmFycy91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTSxNQUFNLEdBQUc7QUFDYixPQUFHLEVBQUUsT0FBTztBQUNaLE9BQUcsRUFBRSxNQUFNO0FBQ1gsT0FBRyxFQUFFLE1BQU07QUFDWCxPQUFHLEVBQUUsUUFBUTtBQUNiLE9BQUcsRUFBRSxRQUFRO0FBQ2IsT0FBRyxFQUFFLFFBQVE7R0FDZCxDQUFDOztBQUVGLE1BQU0sUUFBUSxHQUFHLFdBQVc7TUFDdEIsUUFBUSxHQUFHLFVBQVUsQ0FBQzs7QUFFNUIsV0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFO0FBQ3ZCLFdBQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3BCOztBQUVNLFdBQVMsTUFBTSxDQUFDLEdBQUcsb0JBQW9CO0FBQzVDLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3pDLFdBQUssSUFBSSxHQUFHLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQzVCLFlBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRTtBQUMzRCxhQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzlCO09BQ0Y7S0FDRjs7QUFFRCxXQUFPLEdBQUcsQ0FBQztHQUNaOztBQUVNLE1BQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDOzs7Ozs7QUFLaEQsTUFBSSxVQUFVLEdBQUcsVUFBUyxLQUFLLEVBQUU7QUFDL0IsV0FBTyxPQUFPLEtBQUssS0FBSyxVQUFVLENBQUM7R0FDcEMsQ0FBQzs7O0FBR0YsTUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDbkIsWUFJUyxVQUFVLEdBSm5CLFVBQVUsR0FBRyxVQUFTLEtBQUssRUFBRTtBQUMzQixhQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLG1CQUFtQixDQUFDO0tBQ3BGLENBQUM7R0FDSDtBQUNNLE1BQUksVUFBVSxDQUFDOzs7OztBQUlmLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksVUFBUyxLQUFLLEVBQUU7QUFDdEQsV0FBTyxBQUFDLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEdBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7R0FDakcsQ0FBQzs7Ozs7QUFHSyxXQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ3BDLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDaEQsVUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFO0FBQ3RCLGVBQU8sQ0FBQyxDQUFDO09BQ1Y7S0FDRjtBQUNELFdBQU8sQ0FBQyxDQUFDLENBQUM7R0FDWDs7QUFHTSxXQUFTLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtBQUN2QyxRQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTs7QUFFOUIsVUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUMzQixlQUFPLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztPQUN4QixNQUFNLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtBQUN6QixlQUFPLEVBQUUsQ0FBQztPQUNYLE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNsQixlQUFPLE1BQU0sR0FBRyxFQUFFLENBQUM7T0FDcEI7Ozs7O0FBS0QsWUFBTSxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUM7S0FDdEI7O0FBRUQsUUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFBRSxhQUFPLE1BQU0sQ0FBQztLQUFFO0FBQzlDLFdBQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7R0FDN0M7O0FBRU0sV0FBUyxPQUFPLENBQUMsS0FBSyxFQUFFO0FBQzdCLFFBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtBQUN6QixhQUFPLElBQUksQ0FBQztLQUNiLE1BQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDL0MsYUFBTyxJQUFJLENBQUM7S0FDYixNQUFNO0FBQ0wsYUFBTyxLQUFLLENBQUM7S0FDZDtHQUNGOztBQUVNLFdBQVMsV0FBVyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7QUFDdkMsVUFBTSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7QUFDbEIsV0FBTyxNQUFNLENBQUM7R0FDZjs7QUFFTSxXQUFTLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxFQUFFLEVBQUU7QUFDakQsV0FBTyxDQUFDLFdBQVcsR0FBRyxXQUFXLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQSxHQUFJLEVBQUUsQ0FBQztHQUNwRCIsImZpbGUiOiJodG1sYmFycy11dGlsL2hhbmRsZWJhcnMvdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnXG59O1xuXG5jb25zdCBiYWRDaGFycyA9IC9bJjw+XCInYF0vZyxcbiAgICAgIHBvc3NpYmxlID0gL1smPD5cIidgXS87XG5cbmZ1bmN0aW9uIGVzY2FwZUNoYXIoY2hyKSB7XG4gIHJldHVybiBlc2NhcGVbY2hyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChvYmogLyogLCAuLi5zb3VyY2UgKi8pIHtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3VtZW50c1tpXSwga2V5KSkge1xuICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBsZXQgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vLyBTb3VyY2VkIGZyb20gbG9kYXNoXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvbG9kYXNoL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0XG4vKmVzbGludC1kaXNhYmxlIGZ1bmMtc3R5bGUsIG5vLXZhciAqL1xudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbn1cbmV4cG9ydCB2YXIgaXNGdW5jdGlvbjtcbi8qZXNsaW50LWVuYWJsZSBmdW5jLXN0eWxlLCBuby12YXIgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpID8gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScgOiBmYWxzZTtcbn07XG5cbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgZXNjYXBlIFNhZmVTdHJpbmdzLCBzaW5jZSB0aGV5J3JlIGFscmVhZHkgc2FmZVxuICAgIGlmIChzdHJpbmcgJiYgc3RyaW5nLnRvSFRNTCkge1xuICAgICAgcmV0dXJuIHN0cmluZy50b0hUTUwoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nICsgJyc7XG4gICAgfVxuXG4gICAgLy8gRm9yY2UgYSBzdHJpbmcgY29udmVyc2lvbiBhcyB0aGlzIHdpbGwgYmUgZG9uZSBieSB0aGUgYXBwZW5kIHJlZ2FyZGxlc3MgYW5kXG4gICAgLy8gdGhlIHJlZ2V4IHRlc3Qgd2lsbCBkbyB0aGlzIHRyYW5zcGFyZW50bHkgYmVoaW5kIHRoZSBzY2VuZXMsIGNhdXNpbmcgaXNzdWVzIGlmXG4gICAgLy8gYW4gb2JqZWN0J3MgdG8gc3RyaW5nIGhhcyBlc2NhcGVkIGNoYXJhY3RlcnMgaW4gaXQuXG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmc7XG4gIH1cblxuICBpZiAoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkgeyByZXR1cm4gc3RyaW5nOyB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kQ29udGV4dFBhdGgoY29udGV4dFBhdGgsIGlkKSB7XG4gIHJldHVybiAoY29udGV4dFBhdGggPyBjb250ZXh0UGF0aCArICcuJyA6ICcnKSArIGlkO1xufVxuIl19
define('htmlbars-util/handlebars/utils.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-util/handlebars');
  QUnit.test('htmlbars-util/handlebars/utils.js should pass jshint', function (assert) {
    assert.ok(false, 'htmlbars-util/handlebars/utils.js should pass jshint.\nhtmlbars-util/handlebars/utils.js: line 68, col 25, Expected \'===\' and instead saw \'==\'.\n\n1 error');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvaGFuZGxlYmFycy91dGlscy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsbUNBQW1DLENBQUMsQ0FBQztBQUNsRCxPQUFLLENBQUMsSUFBSSxDQUFDLHNEQUFzRCxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ2xGLFVBQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLGdLQUFnSyxDQUFDLENBQUM7R0FDcEwsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXV0aWwvaGFuZGxlYmFycy91dGlscy5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXV0aWwvaGFuZGxlYmFycycpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtdXRpbC9oYW5kbGViYXJzL3V0aWxzLmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKGFzc2VydCkgeyBcbiAgYXNzZXJ0Lm9rKGZhbHNlLCAnaHRtbGJhcnMtdXRpbC9oYW5kbGViYXJzL3V0aWxzLmpzIHNob3VsZCBwYXNzIGpzaGludC5cXG5odG1sYmFycy11dGlsL2hhbmRsZWJhcnMvdXRpbHMuanM6IGxpbmUgNjgsIGNvbCAyNSwgRXhwZWN0ZWQgXFwnPT09XFwnIGFuZCBpbnN0ZWFkIHNhdyBcXCc9PVxcJy5cXG5cXG4xIGVycm9yJyk7IFxufSk7XG4iXX0=
define("htmlbars-util/morph-utils", ["exports"], function (exports) {
  exports.visitChildren = visitChildren;
  exports.validateChildMorphs = validateChildMorphs;
  exports.linkParams = linkParams;
  exports.dump = dump;
  /*globals console*/

  function visitChildren(nodes, callback) {
    if (!nodes || nodes.length === 0) {
      return;
    }

    nodes = nodes.slice();

    while (nodes.length) {
      var node = nodes.pop();
      callback(node);

      if (node.childNodes) {
        nodes.push.apply(nodes, node.childNodes);
      } else if (node.firstChildMorph) {
        var current = node.firstChildMorph;

        while (current) {
          nodes.push(current);
          current = current.nextMorph;
        }
      } else if (node.morphList) {
        var current = node.morphList.firstChildMorph;

        while (current) {
          nodes.push(current);
          current = current.nextMorph;
        }
      }
    }
  }

  function validateChildMorphs(env, morph, visitor) {
    var morphList = morph.morphList;
    if (morph.morphList) {
      var current = morphList.firstChildMorph;

      while (current) {
        var next = current.nextMorph;
        validateChildMorphs(env, current, visitor);
        current = next;
      }
    } else if (morph.lastResult) {
      morph.lastResult.revalidateWith(env, undefined, undefined, undefined, visitor);
    } else if (morph.childNodes) {
      // This means that the childNodes were wired up manually
      for (var i = 0, l = morph.childNodes.length; i < l; i++) {
        validateChildMorphs(env, morph.childNodes[i], visitor);
      }
    }
  }

  function linkParams(env, scope, morph, path, params, hash) {
    if (morph.linkedParams) {
      return;
    }

    if (env.hooks.linkRenderNode(morph, env, scope, path, params, hash)) {
      morph.linkedParams = { params: params, hash: hash };
    }
  }

  function dump(node) {
    console.group(node, node.isDirty);

    if (node.childNodes) {
      map(node.childNodes, dump);
    } else if (node.firstChildMorph) {
      var current = node.firstChildMorph;

      while (current) {
        dump(current);
        current = current.nextMorph;
      }
    } else if (node.morphList) {
      dump(node.morphList);
    }

    console.groupEnd();
  }

  function map(nodes, cb) {
    for (var i = 0, l = nodes.length; i < l; i++) {
      cb(nodes[i]);
    }
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvbW9ycGgtdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVPLFdBQVMsYUFBYSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7QUFDN0MsUUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUFFLGFBQU87S0FBRTs7QUFFN0MsU0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7QUFFdEIsV0FBTyxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQ25CLFVBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN2QixjQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRWYsVUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ25CLGFBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7T0FDMUMsTUFBTSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7QUFDL0IsWUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQzs7QUFFbkMsZUFBTyxPQUFPLEVBQUU7QUFDZCxlQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BCLGlCQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztTQUM3QjtPQUNGLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ3pCLFlBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDOztBQUU3QyxlQUFPLE9BQU8sRUFBRTtBQUNkLGVBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEIsaUJBQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1NBQzdCO09BQ0Y7S0FDRjtHQUNGOztBQUdNLFdBQVMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7QUFDdkQsUUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUNoQyxRQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUU7QUFDbkIsVUFBSSxPQUFPLEdBQUcsU0FBUyxDQUFDLGVBQWUsQ0FBQzs7QUFFeEMsYUFBTyxPQUFPLEVBQUU7QUFDZCxZQUFJLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQzdCLDJCQUFtQixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDM0MsZUFBTyxHQUFHLElBQUksQ0FBQztPQUNoQjtLQUNGLE1BQU0sSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFO0FBQzNCLFdBQUssQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNoRixNQUFNLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTs7QUFFM0IsV0FBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDakQsMkJBQW1CLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7T0FDeEQ7S0FDRjtHQUNGOztBQUVNLFdBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO0FBQ2hFLFFBQUksS0FBSyxDQUFDLFlBQVksRUFBRTtBQUN0QixhQUFPO0tBQ1I7O0FBRUQsUUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFO0FBQ25FLFdBQUssQ0FBQyxZQUFZLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUNyRDtHQUNGOztBQUVNLFdBQVMsSUFBSSxDQUFDLElBQUksRUFBRTtBQUN6QixXQUFPLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRWxDLFFBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUNuQixTQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM1QixNQUFNLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUMvQixVQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDOztBQUVuQyxhQUFPLE9BQU8sRUFBRTtBQUNkLFlBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNkLGVBQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO09BQzdCO0tBQ0YsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDekIsVUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN0Qjs7QUFFRCxXQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDcEI7O0FBRUQsV0FBUyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtBQUN0QixTQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3RDLFFBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNkO0dBQ0YiLCJmaWxlIjoiaHRtbGJhcnMtdXRpbC9tb3JwaC11dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFscyBjb25zb2xlKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHZpc2l0Q2hpbGRyZW4obm9kZXMsIGNhbGxiYWNrKSB7XG4gIGlmICghbm9kZXMgfHwgbm9kZXMubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuXG4gIG5vZGVzID0gbm9kZXMuc2xpY2UoKTtcblxuICB3aGlsZSAobm9kZXMubGVuZ3RoKSB7XG4gICAgdmFyIG5vZGUgPSBub2Rlcy5wb3AoKTtcbiAgICBjYWxsYmFjayhub2RlKTtcblxuICAgIGlmIChub2RlLmNoaWxkTm9kZXMpIHtcbiAgICAgIG5vZGVzLnB1c2guYXBwbHkobm9kZXMsIG5vZGUuY2hpbGROb2Rlcyk7XG4gICAgfSBlbHNlIGlmIChub2RlLmZpcnN0Q2hpbGRNb3JwaCkge1xuICAgICAgbGV0IGN1cnJlbnQgPSBub2RlLmZpcnN0Q2hpbGRNb3JwaDtcblxuICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgbm9kZXMucHVzaChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dE1vcnBoO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobm9kZS5tb3JwaExpc3QpIHtcbiAgICAgIGxldCBjdXJyZW50ID0gbm9kZS5tb3JwaExpc3QuZmlyc3RDaGlsZE1vcnBoO1xuXG4gICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICBub2Rlcy5wdXNoKGN1cnJlbnQpO1xuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0TW9ycGg7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRNb3JwaHMoZW52LCBtb3JwaCwgdmlzaXRvcikge1xuICB2YXIgbW9ycGhMaXN0ID0gbW9ycGgubW9ycGhMaXN0O1xuICBpZiAobW9ycGgubW9ycGhMaXN0KSB7XG4gICAgdmFyIGN1cnJlbnQgPSBtb3JwaExpc3QuZmlyc3RDaGlsZE1vcnBoO1xuXG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgIHZhciBuZXh0ID0gY3VycmVudC5uZXh0TW9ycGg7XG4gICAgICB2YWxpZGF0ZUNoaWxkTW9ycGhzKGVudiwgY3VycmVudCwgdmlzaXRvcik7XG4gICAgICBjdXJyZW50ID0gbmV4dDtcbiAgICB9XG4gIH0gZWxzZSBpZiAobW9ycGgubGFzdFJlc3VsdCkge1xuICAgIG1vcnBoLmxhc3RSZXN1bHQucmV2YWxpZGF0ZVdpdGgoZW52LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB2aXNpdG9yKTtcbiAgfSBlbHNlIGlmIChtb3JwaC5jaGlsZE5vZGVzKSB7XG4gICAgLy8gVGhpcyBtZWFucyB0aGF0IHRoZSBjaGlsZE5vZGVzIHdlcmUgd2lyZWQgdXAgbWFudWFsbHlcbiAgICBmb3IgKHZhciBpPTAsIGw9bW9ycGguY2hpbGROb2Rlcy5sZW5ndGg7IGk8bDsgaSsrKSB7XG4gICAgICB2YWxpZGF0ZUNoaWxkTW9ycGhzKGVudiwgbW9ycGguY2hpbGROb2Rlc1tpXSwgdmlzaXRvcik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rUGFyYW1zKGVudiwgc2NvcGUsIG1vcnBoLCBwYXRoLCBwYXJhbXMsIGhhc2gpIHtcbiAgaWYgKG1vcnBoLmxpbmtlZFBhcmFtcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbnYuaG9va3MubGlua1JlbmRlck5vZGUobW9ycGgsIGVudiwgc2NvcGUsIHBhdGgsIHBhcmFtcywgaGFzaCkpIHtcbiAgICBtb3JwaC5saW5rZWRQYXJhbXMgPSB7IHBhcmFtczogcGFyYW1zLCBoYXNoOiBoYXNoIH07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGR1bXAobm9kZSkge1xuICBjb25zb2xlLmdyb3VwKG5vZGUsIG5vZGUuaXNEaXJ0eSk7XG5cbiAgaWYgKG5vZGUuY2hpbGROb2Rlcykge1xuICAgIG1hcChub2RlLmNoaWxkTm9kZXMsIGR1bXApO1xuICB9IGVsc2UgaWYgKG5vZGUuZmlyc3RDaGlsZE1vcnBoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBub2RlLmZpcnN0Q2hpbGRNb3JwaDtcblxuICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICBkdW1wKGN1cnJlbnQpO1xuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dE1vcnBoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlLm1vcnBoTGlzdCkge1xuICAgIGR1bXAobm9kZS5tb3JwaExpc3QpO1xuICB9XG5cbiAgY29uc29sZS5ncm91cEVuZCgpO1xufVxuXG5mdW5jdGlvbiBtYXAobm9kZXMsIGNiKSB7XG4gIGZvciAodmFyIGk9MCwgbD1ub2Rlcy5sZW5ndGg7IGk8bDsgaSsrKSB7XG4gICAgY2Iobm9kZXNbaV0pO1xuICB9XG59XG4iXX0=
define('htmlbars-util/morph-utils.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-util');
  QUnit.test('htmlbars-util/morph-utils.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-util/morph-utils.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvbW9ycGgtdXRpbHMuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDdkMsT0FBSyxDQUFDLElBQUksQ0FBQyxpREFBaUQsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUM3RSxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxrREFBa0QsQ0FBQyxDQUFDO0dBQ3JFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy11dGlsL21vcnBoLXV0aWxzLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtdXRpbCcpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtdXRpbC9tb3JwaC11dGlscy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtdXRpbC9tb3JwaC11dGlscy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-util/namespaces', ['exports'], function (exports) {
  exports.getAttrNamespace = getAttrNamespace;
  // ref http://dev.w3.org/html5/spec-LC/namespaces.html
  var defaultNamespaces = {
    html: 'http://www.w3.org/1999/xhtml',
    mathml: 'http://www.w3.org/1998/Math/MathML',
    svg: 'http://www.w3.org/2000/svg',
    xlink: 'http://www.w3.org/1999/xlink',
    xml: 'http://www.w3.org/XML/1998/namespace'
  };

  function getAttrNamespace(attrName, detectedNamespace) {
    if (detectedNamespace) {
      return detectedNamespace;
    }

    var namespace;

    var colonIndex = attrName.indexOf(':');
    if (colonIndex !== -1) {
      var prefix = attrName.slice(0, colonIndex);
      namespace = defaultNamespaces[prefix];
    }

    return namespace || null;
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvbmFtZXNwYWNlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxNQUFJLGlCQUFpQixHQUFHO0FBQ3RCLFFBQUksRUFBRSw4QkFBOEI7QUFDcEMsVUFBTSxFQUFFLG9DQUFvQztBQUM1QyxPQUFHLEVBQUUsNEJBQTRCO0FBQ2pDLFNBQUssRUFBRSw4QkFBOEI7QUFDckMsT0FBRyxFQUFFLHNDQUFzQztHQUM1QyxDQUFDOztBQUVLLFdBQVMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLGlCQUFpQixFQUFFO0FBQzVELFFBQUksaUJBQWlCLEVBQUU7QUFDckIsYUFBTyxpQkFBaUIsQ0FBQztLQUMxQjs7QUFFRCxRQUFJLFNBQVMsQ0FBQzs7QUFFZCxRQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDLFFBQUksVUFBVSxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQ3JCLFVBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzNDLGVBQVMsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN2Qzs7QUFFRCxXQUFPLFNBQVMsSUFBSSxJQUFJLENBQUM7R0FDMUIiLCJmaWxlIjoiaHRtbGJhcnMtdXRpbC9uYW1lc3BhY2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVmIGh0dHA6Ly9kZXYudzMub3JnL2h0bWw1L3NwZWMtTEMvbmFtZXNwYWNlcy5odG1sXG52YXIgZGVmYXVsdE5hbWVzcGFjZXMgPSB7XG4gIGh0bWw6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJyxcbiAgbWF0aG1sOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCcsXG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgeGxpbms6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyxcbiAgeG1sOiAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJ1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEF0dHJOYW1lc3BhY2UoYXR0ck5hbWUsIGRldGVjdGVkTmFtZXNwYWNlKSB7XG4gIGlmIChkZXRlY3RlZE5hbWVzcGFjZSkge1xuICAgIHJldHVybiBkZXRlY3RlZE5hbWVzcGFjZTtcbiAgfVxuXG4gIHZhciBuYW1lc3BhY2U7XG5cbiAgdmFyIGNvbG9uSW5kZXggPSBhdHRyTmFtZS5pbmRleE9mKCc6Jyk7XG4gIGlmIChjb2xvbkluZGV4ICE9PSAtMSkge1xuICAgIHZhciBwcmVmaXggPSBhdHRyTmFtZS5zbGljZSgwLCBjb2xvbkluZGV4KTtcbiAgICBuYW1lc3BhY2UgPSBkZWZhdWx0TmFtZXNwYWNlc1twcmVmaXhdO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzcGFjZSB8fCBudWxsO1xufVxuIl19
define('htmlbars-util/namespaces.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-util');
  QUnit.test('htmlbars-util/namespaces.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-util/namespaces.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvbmFtZXNwYWNlcy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUN2QyxPQUFLLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQzVFLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLGlEQUFpRCxDQUFDLENBQUM7R0FDcEUsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXV0aWwvbmFtZXNwYWNlcy5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXV0aWwnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLXV0aWwvbmFtZXNwYWNlcy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtdXRpbC9uYW1lc3BhY2VzLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define("htmlbars-util/object-utils", ["exports"], function (exports) {
  exports.merge = merge;
  exports.shallowCopy = shallowCopy;
  exports.keySet = keySet;
  exports.keyLength = keyLength;

  function merge(options, defaults) {
    for (var prop in defaults) {
      if (options.hasOwnProperty(prop)) {
        continue;
      }
      options[prop] = defaults[prop];
    }
    return options;
  }

  function shallowCopy(obj) {
    return merge({}, obj);
  }

  function keySet(obj) {
    var set = {};

    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        set[prop] = true;
      }
    }

    return set;
  }

  function keyLength(obj) {
    var count = 0;

    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        count++;
      }
    }

    return count;
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvb2JqZWN0LXV0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFPLFdBQVMsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDdkMsU0FBSyxJQUFJLElBQUksSUFBSSxRQUFRLEVBQUU7QUFDekIsVUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQUUsaUJBQVM7T0FBRTtBQUMvQyxhQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2hDO0FBQ0QsV0FBTyxPQUFPLENBQUM7R0FDaEI7O0FBRU0sV0FBUyxXQUFXLENBQUMsR0FBRyxFQUFFO0FBQy9CLFdBQU8sS0FBSyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztHQUN2Qjs7QUFFTSxXQUFTLE1BQU0sQ0FBQyxHQUFHLEVBQUU7QUFDMUIsUUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDOztBQUViLFNBQUssSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFO0FBQ3BCLFVBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUM1QixXQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO09BQ2xCO0tBQ0Y7O0FBRUQsV0FBTyxHQUFHLENBQUM7R0FDWjs7QUFFTSxXQUFTLFNBQVMsQ0FBQyxHQUFHLEVBQUU7QUFDN0IsUUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDOztBQUVkLFNBQUssSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFO0FBQ3BCLFVBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUM1QixhQUFLLEVBQUUsQ0FBQztPQUNUO0tBQ0Y7O0FBRUQsV0FBTyxLQUFLLENBQUM7R0FDZCIsImZpbGUiOiJodG1sYmFycy11dGlsL29iamVjdC11dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBtZXJnZShvcHRpb25zLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwcm9wIGluIGRlZmF1bHRzKSB7XG4gICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcCkpIHsgY29udGludWU7IH1cbiAgICBvcHRpb25zW3Byb3BdID0gZGVmYXVsdHNbcHJvcF07XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGFsbG93Q29weShvYmopIHtcbiAgcmV0dXJuIG1lcmdlKHt9LCBvYmopO1xufVxuXG5leHBvcnQgZnVuY3Rpb24ga2V5U2V0KG9iaikge1xuICB2YXIgc2V0ID0ge307XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICBzZXRbcHJvcF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBrZXlMZW5ndGgob2JqKSB7XG4gIHZhciBjb3VudCA9IDA7XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICBjb3VudCsrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3VudDtcbn1cbiJdfQ==
define('htmlbars-util/object-utils.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-util');
  QUnit.test('htmlbars-util/object-utils.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-util/object-utils.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvb2JqZWN0LXV0aWxzLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3ZDLE9BQUssQ0FBQyxJQUFJLENBQUMsa0RBQWtELEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDOUUsVUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsbURBQW1ELENBQUMsQ0FBQztHQUN0RSxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtdXRpbC9vYmplY3QtdXRpbHMuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiUVVuaXQubW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy11dGlsJyk7XG5RVW5pdC50ZXN0KCdodG1sYmFycy11dGlsL29iamVjdC11dGlscy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtdXRpbC9vYmplY3QtdXRpbHMuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-util/quoting", ["exports"], function (exports) {
  exports.hash = hash;
  exports.repeat = repeat;
  function escapeString(str) {
    str = str.replace(/\\/g, "\\\\");
    str = str.replace(/"/g, '\\"');
    str = str.replace(/\n/g, "\\n");
    return str;
  }

  exports.escapeString = escapeString;

  function string(str) {
    return '"' + escapeString(str) + '"';
  }

  exports.string = string;

  function array(a) {
    return "[" + a + "]";
  }

  exports.array = array;

  function hash(pairs) {
    return "{" + pairs.join(", ") + "}";
  }

  function repeat(chars, times) {
    var str = "";
    while (times--) {
      str += chars;
    }
    return str;
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvcXVvdGluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxXQUFTLFlBQVksQ0FBQyxHQUFHLEVBQUU7QUFDekIsT0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2pDLE9BQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMvQixPQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEMsV0FBTyxHQUFHLENBQUM7R0FDWjs7VUFFUSxZQUFZLEdBQVosWUFBWTs7QUFFckIsV0FBUyxNQUFNLENBQUMsR0FBRyxFQUFFO0FBQ25CLFdBQU8sR0FBRyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7R0FDdEM7O1VBRVEsTUFBTSxHQUFOLE1BQU07O0FBRWYsV0FBUyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQ2hCLFdBQU8sR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7R0FDdEI7O1VBRVEsS0FBSyxHQUFMLEtBQUs7O0FBRVAsV0FBUyxJQUFJLENBQUMsS0FBSyxFQUFFO0FBQzFCLFdBQU8sR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0dBQ3JDOztBQUVNLFdBQVMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDbkMsUUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2IsV0FBTyxLQUFLLEVBQUUsRUFBRTtBQUNkLFNBQUcsSUFBSSxLQUFLLENBQUM7S0FDZDtBQUNELFdBQU8sR0FBRyxDQUFDO0dBQ1oiLCJmaWxlIjoiaHRtbGJhcnMtdXRpbC9xdW90aW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZXNjYXBlU3RyaW5nKHN0cikge1xuICBzdHIgPSBzdHIucmVwbGFjZSgvXFxcXC9nLCBcIlxcXFxcXFxcXCIpO1xuICBzdHIgPSBzdHIucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpO1xuICBzdHIgPSBzdHIucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIik7XG4gIHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCB7IGVzY2FwZVN0cmluZyB9O1xuXG5mdW5jdGlvbiBzdHJpbmcoc3RyKSB7XG4gIHJldHVybiAnXCInICsgZXNjYXBlU3RyaW5nKHN0cikgKyAnXCInO1xufVxuXG5leHBvcnQgeyBzdHJpbmcgfTtcblxuZnVuY3Rpb24gYXJyYXkoYSkge1xuICByZXR1cm4gXCJbXCIgKyBhICsgXCJdXCI7XG59XG5cbmV4cG9ydCB7IGFycmF5IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNoKHBhaXJzKSB7XG4gIHJldHVybiBcIntcIiArIHBhaXJzLmpvaW4oXCIsIFwiKSArIFwifVwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0KGNoYXJzLCB0aW1lcykge1xuICB2YXIgc3RyID0gXCJcIjtcbiAgd2hpbGUgKHRpbWVzLS0pIHtcbiAgICBzdHIgKz0gY2hhcnM7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn1cbiJdfQ==
define('htmlbars-util/quoting.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-util');
  QUnit.test('htmlbars-util/quoting.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-util/quoting.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvcXVvdGluZy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQUssQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUN2QyxPQUFLLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLFVBQVMsTUFBTSxFQUFFO0FBQ3pFLFVBQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLDhDQUE4QyxDQUFDLENBQUM7R0FDakUsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXV0aWwvcXVvdGluZy5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC5tb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXV0aWwnKTtcblFVbml0LnRlc3QoJ2h0bWxiYXJzLXV0aWwvcXVvdGluZy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtdXRpbC9xdW90aW5nLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-util/safe-string', ['exports', './handlebars/safe-string'], function (exports, _handlebarsSafeString) {
  exports.default = _handlebarsSafeString.default;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJodG1sYmFycy11dGlsL3NhZmUtc3RyaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOltdfQ==
define('htmlbars-util/safe-string.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-util');
  QUnit.test('htmlbars-util/safe-string.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-util/safe-string.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvc2FmZS1zdHJpbmcuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDdkMsT0FBSyxDQUFDLElBQUksQ0FBQyxpREFBaUQsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUM3RSxVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxrREFBa0QsQ0FBQyxDQUFDO0dBQ3JFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy11dGlsL3NhZmUtc3RyaW5nLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtdXRpbCcpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtdXRpbC9zYWZlLXN0cmluZy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtdXRpbC9zYWZlLXN0cmluZy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define("htmlbars-util/template-utils", ["exports", "../htmlbars-util/morph-utils", "../htmlbars-runtime/render"], function (exports, _htmlbarsUtilMorphUtils, _htmlbarsRuntimeRender) {
  exports.RenderState = RenderState;
  exports.blockFor = blockFor;
  exports.renderAndCleanup = renderAndCleanup;
  exports.clearMorph = clearMorph;
  exports.clearMorphList = clearMorphList;

  function RenderState(renderNode, morphList) {
    // The morph list that is no longer needed and can be
    // destroyed.
    this.morphListToClear = morphList;

    // The morph list that needs to be pruned of any items
    // that were not yielded on a subsequent render.
    this.morphListToPrune = null;

    // A map of morphs for each item yielded in during this
    // rendering pass. Any morphs in the DOM but not in this map
    // will be pruned during cleanup.
    this.handledMorphs = {};
    this.collisions = undefined;

    // The morph to clear once rendering is complete. By
    // default, we set this to the previous morph (to catch
    // the case where nothing is yielded; in that case, we
    // should just clear the morph). Otherwise this gets set
    // to null if anything is rendered.
    this.morphToClear = renderNode;

    this.shadowOptions = null;
  }

  function Block(render, template, blockOptions) {
    this.render = render;
    this.template = template;
    this.blockOptions = blockOptions;
    this.arity = template.arity;
  }

  Block.prototype.invoke = function (env, blockArguments, _self, renderNode, parentScope, visitor) {
    if (renderNode.lastResult) {
      renderNode.lastResult.revalidateWith(env, undefined, _self, blockArguments, visitor);
    } else {
      this._firstRender(env, blockArguments, _self, renderNode, parentScope);
    }
  };

  Block.prototype._firstRender = function (env, blockArguments, _self, renderNode, parentScope) {
    var options = { renderState: new RenderState(renderNode) };
    var render = this.render;
    var template = this.template;
    var scope = this.blockOptions.scope;

    var shadowScope = scope ? env.hooks.createChildScope(scope) : env.hooks.createFreshScope();

    env.hooks.bindShadowScope(env, parentScope, shadowScope, this.blockOptions.options);

    if (_self !== undefined) {
      env.hooks.bindSelf(env, shadowScope, _self);
    } else if (this.blockOptions.self !== undefined) {
      env.hooks.bindSelf(env, shadowScope, this.blockOptions.self);
    }

    bindBlocks(env, shadowScope, this.blockOptions.yieldTo);

    renderAndCleanup(renderNode, env, options, null, function () {
      options.renderState.morphToClear = null;
      var renderOptions = new _htmlbarsRuntimeRender.RenderOptions(renderNode, undefined, blockArguments);
      render(template, env, shadowScope, renderOptions);
    });
  };

  function blockFor(render, template, blockOptions) {
    return new Block(render, template, blockOptions);
  }

  function bindBlocks(env, shadowScope, blocks) {
    if (!blocks) {
      return;
    }
    if (blocks instanceof Block) {
      env.hooks.bindBlock(env, shadowScope, blocks);
    } else {
      for (var name in blocks) {
        if (blocks.hasOwnProperty(name)) {
          env.hooks.bindBlock(env, shadowScope, blocks[name], name);
        }
      }
    }
  }

  function renderAndCleanup(morph, env, options, shadowOptions, callback) {
    // The RenderState object is used to collect information about what the
    // helper or hook being invoked has yielded. Once it has finished either
    // yielding multiple items (via yieldItem) or a single template (via
    // yieldTemplate), we detect what was rendered and how it differs from
    // the previous render, cleaning up old state in DOM as appropriate.
    var renderState = options.renderState;
    renderState.collisions = undefined;
    renderState.shadowOptions = shadowOptions;

    // Invoke the callback, instructing it to save information about what it
    // renders into RenderState.
    var result = callback(options);

    // The hook can opt-out of cleanup if it handled cleanup itself.
    if (result && result.handled) {
      return;
    }

    var morphMap = morph.morphMap;

    // Walk the morph list, clearing any items that were yielded in a previous
    // render but were not yielded during this render.
    var morphList = renderState.morphListToPrune;
    if (morphList) {
      var handledMorphs = renderState.handledMorphs;
      var item = morphList.firstChildMorph;

      while (item) {
        var next = item.nextMorph;

        // If we don't see the key in handledMorphs, it wasn't
        // yielded in and we can safely remove it from DOM.
        if (!(item.key in handledMorphs)) {
          morphMap[item.key] = undefined;
          clearMorph(item, env, true);
          item.destroy();
        }

        item = next;
      }
    }

    morphList = renderState.morphListToClear;
    if (morphList) {
      clearMorphList(morphList, morph, env);
    }

    var toClear = renderState.morphToClear;
    if (toClear) {
      clearMorph(toClear, env);
    }
  }

  function clearMorph(morph, env, destroySelf) {
    var cleanup = env.hooks.cleanupRenderNode;
    var destroy = env.hooks.destroyRenderNode;
    var willCleanup = env.hooks.willCleanupTree;
    var didCleanup = env.hooks.didCleanupTree;

    function destroyNode(node) {
      if (cleanup) {
        cleanup(node);
      }
      if (destroy) {
        destroy(node);
      }
    }

    if (willCleanup) {
      willCleanup(env, morph, destroySelf);
    }
    if (cleanup) {
      cleanup(morph);
    }
    if (destroySelf && destroy) {
      destroy(morph);
    }

    _htmlbarsUtilMorphUtils.visitChildren(morph.childNodes, destroyNode);

    // TODO: Deal with logical children that are not in the DOM tree
    morph.clear();
    if (didCleanup) {
      didCleanup(env, morph, destroySelf);
    }

    morph.lastResult = null;
    morph.lastYielded = null;
    morph.childNodes = null;
  }

  function clearMorphList(morphList, morph, env) {
    var item = morphList.firstChildMorph;

    while (item) {
      var next = item.nextMorph;
      morph.morphMap[item.key] = undefined;
      clearMorph(item, env, true);
      item.destroy();

      item = next;
    }

    // Remove the MorphList from the morph.
    morphList.clear();
    morph.morphList = null;
  }
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-util/template-utils.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-util');
  QUnit.test('htmlbars-util/template-utils.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-util/template-utils.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvdGVtcGxhdGUtdXRpbHMuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDdkMsT0FBSyxDQUFDLElBQUksQ0FBQyxvREFBb0QsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUNoRixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxxREFBcUQsQ0FBQyxDQUFDO0dBQ3hFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy11dGlsL3RlbXBsYXRlLXV0aWxzLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtdXRpbCcpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtdXRpbC90ZW1wbGF0ZS11dGlscy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtdXRpbC90ZW1wbGF0ZS11dGlscy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define("htmlbars-util/void-tag-names", ["exports", "./array-utils"], function (exports, _arrayUtils) {

  // The HTML elements in this list are speced by
  // http://www.w3.org/TR/html-markup/syntax.html#syntax-elements,
  // and will be forced to close regardless of if they have a
  // self-closing /> at the end.
  var voidTagNames = "area base br col command embed hr img input keygen link meta param source track wbr";
  var voidMap = {};

  _arrayUtils.forEach(voidTagNames.split(" "), function (tagName) {
    voidMap[tagName] = true;
  });

  exports.default = voidMap;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvdm9pZC10YWctbmFtZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBTUEsTUFBSSxZQUFZLEdBQUcscUZBQXFGLENBQUM7QUFDekcsTUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDOztBQUVqQixjQVRTLE9BQU8sQ0FTUixZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFVBQVMsT0FBTyxFQUFFO0FBQ2pELFdBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUM7R0FDekIsQ0FBQyxDQUFDOztvQkFFWSxPQUFPIiwiZmlsZSI6Imh0bWxiYXJzLXV0aWwvdm9pZC10YWctbmFtZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JFYWNoIH0gZnJvbSBcIi4vYXJyYXktdXRpbHNcIjtcblxuLy8gVGhlIEhUTUwgZWxlbWVudHMgaW4gdGhpcyBsaXN0IGFyZSBzcGVjZWQgYnlcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWwtbWFya3VwL3N5bnRheC5odG1sI3N5bnRheC1lbGVtZW50cyxcbi8vIGFuZCB3aWxsIGJlIGZvcmNlZCB0byBjbG9zZSByZWdhcmRsZXNzIG9mIGlmIHRoZXkgaGF2ZSBhXG4vLyBzZWxmLWNsb3NpbmcgLz4gYXQgdGhlIGVuZC5cbnZhciB2b2lkVGFnTmFtZXMgPSBcImFyZWEgYmFzZSBiciBjb2wgY29tbWFuZCBlbWJlZCBociBpbWcgaW5wdXQga2V5Z2VuIGxpbmsgbWV0YSBwYXJhbSBzb3VyY2UgdHJhY2sgd2JyXCI7XG52YXIgdm9pZE1hcCA9IHt9O1xuXG5mb3JFYWNoKHZvaWRUYWdOYW1lcy5zcGxpdChcIiBcIiksIGZ1bmN0aW9uKHRhZ05hbWUpIHtcbiAgdm9pZE1hcFt0YWdOYW1lXSA9IHRydWU7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdm9pZE1hcDtcbiJdfQ==
define('htmlbars-util/void-tag-names.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - htmlbars-util');
  QUnit.test('htmlbars-util/void-tag-names.js should pass jshint', function (assert) {
    assert.ok(true, 'htmlbars-util/void-tag-names.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvdm9pZC10YWctbmFtZXMuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFLLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDdkMsT0FBSyxDQUFDLElBQUksQ0FBQyxvREFBb0QsRUFBRSxVQUFTLE1BQU0sRUFBRTtBQUNoRixVQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxxREFBcUQsQ0FBQyxDQUFDO0dBQ3hFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy11dGlsL3ZvaWQtdGFnLW5hbWVzLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlFVbml0Lm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtdXRpbCcpO1xuUVVuaXQudGVzdCgnaHRtbGJhcnMtdXRpbC92b2lkLXRhZy1uYW1lcy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbihhc3NlcnQpIHsgXG4gIGFzc2VydC5vayh0cnVlLCAnaHRtbGJhcnMtdXRpbC92b2lkLXRhZy1uYW1lcy5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=